<?php
/**
 * @copyright Copyright (c) Xerox Corporation, CodeX Team, 2001-2005. All rights reserved
 * @author Marc Nazarian <marc.nazarian@xrce.xerox.com>
 * 
 * @version $Id:$
 *
 * SVNUpdateFilter
 */

//$Language->loadLanguageMsg('svnupdate/svnupdate');

require_once("SVNCommit.class");

define("LEVEL_OPERATOR_CRITERIA", "level_op");
define("LEVEL_CRITERIA", "level");
define("NEED_MANUAL_UPDATE_CRITERIA", "manualupdate");

define("GREATER_THAN", "gt");
define("GREATER_OR_EQUAL", "ge");
define("EQUAL", "eq");
define("LESS_THAN", "lt");
define("LESS_OR_EQUAL", "le");

define("NEED_MANUAL_UPDATE", "need");
define("DONT_NEED_MANUAL_UPDATE", "donotneed");
define("ANY_MANUAL_UPDATE", "any");


class SVNUpdateFilter {
    
    /**
     * @var array the filter for updates array($key=>$value)
     */
    var $filter;
    
    /**
     * SVNUpdateFilter constructor
     * Set the default filter (no filter)
     */
    function SVNUpdateFilter() {
        $this->filter = array();
        $this->filter[LEVEL_OPERATOR_CRITERIA] = GREATER_OR_EQUAL;
        $this->filter[LEVEL_CRITERIA] = "1";
        $this->filter[NEED_MANUAL_UPDATE_CRITERIA] = ANY_MANUAL_UPDATE;
    }
    
    /**
     * Add a criteria to this filter
     *
     * @param string $key the name (key) of the criteria
     * @param string $value the value of the criteria
     */
    function addCriteria($key, $value) {
        $this->filter[$key] = $value;
    }
    
    /**
     * Get the criteria regarding to the the key
     *
     * @param string $key the key of the criteria we want to retrieve the value
     * @return string the value of the criteria corresponding to the key, or null if the key doesn't exist
     */
    function getCriteria($key) {
        if (isset($this->filter[$key])) {
            return $this->filter[$key];
        }
        return null;
    }
    
    /**
     * Apply the filter to the array of commits
     *
     * @param array{SVNCommit} the array of SVNCommits we want to filter.
     * @return array{SVNCommit} the array of SVNCommits that accept the filter
     */
    function apply($commits) {
        $commits_after_filter = array();
        foreach($commits as $commit) {
            if ($this->accept($commit)) {
                $commits_after_filter[] = $commit;
            }
        }
        return $commits_after_filter;
    }
    
    /**
     * Return a boolean syaing if the commit $commit accpet the filter or not
     * This is the method to tune if you want to add a criteria.
     *
     * @param Object{SVNCommit} the commit we want to test
     * @return boolean true if the commit accept the filter, false otherwise
     */
    function accept($commit) {
        $accept = false;
        if ($this->_compare($commit->getLevel(), $this->getCriteria(LEVEL_CRITERIA), $this->getCriteria(LEVEL_OPERATOR_CRITERIA))) {
            if ( ($this->getCriteria(NEED_MANUAL_UPDATE_CRITERIA) == ANY_MANUAL_UPDATE) || 
                 ($commit->needManualUpdate() && $this->getCriteria(NEED_MANUAL_UPDATE_CRITERIA) == NEED_MANUAL_UPDATE) || 
                 (!$commit->needManualUpdate() && $this->getCriteria(NEED_MANUAL_UPDATE_CRITERIA) == DONT_NEED_MANUAL_UPDATE)) {
                        $accept = true;
            }
        }
        return $accept;
    }
    
    /**
     * Compare $left and $right regarding to the operator $operator
     *
     * @static
     * @param int $left the left operand
     * @param int $right the right operand
     * @param string $operator the operator
     * @return boolean true if ($left $operator $right), false otherwise
     */
    function _compare($left, $right, $operator) {
        switch ($operator) {
            case LESS_OR_EQUAL:
                return ($left <= $right);
                break;
            case LESS_THAN:
                return ($left < $right);
                break;
            case EQUAL:
                return ($left == $right);
                break;
            case GREATER_THAN:
                return ($left > $right);
                break;
            case GREATER_OR_EQUAL:
                return ($left >= $right);
                break;
            default:
                return false;
                break;
        }
    }
    
    /**
     * Return the HTML code for the filter form
     */
    function getHtmlForm() {
        $Language =& $GLOBALS['Language'];
        $output = '';
        
        $output .= '<form action="'.$_SERVER['PHP_SELF'].'" method="post" name="serverupdate_formfilter">';
        $output .= ' <fieldset name="filter">';
        $output .= ' <legend>Filter:</legend>';
        $output .= ' <input type="hidden" name="action" value="browse" />';
        $output .= ' <input type="hidden" name="sort" value="yes" />';
        $output .= '  level';
        $output .= '  <select name="'.LEVEL_OPERATOR_CRITERIA.'">';
        $output .= '   <option value="'.LESS_OR_EQUAL.'"';
        if ($this->getCriteria(LEVEL_OPERATOR_CRITERIA) == LESS_OR_EQUAL) {
            $output .= ' selected="selected"';
        }
        $output .= '>&lt;=</option>';
        $output .= '   <option value="'.EQUAL.'"';
        if ($this->getCriteria(LEVEL_OPERATOR_CRITERIA) == EQUAL) {
            $output .= ' selected="selected"';
        }
        $output .= '>=</option>';
        $output .= '   <option value="'.GREATER_OR_EQUAL.'"';
        if ($this->getCriteria(LEVEL_OPERATOR_CRITERIA) == GREATER_OR_EQUAL) {
            $output .= ' selected="selected"';
        }
        $output .= '>&gt;=</option>';
        $output .= '  </select>';
        $output .= '  <select name="'.LEVEL_CRITERIA.'">';
        for ($i=1; $i<=9; $i++) {
            $output .= '   <option value="'.$i.'"';
            if ($i == $this->getCriteria(LEVEL_CRITERIA)) {
                $output .= ' selected="selected"';
            }
            $output .= '>'.$i.'</option>';
        }
        $output .= '  </select>';
        $output .= '  and ';
        $output .= '  <select name="'.NEED_MANUAL_UPDATE_CRITERIA.'">';
        $output .= '   <option value="'.ANY_MANUAL_UPDATE.'">any</option>';
        $output .= '   <option value="'.NEED_MANUAL_UPDATE.'"';
        if ($this->getCriteria(NEED_MANUAL_UPDATE_CRITERIA) == NEED_MANUAL_UPDATE) {
            $output .= ' selected="selected"';
        }
        $output .= '>need</option>';
        $output .= '   <option value="'.DONT_NEED_MANUAL_UPDATE.'"';
        if ($this->getCriteria(NEED_MANUAL_UPDATE_CRITERIA) == DONT_NEED_MANUAL_UPDATE) {
            $output .= ' selected="selected"';
        }
        $output .= '>don\'t need</option>';
        $output .= '  </select>';
        $output .= 'manual update ';
        $output .= '  <input type="submit" value="Go" />';
        $output .= '</fieldset>';
        $output .= '</form>';
        
        return $output;
        
    }
    
}

?>
