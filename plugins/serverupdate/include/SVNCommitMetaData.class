<?php
/**
 * @copyright Copyright (c) Xerox Corporation, CodeX Team, 2001-2005. All rights reserved
 * @author Marc Nazarian <marc.nazarian@xrce.xerox.com>
 * 
 * @version $Id: SVNCommitMetaData.class 2658 2006-04-11 14:36:30Z mnazaria $
 *
 * SVNUpdate
 */

// Waiting PHP 5, we use define as 'class constant'
define("LEVEL_TXT", "level=");
define("NEED_MANUAL_UPDATE_TXT", "need manual update=");

class SVNCommitMetaData {
    
    /**
     * @var int $level the of criticality for the commit
     */
    var $level;
    
    /**
     * @var bool $needManualUpdate if the commit needs a manual update or not
     */
    var $needManualUpdate;
    
    /**
     * SVNCommitMetaData constructor
     */
    function SVNCommitMetaData() {
        $this->setLevel(null);
        $this->setNeedManualUpdate(null);
    }
    
    function getLevel() {
        return $this->level;
    }
    function setLevel($level) {
        $this->level = $level;
    }
    function getNeedManualUpdate() {
        return $this->needManualUpdate;
    }
    function setNeedManualUpdate($needManualUpdate) {
        $this->needManualUpdate = $needManualUpdate;
    }
    
    /**
     * Get the CSS class regarding to the level of criticality for this CommitMetaData
     *
     * @return string the CSS class for the level of this CommitMetaData
     */
    function getLevelClass() {
        // By default, if no level specified, we assign the lower importance
        $class = 'priorj';
        switch ($this->getLevel()) {
            case "0":
                $class = 'priorj';
                break;
            case "1":
                $class = 'priori';
                break;
            case "2":
                $class = 'priorh';
                break;
            case "3":
                $class = 'priorg';
                break;
            case "4":
                $class = 'priorf';
                break;
            case "5":
                $class = 'priore';
                break;
            case "6":
                $class = 'priord';
                break;
            case "7":
                $class = 'priorc';
                break;
            case "8":
                $class = 'priorb';
                break;
            case "9":
                $class = 'priora';
                break;
        }
        return $class;
    }
    
    /**
     * Set the meta data of the commit by parsing the commit message.
     * This is very closed to the commit message convention.
     * The current commit message looks like this :
     * <pre>
     *  -- upgrade info --
     *  level={0..9}
     *  need manual update={yes|no}
     *  --
     *  {HERE IS THE NORMAL MESSAGE}
     * </pre>
     *
     * @param string $commitMessage the commit log message we want to analyse
     *
     */
    function setMetaData($commitMessage) {
        $lines = explode("\n", $commitMessage);
        foreach($lines as $line) {
            // Trying to recognize the 'level' line
            if (ereg(LEVEL_TXT.'([0-9])', $line, $regs)) {
                $this->setLevel($regs[1]);
            }
            // Trying to recognize the 'need manual update' line
            if (ereg(NEED_MANUAL_UPDATE_TXT.'(yes|no)', $line, $regs)) {
                switch ($regs[1]) {
                    case "yes":
                        $this->setNeedManualUpdate(true);
                        break;
                    case "no":
                        $this->setNeedManualUpdate(false);
                        break;
                }
            }
        }
    }

}

?>
