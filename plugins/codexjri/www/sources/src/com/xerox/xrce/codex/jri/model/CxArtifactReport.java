/**
 * CodeX: Breaking Down the Barriers to Source Code Sharing
 *
 * Copyright (c) Xerox Corporation, CodeX, 2007. All Rights Reserved
 *
 * This file is licensed under the CodeX Component Software License
 *
 * @author Anne Hardyau
 * @author Marc Nazarian
 */

package com.xerox.xrce.codex.jri.model;

import java.util.ArrayList;
import java.util.List;

import com.xerox.xrce.codex.jri.model.wsproxy.ArtifactReport;
import com.xerox.xrce.codex.jri.model.wsproxy.ArtifactReportField;

/**
 * CxArtifactReport id the class for tracker reports. A report is about artifact
 * query. A report is the set of fields used for the query and fields used for
 * displaying the result
 * 
 */
public class CxArtifactReport extends CxFromServer {

    /**
     * The Id of this report
     */
    private int reportID;

    /**
     * Name of this report
     */
    private String name;

    /**
     * Description of this report
     */
    private String description;

    /**
     * Scope of this report. Allowed values are:
     * <ul>
     * <li>S : System (default report)</li>
     * <li>P : Project</li>
     * <li>I : Personal (Individual)</li>
     * </ul>
     * 
     */
    private String scope;

    /**
     * ID of the user who have created the report (only valid for Personal
     * reports)
     */
    private int userID;

    /**
     * Reports field of this reports
     */
    private List<CxArtifactReportField> artifactReportFields;

    /**
     * Constructor from an ArtifactReport Object (generated by WSDL2JAVA)
     * 
     * @param server
     * @param artifactReport
     */
    public CxArtifactReport(CxServer server, ArtifactReport artifactReport) {
        super(server);
        this.reportID = artifactReport.getReport_id();
        this.name = artifactReport.getName();
        this.scope = artifactReport.getScope();
        this.userID = artifactReport.getUser_id();

        this.artifactReportFields = new ArrayList<CxArtifactReportField>();
        ArtifactReportField[] reportFields = artifactReport.getFields();
        for (ArtifactReportField reportField : reportFields) {
            this.artifactReportFields.add(new CxArtifactReportField(this.getServer(), reportField));
        }
    }

    /**
     * Constructor from an CxArtifactReportDesc Object (description of a report,
     * without the report fields -- for performance reasons)
     * 
     * @param reportDesc the description structure of the report
     */
    public CxArtifactReport(CxArtifactReportDesc reportDesc) {
        super(reportDesc.getServer());
        this.reportID = reportDesc.getID();
        this.name = reportDesc.getName();
        this.scope = reportDesc.getScope();
        this.userID = reportDesc.getUserID();
        this.artifactReportFields = new ArrayList<CxArtifactReportField>();
    }

    /**
     * Returns the ID of this report
     * 
     * @return the ID of this report
     */
    public int getID() {
        return this.reportID;
    }

    /**
     * Returns the name of this report
     * 
     * @return the name of this report
     */
    public String getName() {
        return this.name;
    }

    /**
     * Returns the description of this report
     * 
     * @return the description of this report
     */
    public String getDescription() {
        return description;
    }

    /**
     * Returns the scope of this report
     * 
     * @return the scope of this report
     */
    public String getScope() {
        return scope;
    }

    /**
     * Returns the ID of the user who created this report (only valid for
     * Personal reports)
     * 
     * @return the ID of the user who created this report (only valid for
     *         Personal reports)
     */
    public int getUserID() {
        return userID;
    }

    /**
     * Returns the report fields of this report
     * 
     * @return the report fields of this report
     */
    public List<CxArtifactReportField> getFields() {
        return artifactReportFields;
    }

}
