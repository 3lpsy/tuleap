/**
 * CodeX: Breaking Down the Barriers to Source Code Sharing
 *
 * Copyright (c) Xerox Corporation, CodeX, 2007. All Rights Reserved
 *
 * This file is licensed under the CodeX Component Software License
 *
 * @author Anne Hardyau
 * @author Marc Nazarian
 */

package com.xerox.xrce.codex.jri.model;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import org.apache.axis.AxisFault;

import com.xerox.xrce.codex.jri.exceptions.CxException;
import com.xerox.xrce.codex.jri.exceptions.CxRemoteException;
import com.xerox.xrce.codex.jri.exceptions.CxServerException;
import com.xerox.xrce.codex.jri.messages.JRIMessages;
import com.xerox.xrce.codex.jri.model.tracker.CxTracker;
import com.xerox.xrce.codex.jri.model.wsproxy.ArtifactType;
import com.xerox.xrce.codex.jri.model.wsproxy.Group;
import com.xerox.xrce.codex.jri.model.wsproxy.TrackerDesc;

/**
 * CxGroup is the class for CodeX projects (named Groups in CodeX). A group is
 * hosted on a single server, and provides several services. A group contains
 * several users.
 * 
 */
public class CxGroup extends CxFromServer implements ITooltipable {

    /**
     * The Group Object (stub generated by WSDL2JAVA)
     */
    private Group group;

    private List<CxService> services = null;

    /**
     * Constructor from a group
     * 
     * @param server the server that host the group
     * @param group the group to construct the CxGroup
     */
    /* package */CxGroup(CxServer server, Group group) {
        super(server);
        this.group = group;
    }

    /**
     * Returns the ID of this group
     * 
     * @return the ID of this group
     */
    public int getId() {
        return this.group.getGroup_id();
    }

    /**
     * Returns the tooltip for this group.
     * 
     * @return the tooltip of this group
     */
    public String getToolTip() {
        return JRIMessages.getString("CxGroup.project") + this.getName();
    }

    /**
     * Returns the services provided by this project
     * 
     * @return the services provided by this group
     * @throws CxException
     */
    public List<CxService> getServices() throws CxException {
        return this.getServices(false);
    }

    /**
     * Returns the services provided by this project
     * 
     * @param refresh true if you want to enforce to refresh the list from the
     *        CodeX server (some changes can have be done by other users), false
     *        otherwise
     * @return the services provided by this group
     * @throws CxException
     */
    public synchronized List<CxService> getServices(boolean refresh)
                                                                    throws CxException {
        if (this.services == null || refresh) {
            this.initServices();
        }
        return this.services;
    }

    /**
     * Returns the name of this group
     * 
     * @return the name of this group
     */
    public String getName() {
        return group.getGroup_name();
    }

    /**
     * Returns the tracker of this group with ID groupArtifactId
     * 
     * @param groupArtifactId the ID of the searched tracker
     * @return the tracker of this group with ID groupArtifactId, or null if not
     *         found
     * @throws CxRemoteException
     */
    public CxTracker getTrackerById(int groupArtifactId)
                                                        throws CxRemoteException,
                                                        CxException {
        if (this.getServices() == null
            || !this.getServices().get(0).getContent().containsKey(
                groupArtifactId)) {
            ArtifactType art;
            CxTracker tracker = null;
            CxServiceTracker svcTraker;

            try {

                art = this.server.getBinding().getArtifactType(
                    this.server.getSession().getSession_hash(), this.getId(),
                    groupArtifactId);

                tracker = new CxTracker(this.server, art);

                svcTraker = new CxServiceTracker(this.server, JRIMessages.getString("CxGroup.trackers"));
                svcTraker.setGroup(this);
                svcTraker.getContent().put(tracker.getId(), tracker);

                tracker.setServiceTracker(svcTraker);
                tracker.setGroup(this);

            } catch (RemoteException e) {
                throw new CxRemoteException(e);
            }

            return tracker;
        } else {
            return (CxTracker) this.getServices().get(0).getContent().get(
                groupArtifactId);
        }

    }

    /**
     * Init services with server data. This function init tracker service onnly,
     * with {@link CxTrackerDesc} (not with all the tracker structure for
     * performance reasons)
     * 
     * @throws CxException
     */
    private void initServices() throws CxException {
        try {
            // service tracker init
            CxServiceTracker serviceTracker = new CxServiceTracker(this.server, JRIMessages.getString("CxGroup.trackers")); //$NON-NLS-1$
            serviceTracker.setGroup(this);
            this.services = new ArrayList<CxService>();
            this.services.add(serviceTracker);
            // tracker desc init
            TrackerDesc[] trackersDesc = server.getBinding().getTrackerList(
                server.getSession().getSession_hash(), this.getId());
            // trackers init
            for (int j = 0; j < trackersDesc.length; j++) {
                CxTracker tracker = new CxTracker(this.server, trackersDesc[j]);
                tracker.setServiceTracker(serviceTracker);
                tracker.setGroup(this);
                serviceTracker.getContent().put(tracker.getId(), tracker);
                // by default, the first report is "selected"
                tracker.setReportIdSelected(tracker.getReportsDesc().get(0).getID());
            }
        } catch (AxisFault axisFault) {
            this.services = null;
            throw new CxServerException(axisFault);
        } catch (RemoteException re) {
            this.services = null;
            throw new CxRemoteException(re);
        }
    }

}
