<?php
/**
 * Copyright © STMicroelectronics, 2006. All Rights Reserved.
 * 
 * Originally written by Manuel VACELET, 2006.
 * 
 * This file is a part of CodeX.
 * 
 * CodeX is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * CodeX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with CodeX; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * $Id$
 */

define('PLUGIN_DOCMAN_METADATA_TYPE_TEXT', 1);
define('PLUGIN_DOCMAN_METADATA_TYPE_STRING', 6);
define('PLUGIN_DOCMAN_METADATA_TYPE_DATE', 4);
define('PLUGIN_DOCMAN_METADATA_TYPE_LIST', 5);

class Docman_MetadataFactory {
    
    function &getFromLabel($label, $value=null) {
        //    $hcmd = array('title', 'description', 'owner', 'create_date', 'status'
        //              , 'obsolescence_date');
        
        $md = null;

        switch($label) {
        case 'title':
            $md = new Docman_Metadata();
            $md->setName('Title');
            $md->setLabel('title');
            $md->setDescription('Title of the document. Always displayed to user.');
            $md->setType(PLUGIN_DOCMAN_METADATA_TYPE_STRING);
            $md->setIsRequired(true);
            $md->setIsEmptyAllowed(false);
            $md->setKeepHistory(false);
            break;

        case 'description':
            $md = new Docman_Metadata();
            $md->setName('Description');
            $md->setLabel('description');
            $md->setDescription('Description of the document. Always displayed to user.');
            $md->setType(PLUGIN_DOCMAN_METADATA_TYPE_TEXT);
            $md->setIsRequired(true);
            $md->setIsEmptyAllowed(true);
            $md->setKeepHistory(false);
            break;

        case 'owner':
            $md = new Docman_Metadata();
            $md->setName('Owner');
            $md->setLabel('owner');
            $md->setDescription('The one who owns the document. May change.');
            $md->setType(PLUGIN_DOCMAN_METADATA_TYPE_STRING);
            $md->setIsRequired(true);
            $md->setIsEmptyAllowed(false);
            $md->setKeepHistory(true);
            break;

        case 'create_date':
            $md = new Docman_Metadata();
            $md->setName('Creation Date');
            $md->setLabel('create_date');
            $md->setType(PLUGIN_DOCMAN_METADATA_TYPE_DATE);
            $md->setIsRequired(true);
            break;

        case 'update_date':
            $md = new Docman_Metadata();
            $md->setName('Update Date');
            $md->setLabel('update_date');
            $md->setType(PLUGIN_DOCMAN_METADATA_TYPE_DATE);
            $md->setIsRequired(true);
            break;

        case 'status': 
            $md = new Docman_Metadata();
            $md->setName('Status');
            $md->setLabel('status');
            $md->setDescription('Document status');
            $md->setType(PLUGIN_DOCMAN_METADATA_TYPE_LIST);
            $md->setIsRequired(false);
            $md->setIsEmptyAllowed(true);
            $md->setKeepHistory(true);
            //            $md->setDefaultValue()
            break;

        case 'obsolescence_date':
            //$md = new Docman_MetadataValidity();
            $md = new Docman_Metadata();
            $md->setName('Obsolescence date');
            $md->setLabel('obsolescence_date');
            $md->setDescription('Define a period of validity for your document. It will automaticaly be archived at the end of the period.');
            $md->setType(PLUGIN_DOCMAN_METADATA_TYPE_DATE);
            $md->setIsRequired(false);
            $md->setIsEmptyAllowed(true);
            $md->setKeepHistory(false);
            break;
        }

        if($md !== null) {
            $md->setValue($value);
            $md->setSpecial(true);
            $md->setCanChangeName(false);
            $md->setCanChangeIsEmptyAllowed(false);
            $md->setCanChangeDescription(false);
        }

        return $md;
    }
}

class Docman_Metadata {
    var $id;
    var $groupId;
    var $name;
    var $type;
    //    var $displayType;
    //    var $displaySize;
    var $label;
    var $description;
    var $isRequired;
    var $isEmptyAllowed;
    var $keepHistory;
    var $special;
    var $defaultValue;
    var $useIt;

    function Docman_Metadata() {
        $this->id = null;
        $this->groupId = null;
        $this->name = null;
        $this->type = null;
        //        $this->displayType = null;
        //        $this->displaySize = null;
        $this->label = null;
        $this->description = null;
        $this->isRequired = null;
        $this->isEmptyAllowed = null;
        $this->keepHistory = null;
        $this->special = null;
        $this->defaultValue = null;
        $this->useIt = null;
    }

    //{{{
    function setId($v) {
        $this->id = $v;
    }
    function getId() {
        return $this->id;
    }

    function setGroupId($v) {
        $this->groupId = $v;
    }
    function getGroupId() {
        return $this->groupId;
    }

    function setName($v) {
        $this->name = $v;
    }
    function getName() {
        return $this->name;
    }

    function setType($v) {
        $this->type = $v;
    }
    function getType() {
        return $this->type;
    }

    //    function setDisplayType($v) {
    //        $this->displayType = $v;
    //    }
    //    function getDisplayType() {
    //        return $this->displayType;
    //    }

    //    function setDisplaySize($v) {
    //        $this->displaySize = $v;
    //    }
    //    function getDisplaySize() {
    //        return $this->displaySize;
    //    }

    function setLabel($v) {
        $this->label = $v;
    }
    function getLabel() {
        return $this->label;
    }

    function setDescription($v) {
        $this->description = $v;
    }
    function getDescription() {
        return $this->description;
    }

    function setIsRequired($v) {
        $this->isRequired = $v;
    }
    function isRequired() {
        return $this->isRequired;
    }

    function setIsEmptyAllowed($v) {
        $this->isEmptyAllowed = $v;
    }
    function isEmptyAllowed() {
        return $this->isEmptyAllowed;
    }

    function setKeepHistory($v) {
        $this->keepHistory = $v;
    }
    function getKeepHistory() {
        return $this->keepHistory;
    }

    function setSpecial($v) {
        $this->special = $v;
    }
    function getSpecial() {
        return $this->special;
    }

    function setDefaultValue($v) {
        $this->defaultValue = $v;
    }
    function getDefaultValue() {
        return $this->defaultValue;
    }
    ///}}}

    function setUseIt($v) {
        $this->useIt = $v;
    }
    function getUseIt() {
        return $this->useIt;
    }
    
    var $canChangeName;
    function setCanChangeName($v) {
        $this->canChangeName = $v;
    }
    function canChangeName() {
        return $this->canChangeName;
    }
    
    var $canChangeType;
    function setCanChangeType($v) {
        $this->canChangeType = $v;
    }
    function canChangeType() {
        return $this->canChangeType;
    }

    var $canChangeDescription;
    function setCanChangeDescription($v) {
        $this->canChangeDescription = $v;
    }
    function canChangeDescription() {
        return $this->canChangeDescription;
    }

    var $canChangeIsEmptyAllowed;
    function setCanChangeIsEmptyAllowed($v) {
        $this->canChangeIsEmptyAllowed = $v;
    }
    function canChangeIsEmptyAllowed() {
        return $this->canChangeIsEmptyAllowed;
    }

    var $canChangeDefaultValue;
    function setCanChangeDefaultValue($v) {
        $this->canChangeDefaultValue = $v;
    }
    function canChangeDefaultValue() {
        return $this->canChangeDefaultValue;
    }

    var $value;
    function setValue($v) {
        $this->value = $v;
    }
    function getValue() {
        return $this->value;
    }

    function initFromRow($row) {
        if(isset($row['field_id'])) $this->id = $row['field_id'];
        if(isset($row['group_id'])) $this->groupId = $row['group_id'];
        if(isset($row['field_name'])) $this->name = $row['field_name'];
        if(isset($row['data_type'])) $this->type = $row['data_type'];
        //        if(isset($row['display_type'])) $this->displayType = $row['display_type'];
        //        if(isset($row['display_size'])) $this->displaySize = $row['display_size'];
        if(isset($row['label'])) $this->label = $row['label'];
        if(isset($row['description'])) $this->description = $row['description'];
        if(isset($row['required'])) $this->isRequired = $row['required'];
        if(isset($row['empty_ok'])) $this->isEmptyAllowed = $row['empty_ok'];
        if(isset($row['special'])) $this->special = $row['special'];
        if(isset($row['default_value'])) $this->defaultValue = $row['default_value'];
    }
}
?>
