<?php
/**
 * Copyright (c) STMicroelectronics, 2006. All Rights Reserved.
 *
 * Originally written by Manuel Vacelet, 2006
 *
 * This file is a part of CodeX.
 *
 * CodeX is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * CodeX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CodeX; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */
require_once('common/dao/include/DataAccessObject.class');

class ItemDao extends DataAccessObject {

    function ItemDao(&$da) {
        DataAccessObject::DataAccessObject($da);
    }

    function searchById($id) {
        $_id = (int) $id;
        
        $sql = 'SELECT * '
            .' FROM plugin_docman_item'
            .' WHERE item_id='.$_id;

        return $this->retrieve($sql);
    }

    function searchByGroupId($id, $collapsed = array()) {
        $_id = (int) $id;

        $sql_opt = '';
        if(is_array($collapsed) && count($collapsed) > 0) {
            $sql_opt = ' AND parent_id NOT IN ('.implode(',', $collapsed).')';
        }

        $sql = 'SELECT * '
            .' FROM plugin_docman_item'
            .' WHERE group_id='.$_id
            .$sql_opt;

        return $this->retrieve($sql);
    }

    function searchAllParent($group_id) {
        $sql = sprintf('SELECT parent_id'
                       .' FROM plugin_docman_item'
                       .' WHERE group_id=101'
                       .' GROUP BY parent_id');

        return $this->retrieve($sql);
    }

    /**
     * create a row in the table plugin_docman_item
     * @return true or id(auto_increment) if there is no error
     */
    function create($parent_id, $group_id, $title, $description, $create_date, $update_date, $user_id, $rank, $item_type, $link_url, $wiki_page, $file_is_embedded) {
                $sql = sprintf("INSERT INTO plugin_docman_item (parent_id, group_id, title, description, create_date, update_date,
user_id, rank, item_type, link_url, wiki_page, file_is_embedded) VALUES (%d, %d, %s, %s, %d, %d, %d, %d, %d, %s, %s, %d)",
                                $parent_id,
                                $group_id,
                                $this->da->quoteSmart($title),
                                $this->da->quoteSmart($description),
                                $create_date,
                                $update_date,
                                $user_id,
                                $rank,
                                $item_type,
                                $link_url,
                                $wiki_page,
                                $file_is_embedded);
        $inserted = $this->update($sql);
        if ($inserted) {
            $dar =& $this->retrieve("SELECT LAST_INSERT_ID() AS id");
            if ($row = $dar->getRow()) {
                $inserted = $row['id'];
            } else {
                $inserted = $dar->isError();
            }
        }
        return $inserted;
    }

    /**
     * create a row in the table plugin_docman_item 
     * @return true or id(auto_increment) if there is no error
     */
    function updateById($item_id, $parent_id=null, $group_id=null, $title=null,
                    $description=null, $create_date=null, $update_date=null, 
                    $user_id=null, $rank=null, $item_type=null, $link_url=null,
                    $wiki_page=null, $file_is_embedded=null) {       
       
        $argArray = array();

        if($parent_id !== null) {
            $argArray[] = 'parent_id='.((int) $parent_id);
        }

        if($group_id !== null) {
            $argArray[] = 'group_id='.((int) $group_id);
        }

        if($title !== null) {
            $argArray[] = 'title='.$this->da->quoteSmart($title);
        }

        if($description !== null) {
            $argArray[] = 'description='.$this->da->quoteSmart($description);
        }

        if($create_date !== null) {
            $argArray[] = 'create_date='.((int) $create_date);
        }

        if($update_date !== null) {
            $argArray[] = 'update_date='.((int) $update_date);
        }

        if($user_id !== null) {
            $argArray[] = 'user_id='.((int) $user_id);
        }

        if($rank !== null) {
            $argArray[] = 'rank='.((int) $rank);
        }

        if($item_type !== null) {
            $argArray[] = 'item_type='.((int) $item_type);
        }

        if($link_url !== null) {
            $argArray[] = 'link_url='.$this->da->quoteSmart($link_url);
        }

        if($wiki_page !== null) {
            $argArray[] = 'wiki_page='.$this->da->quoteSmart($wiki_page);
        }

        if($file_is_embedded !== null) {
            $argArray[] = 'file_is_embedded='.((int) $file_is_embedded);
        }
        
        $sql = 'UPDATE plugin_docman_item'
            .' SET '.implode(', ', $argArray)
            .' WHERE item_id='.((int) $item_id);;

        $inserted = $this->update($sql);
        
        return $inserted;
    }

    /**
     */
    function delete($item_id) {
        $sql = sprintf("DELETE FROM plugin_docman_item WHERE item_id=%d",
                       $item_id);

        $deleted = $this->update($sql);
        
        return $deleted;
    }

    function searchCollapseUserPrefs($group_id, $user_id) {
        $pref_base = DOCMAN_COLLAPSE_FOLDER_PREF.'_'.((int)$group_id);

        $sql = sprintf('SELECT preference_name, preference_value'
                       .' FROM user_preferences'
                       .' WHERE user_id=%d'
                       .' AND preference_name LIKE "%s"'
                       ,$user_id
                       ,$pref_base.'_%');
        return $this->retrieve($sql);
    }

}

?>