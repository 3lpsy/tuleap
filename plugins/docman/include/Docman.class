<?php
/**
 * Copyright (c) STMicroelectronics, 2006. All Rights Reserved.
 *
 * Originally written by Manuel Vacelet, 2006
 *
 * This file is a part of CodeX.
 *
 * CodeX is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * CodeX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CodeX; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */
 
require_once('Group.class');
require_once('common/mvc/Controler.class');
require_once('common/include/HTTPRequest.class');
require_once('common/include/UserManager.class');

require_once('view/Docman_View_GetShowViewVisitor.class');
require_once('view/Docman_View_GetFieldsVisitor.class');

require_once('DocmanActions.class');
require_once('DocmanLastBrowseRequest.class');

require_once('Feedback.class');

require_once('Docman_Log.class');
require_once('common/event/EventManager.class');

require_once('Docman_ReportBo.class');


$GLOBALS['Language']->loadLanguageMsg('docman', 'docman');

define('PLUGIN_DOCMAN_EVENT_ADD',         1);
define('PLUGIN_DOCMAN_EVENT_EDIT',        2);
define('PLUGIN_DOCMAN_EVENT_MOVE',        3);
define('PLUGIN_DOCMAN_EVENT_DEL',         4);
define('PLUGIN_DOCMAN_EVENT_ACCESS',      5);
define('PLUGIN_DOCMAN_EVENT_NEW_VERSION', 6);

define('PLUGIN_DOCMAN_VIEW_PREF',            'plugin_docman_view');
define('PLUGIN_DOCMAN_COLLAPSE_FOLDER_PREF', 'plugin_docman_hide');
define('PLUGIN_DOCMAN_COLLAPSE_FOLDER',      2);
define('PLUGIN_DOCMAN_PREF', 'plugin_docman');

define('PLUGIN_DOCMAN_ITEM_TYPE_FOLDER',       1);
define('PLUGIN_DOCMAN_ITEM_TYPE_FILE',         2);
define('PLUGIN_DOCMAN_ITEM_TYPE_LINK',         3);
define('PLUGIN_DOCMAN_ITEM_TYPE_EMBEDDEDFILE', 4);
define('PLUGIN_DOCMAN_ITEM_TYPE_WIKI',         5);

class Docman extends Controler {
    // variables
    var $request;
    var $user;
    var $groupId;
    var $themePath;
    var $plugin;
    var $logger;
    var $feedback;
    
    function Docman(&$plugin, $pluginPath, $themePath) {
        $this->request    = & HTTPRequest::instance();
        $this->user       = null;
        $this->groupId    = null;
        $this->pluginPath = $pluginPath;
        $this->themePath  = $themePath;
        $this->plugin     = $plugin;
        
        $flash = user_get_preference('plugin_docman_flash');
        if ($flash) {
            user_del_preference('plugin_docman_flash');
            $this->feedback = unserialize($flash);
        } else {
            $this->feedback =& new Feedback();
        }
        
        $this->logger  =& new Docman_Log();
        $event_manager =& $this->_getEventManager();
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_ADD,          $this->logger, 'log', true, 0);
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_EDIT,         $this->logger, 'log', true, 0);
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_MOVE,         $this->logger, 'log', true, 0);
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_DEL,          $this->logger, 'log', true, 0);
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_ACCESS,       $this->logger, 'log', true, 0);
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_NEW_VERSION,  $this->logger, 'log', true, 0);
    }
    function getLogger() {
        return $this->logger;
    }
    function logsDaily($params) {
        $this->logger->logsDaily($params);
    }
    
    function &_getEventManager() {
        return EventManager::instance();
    }
    
    function &getUser() {
        if($this->user === null) {
            $um =& UserManager::instance();
            $this->user = $um->getCurrentUser();
        }
        return $this->user;
    }
    
    /***************** PERMISSIONS ************************/
    function userCanRead($item_id) {
        return $this->userHasPermission('PLUGIN_DOCMAN_READ', $item_id) || $this->userCanWrite($item_id);
    }
    function userCanWrite($item_id) {
        return $this->userHasPermission('PLUGIN_DOCMAN_WRITE', $item_id) || $this->userCanManage($item_id);
    }
    function userCanManage($item_id) {
        return $this->userHasPermission('PLUGIN_DOCMAN_MANAGE', $item_id) || $this->userCanAdmin($item_id);
    }
    function userCanAdmin() {
        return $this->userHasPermission('PLUGIN_DOCMAN_ADMIN', $this->request->get('group_id'));
    }
    function userHasPermission($permission_type, $object_id) {
        $user =& $this->getUser();
        // Super-user has all rights...
        $has_permission = $user->isSuperUser();
        if (!$has_permission) {
            // permissions set for this object.
            $res = permission_db_authorized_ugroups($permission_type, (int)$object_id);
            if (db_numrows($res) < 1 && $permission_type == 'PLUGIN_DOCMAN_ADMIN') {
                // No ugroup defined => no permissions set => get default permissions only for admin permission
                $res=permission_db_get_defaults($permission_type);
            } 
            while (!$has_permission && ($row = db_fetch_array($res))) {
                // should work even for anonymous users
                $has_permission = ugroup_user_is_member($user->getId(), $row['ugroup_id'], (int)$this->request->get('group_id'));
            }
        }
        return $has_permission;
    }
    /******************************************************/
    
    function getGroupId() {
        if($this->groupId === null) {
            $_gid = (int) $this->request->get('group_id');
            if($_gid > 0) {
                $this->groupId = $_gid;
            }
        }
        return $this->groupId;
    }

    function getDefaultUrl() {
        $_gid = $this->getGroupId();
        return $this->pluginPath.'/?group_id='.$_gid;
    }

    function getAdminUrl() {
        $_gid = $this->getGroupId();
        return $this->pluginPath.'/admin/?group_id='.$_gid;
    }
    
    function getThemePath() {
        return $this->themePath;
    }
    
    function _initFilters($view) {        
        $reportBo = new Docman_ReportBo();

        $report =& $reportBo->get($view);
        if($report !== null) {
            $reportBo->setup($report, $this->request, $this->getGroupId(), $this->feedback);
        }

        $this->_viewParams['filter'] =& $report;            
    }


    /*private*/ function _checkBrowserCompliance() {
        if($this->request->browserIsNetscape4()) {
            $this->feedback->log('warning', $GLOBALS['Language']->getText('plugin_docman', 'docman_browserns4'));
        }
    }


    function request() {
        if (!$this->request->exist('group_id')) {
            $this->feedback->log('error', 'Project is missing.');
            $this->view = 'Error';
        } else {
            $allowed = true;
            $allowed_projects = $this->getProperty('allowed_projects');
            if ($allowed_projects && (strpos($allowed_projects, '*') === false)) {
                $allowed_projects = explode(',', $allowed_projects);
                $allowed = in_array($this->request->get('group_id'), $allowed_projects);
            }
            if (!$allowed) {
                $g = group_get_object($this->request->get('group_id'));
                $unix_name = $g->getUnixName();
                $this->_viewParams['redirect_to'] = '/projects/'. $unix_name .'/';
                $this->view = 'Redirect';
            } else {
                // Browser alert
                $this->_checkBrowserCompliance();

                $this->_viewParams['user']        =& $this->getUser();
                $this->_viewParams['default_url'] =  $this->getDefaultUrl();
                $this->_viewParams['theme_path']  =  $this->getThemePath();
                $this->_viewParams['group_id']       = (int) $this->request->get('group_id');
                if($this->request->exist('version_number')) {
                    $this->_viewParams['version_number'] = (int) $this->request->get('version_number');
                }

                if ($this->request->exist('section')) {
                    $this->_viewParams['section'] = $this->request->get('section');
                } else if ($this->request->get('action') == 'permissions') {
                    $this->_viewParams['section'] = 'permissions';
                }
                $view = $this->request->exist('action') ? $this->request->get('action') : 'show';
                
                $item_factory =& $this->_getItemFactory();
                $root =& $item_factory->getRoot($this->request->get('group_id'));
                if (!$root) { //docman is not installed for this project
                    $feedback_not_installed = true;
                    if ($this->userCanAdmin()) {
                        if ($view == 'install') {
                            if ($this->request->exist('confirm')) {
                                $this->action = 'install';
                                $this->view   = 'Installed';
                                $feedback_not_installed = false;
                            } else {
                                $g = group_get_object($this->request->get('group_id'));
                                $unix_name = $g->getUnixName();
                                $this->_viewParams['redirect_to'] = '/projects/'. $unix_name .'/';
                                $this->view = 'Redirect';
                            }
                        } else {
                            $this->view = 'Install';
                        }
                    } else {
                        $this->view = 'ProjectError';
                    }
                    if ($feedback_not_installed) {
                        $this->feedback->log('warning', 'Docman is not installed for this project.');
                    }
                } else {
                    $id = $this->request->get('id');
                    if (!$id && $this->request->exist('item')) {
                        $i = $this->request->get('item');
                        if (isset($i['id'])) {
                            $id = $i['id'];
                        }
                    }
                    if ($id) {
                        $item =& $item_factory->getItemFromDb($id);
                        if (!$item) {
                            $this->feedback->log('error', 'Unable to retrieve item. Perhaps it was removed.');
                            $this->view = 'DocmanError';
                        }
                    } else {
                        $item =& $root;
                    }
                    if ($item) {
                        $user     = $this->getUser();
                        $can_read = $user->isSuperUser();
                        if (!$can_read) {
                            $can_read = $this->userCanRead($item->getId());
                            if ($can_read) {
                                $parent       = $item;
                                $pm           =& PermissionsManager::instance();
                                $user_ugroups =& $user->getUgroups();
                                while ($can_read && $parent->getParentId() != 0) {
                                    $parent =& $item_factory->getItemFromDb($parent->getParentId());
                                    $can_read = $this->userCanRead($parent->getId());
                                }
                            }
                        }
                        $folder_or_document = is_a($item, 'Docman_Folder') ? 'folder' : 'document';
                        if (!$can_read) {
                            $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_view'));
                            $this->view = 'DocmanError';
                        } else {
                            $get_show_view =& new Docman_View_GetShowViewVisitor();
                            $this->_viewParams['item'] =& $item;
                            if (strpos($view, 'admin') === 0 && !$this->userCanAdmin()) {
                                $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_admin'));
                                $this->view = $item->accept($get_show_view);
                            } else {
                                $last_browse_request =& new DocmanLastBrowseRequest();
                                switch ($view) {
                                    case 'show':
                                        $this->view = $item->accept($get_show_view);
                                        $this->_initFilters($this->view);
                                        $item->accept($last_browse_request);
                                        break;
                                    case 'expandFolder':
                                        $this->action = 'expandFolder';
                                        if ($this->request->get('view') == 'ulsubfolder') {
                                            $this->view = 'RawTree';
                                        } else {
                                            $this->_viewParams['item'] =& $root;
                                            $this->view = 'Tree';
                                        }
                                        break;
                                    case 'collapseFolder':
                                        $this->action = 'collapseFolder';
                                        $this->_viewParams['item'] =& $root;
                                        $this->view = 'Tree';
                                        break;
                                    case 'admin_set_permissions':
                                        $this->action = $view;
                                        $this->view   = 'Admin_Permissions';
                                        break;
                                    case 'admin_change_view':
                                        $this->action = $view;
                                        $this->view   = 'Admin_View';
                                        break;
                                    case 'admin':
                                    case 'details':
                                        $this->view = ucfirst($view);
                                        break;
                                    case 'admin_view':
                                        $this->view = 'Admin_View';
                                        break;
                                    case 'admin_permissions':
                                        $this->view = 'Admin_Permissions';
                                        break;
                                    case 'move':
                                        if (!$this->userCanWrite($item->getId()) || !$this->userCanWrite($item->getParentId())) {
                                           $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_move'));
                                           $this->view = 'Details';
                                        } else {
                                           $this->view = ucfirst($view);
                                        }
                                        break;
                                    case 'newDocument':
                                    case 'newFolder':
                                        if (!$this->userCanWrite($item->getId())) {
                                            $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_create'));
                                            $this->view = 'Details';
                                        } else {
                                            $this->_viewParams['force_item'] = array();
                                            $this->view = ucfirst($view);
                                        }
                                        break;
                                    case 'move_here':
                                        if (!$this->request->exist('item_to_move')) {
                                            $this->feedback->log('error', 'Missing parameter.');
                                            $this->view = 'DocmanError';
                                        } else {
                                            $item_to_move =& $item_factory->getItemFromDb($this->request->get('item_to_move'));
                                            if (!$item_to_move || !($this->userCanWrite($item->getId()) && $this->userCanWrite($item_to_move->getId()) && $this->userCanWrite($item_to_move->getParentId()))) {
                                                $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_move'));
                                                $this->view = 'Details';
                                            } else {
                                                $this->action = 'move';
                                                $this->_viewParams['redirect_to'] = $last_browse_request->getUrl();
                                                $this->view = 'RedirectAfterCrud';
                                            }
                                        }
                                        break;
                                    case 'permissions':
                                        if (!$this->userCanManage($item->getId())) {
                                           $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_perms'));
                                           $this->view = 'Details';
                                        } else {
                                           $this->action = 'permissions';
                                           $this->view   = 'Details';
                                        }
                                        break;
                                    case 'confirmDelete':
                                        if (!$this->userCanWrite($item->getId()) || !$this->userCanWrite($item->getParentId())) {
                                            $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_delete'));
                                            $this->view = 'Details';
                                        } else {
                                            $this->view   = 'Delete';
                                        }
                                        break;
                                    case 'action_new_version':
                                        if (!$this->userCanWrite($item->getId())) {
                                            $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_edit'));
                                            $this->view = 'Details';
                                        } else {
                                            $this->view   = 'NewVersion';
                                        }
                                        break;
                                    case 'action_update':
                                        if (!$this->userCanWrite($item->getId())) {
                                            $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_edit'));
                                            $this->view = 'Details';
                                        } else {
                                            $this->view   = 'Update';
                                        }
                                        break;
                                    case 'edit':
                                        if (!$this->userCanWrite($item->getId())) {
                                            $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_edit'));
                                            $this->view = 'Details';
                                        } else {
                                            $this->view   = 'Edit';
                                        }
                                        break;
                                    case 'delete':
                                        if (!($this->userCanWrite($item->getId()) && $this->userCanWrite($item->getParentId()))) {
                                            $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_delete'));
                                            $this->view = 'Details';
                                        } else if ($this->request->exist('confirm')) {
                                            $this->action = $view;
                                            $this->_viewParams['default_url_params'] = array(
                                                'action'  => 'show',
                                                'id'      => $item->getParentId()
                                            );
                                            $this->view = 'RedirectAfterCrud';
                                        } else {
                                            $this->view = 'Details';
                                        }
                                        break;
                                    case 'createFolder':
                                    case 'createDocument':
                                        $i = $this->request->get('item');
                                        if (!$i || !isset($i['parent_id'])) {
                                            $this->feedback->log('error', 'Missing parameter.');
                                            $this->view = 'DocmanError';
                                        } else {
                                            $parent =& $item_factory->getItemFromDb($i['parent_id']);
                                            if (!$parent || !$this->userCanWrite($parent->getId())) {
                                                $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_create'));
                                                $this->view = $item->accept($get_show_view);
                                            } else {
                                                $this->action = $view;
                                                $this->_viewParams['redirect_to'] = $last_browse_request->getUrl();
                                                $this->view = 'RedirectAfterCrud';
                                            }
                                        }
                                        break;
                                    case 'update':
                                    case 'update_wl':
                                    case 'new_version':
                                        if (!$this->userCanWrite($item->getId())) {
                                            $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_edit'));
                                            $this->view = 'Details';
                                        } else {
                                            $valid = true;
                                            if ($this->request->exist('confirm')) {
                                                //Validations
                                                if ($view == 'update') {
                                                    $valid = $this->_validateRequest($item->accept(new Docman_View_GetFieldsVisitor()));
                                                } else {
                                                    $valid = $this->_validateRequest($item->accept(new Docman_View_GetSpecificFieldsVisitor()));
                                                }
                                                //Actions
                                                if ($valid) {
                                                    if ($view == 'update_wl') {
                                                        $this->action = 'update';
                                                    } else {
                                                        $this->action = $view;
                                                    }
                                                }
                                            }
                                            //Views
                                            if ($valid) {
                                                if ($view == 'update_wl' || $view == 'new_version') {
                                                    $section = 'actions';
                                                } else {
                                                    $section = 'properties';
                                                }
                                                $this->_viewParams['default_url_params'] = array(
                                                    'action'  => 'details',
                                                    'section' => $section,
                                                    'id'      => $item->getId()
                                                );
                                                $this->view = 'RedirectAfterCrud';
                                            } else {
                                                $this->_viewParams['force_item'] = $this->request->get('item');
                                                if ($view == 'update_wl') {
                                                    $this->view = 'Update';
                                                } else if ($view == 'new_version') {
                                                    $this->view = 'NewVersion';
                                                } else {
                                                    $this->view = 'Edit';
                                                }
                                            }
                                        }
                                        break;
                                    case 'change_view':
                                        $this->action = $view;
                                        $this->view   = $item->accept($get_show_view);
                                        $this->_initFilters($this->request->get('selected_view'));
                                        break;
                                    case 'install':
                                        $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_alreadyinstalled'));
                                        $this->view = 'DocmanError';
                                        break;
                                    default:
                                        die(htmlspecialchars($view) .' is not supported');
                                        break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function getProperty($name) {
        $info =& $this->plugin->getPluginInfo();
        return $info->getPropertyValueForName($name);
    }
    var $item_factory;
    function &_getItemFactory() {
        if (!$this->item_factory) {
            $this->item_factory =& new Docman_ItemFactory();
        }
        return $this->item_factory;
    }
    
    function forceView($view) {
        $this->view = $view;
    }
    
    function _validateRequest($fields) {
        $valid = true;
        foreach($fields as $field) {
            if (isset($field['validator'])) {
                if (!is_array($field['validator'])) {
                    $field['validator'] = array($field['validator']);
                }
                foreach($field['validator'] as $v) {
                    if (!$v->isValid()) {
                        $valid = false;
                        foreach($v->getErrors() as $error) {
                            $this->feedback->log('error', $error);
                        }
                    }
                }
            }
        }
        return $valid;
    }
    
    function viewsManagement() {
        $className = 'Docman_View_'. $this->view;
        require_once('view/'. $className .'.class');
        if (class_exists($className)) {
            $wv = new $className($this);
            $wv->display($this->_viewParams);
        } else {
            die($className .' does not exist.');
        }
    }
}

?>