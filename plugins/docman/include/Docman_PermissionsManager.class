<?php
/**
 * Copyright (c) STMicroelectronics, 2006. All Rights Reserved.
 *
 * Originally written by Manuel Vacelet, 2006
 *
 * This file is a part of CodeX.
 *
 * CodeX is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * CodeX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CodeX; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */

require_once('common/permission/PermissionsManager.class');

class Docman_PermissionsManager {
    var $groupId;
    var $cache_read;
    var $cache_write;
    var $cache_manage;
    var $cache_admin;

    function Docman_PermissionsManager($groupId) {
        $this->groupId = $groupId;
        $this->cache_read = array();
        $this->cache_write = array();
        $this->cache_manage = array();
        $this->cache_admin = array();
    }

    /**
    * The manager is a singleton
    */
    function &instance($groupId) {
        static $_docman_permissionmanager_instance;
        if (!isset($_docman_permissionmanager_instance[$groupId])) {
            $_docman_permissionmanager_instance[$groupId] = new Docman_PermissionsManager($groupId);
        }
        return $_docman_permissionmanager_instance[$groupId];
    }

    function &_getPermissionManagerInstance() {
        $pm =& PermissionsManager::instance();
        return $pm;
    }

    function userCanRead(&$user, $item_id) {
        if(!isset($this->cache_read[$user->getId()][$item_id])) {
            $pm =& $this->_getPermissionManagerInstance();
            $this->cache_read[$user->getId()][$item_id] = $user->isSuperUser() 
                || $this->userCanAdmin($user, $item_id) //There are default perms for admin
                || $pm->userHasPermission($item_id, 'PLUGIN_DOCMAN_READ', $user->getUgroups($this->groupId, array())) 
                || $this->userCanWrite($user, $item_id);
                
        }
        return $this->cache_read[$user->getId()][$item_id];
    }

    function userCanWrite(&$user, $item_id) {
        if(!isset($this->cache_write[$user->getId()][$item_id])) {
            $pm =& $this->_getPermissionManagerInstance();
            $this->cache_write[$user->getId()][$item_id] = $user->isSuperUser() 
                || $this->userCanAdmin($user) //There are default perms for admin
                || $pm->userHasPermission($item_id, 'PLUGIN_DOCMAN_WRITE', $user->getUgroups($this->groupId, array())) 
                || $this->userCanManage($user, $item_id);

            if($this->cache_write[$user->getId()][$item_id] == true) {
                $this->cache_read[$user->getId()][$item_id] = true;
            }
        }
        return $this->cache_write[$user->getId()][$item_id];
    }

    function userCanManage(&$user, $item_id) {
        if(!isset($this->cache_manage[$user->getId()][$item_id])) {
            $pm =& $this->_getPermissionManagerInstance();
            $this->cache_manage[$user->getId()][$item_id] = $user->isSuperUser() 
                || $this->userCanAdmin($user) //There are default perms for admin
                || $pm->userHasPermission($item_id, 'PLUGIN_DOCMAN_MANAGE', $user->getUgroups($this->groupId, array())) ;
            if($this->cache_manage[$user->getId()][$item_id] == true) {
                $this->cache_write[$user->getId()][$item_id] = true;
                $this->cache_read[$user->getId()][$item_id] = true;
            }
        }
        return $this->cache_manage[$user->getId()][$item_id];
    }

    function _isUserDocmanAdmin($user) {
        $has_permission = false;

        $permission_type = 'PLUGIN_DOCMAN_ADMIN';
        $object_id       = $this->groupId;

        // permissions set for this object.
        $res = permission_db_authorized_ugroups($permission_type, (int)$object_id);
        if (db_numrows($res) < 1 && $permission_type == 'PLUGIN_DOCMAN_ADMIN') {
            // No ugroup defined => no permissions set => get default permissions only for admin permission
            $res=permission_db_get_defaults($permission_type);
        } 
        while (!$has_permission && ($row = db_fetch_array($res))) {
            // should work even for anonymous users
            $has_permission = ugroup_user_is_member($user->getId(), $row['ugroup_id'], $this->groupId);
        }

        return $has_permission;
    }

    function userCanAdmin(&$user) {
        if(!isset($this->cache_admin[$user->getId()][$this->groupId])) {
            //Todo: see if this code already exists in permission_xxx
                        
            // Super-user has all rights...
            $has_permission = $user->isSuperUser();
            if (!$has_permission) {
                $has_permission = $this->_isUserDocmanAdmin($user);
            }
            $this->cache_admin[$user->getId()][$this->groupId] = $has_permission;
        }
        return $this->cache_admin[$user->getId()][$this->groupId];
    }

}

?>
