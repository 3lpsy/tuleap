<?php
/* 
 * Copyright (c) STMicroelectronics, 2006. All Rights Reserved.
 *
 * Originally written by Manuel Vacelet, 2006
 *
 * This file is a part of CodeX.
 *
 * CodeX is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * CodeX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CodeX; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */
define('DOCMAN_ITEM_TYPE_FOLDER',       1);
define('DOCMAN_ITEM_TYPE_FILE',         2);
define('DOCMAN_ITEM_TYPE_LINK',         3);
define('DOCMAN_ITEM_TYPE_EMBEDDEDFILE', 4);
define('DOCMAN_ITEM_TYPE_WIKI',         5);

require_once('Docman_ItemAction.class');

/**
 * Item is a transport object (aka container) used to share data between
 * Model/Controler and View layer of the application
 */
class Docman_Item {
    
    function Docman_Item($data = null) {
        $this->id          = null;
        $this->title       = null;
        $this->description = null;
        $this->createDate  = null;
        $this->updateDate  = null;
        $this->rank        = null;
        $this->parentId    = null;
        $this->groupId     = null;
        $this->ownerId     = null;
        $this->_actions = array();
        
        if ($data) {
            $this->initFromRow($data);
        }
        
        
    }
    
    var $_actions;
    function _addAction(&$action) {
        $this->_actions[] =& $action;
    }
    function getActions() {
        return $this->_actions;
    }
    //{{{
    var $id;
    function setId($id) {
        $this->id = (int) $id;
    }

    function getId() {
        return $this->id;
    }

    var $title;
    function setTitle($title) { 
        $this->title = $title; 
    }
    function getTitle() { 
        return $this->title; 
    }

    var $description;
    function setDescription($description) { 
        $this->description = $description;
    }

    function getDescription() {
        return $this->description;
    }

    var $createDate;
    function setCreateDate($date) {
        $this->createDate = (int) $date;
    }

    function getCreateDate() {
        return $this->createDate;
    }

    var $updateDate;
    function setUpdateDate($date) {
        $this->updateDate = (int) $date;
    }

    function getUpdateDate() {
        return $this->updateDate;
    }

    var $rank;
    function setRank($rank) {
        $this->rank = (int) $rank;
    }

    function getRank() {
        return $this->rank;
    }

    var $parentId;
    function setParentId($id) {
        $this->parentId = (int) $id;
    }

    function getParentId() {
        return $this->parentId;
    }

    var $groupId;
    function setGroupId($id) {
        $this->groupId = (int) $id;
    }

    function getGroupId() {
        return $this->groupId;
    }

    var $ownerId;
    function setOwnerId($id) {
        $this->ownerId = (int) $id;
    }

    function getOwnerId() {
        return $this->ownerId;
    }

    function initFromRow(&$row) {
        $this->setId($row['item_id']);
        $this->setTitle($row['title']);
        $this->setDescription($row['description']);
        $this->setCreateDate($row['create_date']);
        $this->setUpdateDate($row['update_date']);
        $this->setRank($row['rank']);
        $this->setParentId($row['parent_id']);
        $this->setGroupId($row['group_id']);
        $this->setOwnerId($row['user_id']);
        
        $this->_addAction(new Docman_ItemActionDetails($this));
    }
    //}}}
    
    function getClasses($params) {
        $li_classes = 'docman_item';
        if (isset($params) && isset($params['is_last']) && $params['is_last']) {
            $li_classes .= '_last';
        }
        return $li_classes;
    }
    
    function fetch($params = null) {
        
        $show_options = isset($params['show_options']) && $params['show_options'] == $this->getId();
        
        $icon  = $this->getIcon($params);
        
        $html  = '<div>'. $icon .'<span class="docman_item_title">';
        $action = isset($params['item_to_move']) ? false : $this->getActionWhenUserClickOnTitle($params);
        if ($action) {
            $html .= '<a href="'. $action .'">'. $this->getTitle() .'</a>';
        } else {
            $html .= $this->getTitle();
        }
        $html .= '</span>';
        //Show/hide options {{{
        if (!isset($params['item_to_move'])) {
            $user_actions = $this->getActions();
            if ($show_options) {
                $html .= '<span class="docman_item_options">';
                foreach($user_actions as $key => $nop) {
                    $html .= $user_actions[$key]->fetch($params);
                }
                $html .= '</span>';
            } else {
                $html .= '<script type="text/javascript">
                //<!--
                ';
                foreach($user_actions as $key => $nop) {
                    $html .= $user_actions[$key]->fetchAsJavascript($params);
                }
                $html .= '
                //-->
                </script>';
                $html .= '<noscript id="docman_item_show_options_'. $this->getId() .'" ><a class="docman_item_show_options" href="'. $params['default_url'] .'&amp;show_options=' . $this->getId() .'#item_'. $this->getId() .'" title="Show options">';
                $html .= '[Show options]';
                $html .= '</a></noscript>';
            }
        } else if ($params['item_to_move'] != $this->getId()) {
            $pm =& PermissionsManager::instance();
            if ($params['user']->isSuperUser() || $pm->userHasPermission($this->getId(), 'PLUGIN_DOCMAN_WRITE', $params['user']->getUgroups()) 
                || $pm->userHasPermission($this->getId(), 'PLUGIN_DOCMAN_ADMIN', $params['user']->getUgroups())
            ) {
                $html .= '<a href="'. $params['default_url'] .'&amp;action=move_here&amp;item_to_move='. $params['item_to_move'] .'&amp;id='. $this->getId() .'">&larr; move here</a>';
            }
        }
        //}}}
        $html .= '</div>';
        if (trim($this->getDescription()) != '') {
            $html .= '<div class="docman_item_description">'. $this->getDescription() .'</div>';
        }
        return $html;
    }
    function getActionWhenUserClickOnTitle($params) {
        return false;
    }
    function fetchForm($params) {
    }
    
    function getIcon($params = null) {
        $icon_src = $params['docman_icons']->getIconForItem($this, $params);
        return '<img src="'. $icon_src .'" class="docman_item_icon"/>';
    }
    
    function displayEditForm($params) {
        $html  = '<form action="'. $params['default_url'] .'" method="POST" enctype="multipart/form-data">';
        $fields = $this->getFields($params);
        $html .= '<table>';
        foreach($fields as $field) {
            $html .= '<tr style="vertical-align:top;"><td><label>'. $field['label'] .'</label></td><td>'. $field['field'] .'</td></tr>';
        }
        $html .= '<tr><td>';
        $html .= '<input type="hidden" name="item[id]" value="'. $this->getId() .'" />';
        $html .= '<input type="hidden" name="action" value="'. $params['action'] .'" />';
        $html .= '</td><td><input type="submit" value="'. $GLOBALS['Language']->getText('global','btn_submit') .'" /></td></tr>';
        $html .= '</table>';
        $html .= '</form>';
        echo $html;
    }
    function getFields() {
        return array_merge(
            array(
                array(
                    'label' => 'Title',
                    'field' => '<input type="text" name="item[title]" value="'. htmlentities($this->getTitle(), ENT_QUOTES) .'" />'
                ),
                array(
                    'label' => 'Description',
                    'field' => '<textarea name="item[description]">'. $this->getDescription() .'</textarea>'
                ),
                array(
                    'label' => 'Rank',
                    'field' => '<input type="text" name="item[rank]" value="'. htmlentities($this->getRank(), ENT_QUOTES) .'" size="3" maxlength="16" />'
                )
            ), 
            $this->getSpecificFields()
        );
    }
    function getSpecificFields() {
        return array();
    }
}
?>