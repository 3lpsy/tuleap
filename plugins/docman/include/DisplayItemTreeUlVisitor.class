<?php
/**
 * Copyright (c) STMicroelectronics, 2006. All Rights Reserved.
 *
 * Originally written by Manuel Vacelet, 2006
 *
 * This file is a part of CodeX.
 *
 * CodeX is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * CodeX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CodeX; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */

require_once('common/collection/Visitor.class');

class DisplayItemTreeUlVisitor extends Visitor {
    var $html;
    var $stripFirstNode;
    var $firstNodeStripped;
    var $docmanIcons;
    var $showOptions;
    var $defaultUrl;
    
    function DisplayItemTreeUlVisitor($params = null) {
        $this->html              = '';
        $this->stripFirstNode    = true;
        $this->firstNodeStripped = false;
        $this->params            = $params;
        if (!isset($this->params['default_url'])) {
            $this->params['default_url'] = null;
        }
    }

    function toHtml() {
        return $this->html;
    }
  
    function _canDisplayItem($item) {
        return true;
    }
    function _canDisplaySubItems($item) {
        return true;
    }
    
    function visit(&$itemNode, $params = null) {        
        $item =& $itemNode->getData();        

        /*$hasChildren = false;
        if($itemNode->hasChildren() || in_array($item->getId(), $this->parentList)) {
            $hasChildren = true;
        }*/

        $li_displayed = false;
        if($this->stripFirstNode && !$this->firstNodeStripped) {
            $this->firstNodeStripped=true;
            if (isset($this->params['display_description']) && $this->params['display_description']) {
                $this->html .= '<p>'. $item->getDescription() .'</p>';
            }
        }
        else {
            if($item !== null && $this->_canDisplayItem($item)) {
                $this->html .= '<li id="item_'.$item->getId().'" class="'. $item->getClasses($params) .'">';
                $this->html .= $item->fetch($this->params);
                $li_displayed = true;
            }
        }
              
        if($this->_canDisplaySubItems($item)) {
            if ($itemNode->hasChildren()) { 
                $this->html .= '<ul id="subitems_'.$item->getId().'" class="docman_items">'."\n";
    
                $ci =& $itemNode->getChildIterator();               
                
                while($ci->valid()) {
                    $child =& $ci->current();
                    
                    $child->accept($this, array('is_last' => $ci->isLast()));
                    
                    $ci->next();
                }
                
                $this->html .= '</ul>'."\n";
            } else {
                if (is_a($item, 'Docman_Folder') && !$item->getNbOfChildren()) {
                    $this->html .= '<ul id="subitems_'.$item->getId().'" class="docman_items">'."\n";
                    $this->html .= '</ul>'."\n";
                }
            }
        }

        if($li_displayed) {
            $this->html .= '</li>'."\n";
        }
        
    }
}

class MoveItemTreeUlVisitor extends DisplayItemTreeUlVisitor {
    function MoveItemTreeUlVisitor($params = null) {
        parent::DisplayItemTreeUlVisitor($params);
    }
    function _canDisplayItem($item) {
        return is_a($item, 'Docman_Folder') || $this->params['item_to_move'] == $item->getId();
    }
    function _canDisplaySubItems($item) {
        return $this->params['item_to_move'] != $item->getId();
    }
}
?>