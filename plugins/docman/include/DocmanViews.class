<?php
/**
 * Copyright (c) STMicroelectronics, 2006. All Rights Reserved.
 *
 * Originally written by Manuel Vacelet, 2006
 *
 * This file is a part of CodeX.
 *
 * CodeX is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * CodeX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CodeX; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */
require_once('common/mvc/Views.class');
require_once('common/include/HTTPRequest.class');

require_once('ItemBo.class');
require_once('DisplayItemTreeVisitor.class');
//require_once('DisplayItemTreeUlVisitor.class');
require_once('NodeToRootVisitor.class');

class DocmanViews extends Views {
    
    function DocmanViews(&$controler, $view=null) {
        $this->View($controler, $view);
        $GLOBALS['Language']->loadLanguageMsg('docman', 'docman');
    }
    
    function header() {
        $request =& HTTPRequest::instance();
        $htmlParams['title'] = $GLOBALS['Language']->getText('plugin_docman','title');

        $htmlParams['group']  = $request->get('group_id');
        $htmlParams['toptab'] = 'docman';

        $GLOBALS['HTML']->header($htmlParams);
        //echo '<h2>'.$htmlParams['title'].'</h2>';
    }
    function footer() {
        $GLOBALS['HTML']->footer(array());
    }
    
    function displayFolder() {
        $request =& HTTPRequest::instance();

        $itemBo = new ItemBo();
        $itemBo->groupId = $request->get('group_id');

        $itemTree =& $itemBo->getItemTree();

        //$displayItemTreeVisitor = new DisplayItemTreeUlVisitor();

        $displayItemTreeVisitor = new DisplayItemTreeVisitor();
        $displayItemTreeVisitor->setParentList($itemBo->getParentList());

        $itemTree->accept($displayItemTreeVisitor);
        
        print $displayItemTreeVisitor->toHtml();
    }
 
    function rawDisplay() {
        $request =& HTTPRequest::instance();

        $itemBo = new ItemBo();
        $itemBo->groupId = $request->get('group_id');

        $itemTree =& $itemBo->getItemTree();

        $parentNode =& $itemTree->searchNode($request->get('id'));
        $nodeToRootVisitor = new NodeToRootVisitor();
        $parentNode->accept($nodeToRootVisitor);
        $path = $nodeToRootVisitor->getPath();

        $displayItemTreeVisitor = new DisplayItemTreeVisitor();
        $displayItemTreeVisitor->setParentList($itemBo->getParentList());
        $displayItemTreeVisitor->setPath($path, true);
        $itemTree->accept($displayItemTreeVisitor);
        
        print $displayItemTreeVisitor->toHtml();
    }

    function display($view='') {
        if($view != 'rawDisplay')
            $this->header();

        if(!empty($view)) $this->$view();

        if($view != 'rawDisplay')
            $this->footer();
    }

}


?>