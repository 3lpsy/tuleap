<?php
/**
 * Copyright (c) STMicroelectronics, 2006. All Rights Reserved.
 *
 * Originally written by Manuel Vacelet, 2006
 *
 * This file is a part of CodeX.
 *
 * CodeX is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * CodeX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CodeX; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */
require_once('common/mvc/Views.class');
require_once('common/include/HTTPRequest.class');
require_once('ItemBo.class');

class DocmanViews extends Views {
    var $rawDisplay;

    function DocmanViews(&$controler, $view=null) {
        $this->View($controler, $view);
        $GLOBALS['Language']->loadLanguageMsg('docman', 'docman');
        $this->rawDisplay = array('ulsubfolder', 'rawDisplay');
    }
    
    /**
     * Dispatch views
     *
     * @access public
     */
    function display($view='') {
        if(!in_array($view, $this->rawDisplay))
            $this->_header();

        if(!empty($view)) $this->$view();

        if(!in_array($view, $this->rawDisplay))
            $this->_footer();
    }

    /**
     * Display service header
     *
     * @access private
     */
    function _header() {
        $request =& HTTPRequest::instance();
        $htmlParams['title'] = $GLOBALS['Language']->getText('plugin_docman','title');

        $htmlParams['group']  = $request->get('group_id');
        $htmlParams['toptab'] = 'docman';

        $GLOBALS['HTML']->header($htmlParams);
        
        $this->_toolBar();

    }

    /**
     * Display service footer
     *
     * @access private
     */
    function _footer() {
        $GLOBALS['HTML']->footer(array());
    }
    
    /**
     * Display service toolbar
     *
     * @access private
     */
    function _toolBar() {
        echo '<a href="'.$this->_controler->getDefaultUrl().'">Documents (Img)</a>';
        echo ' | <a href="'.$this->_controler->getDefaultUrl().'&view=uldisplayFolder">Documents (UL/LI)</a>';
        $user =& $this->_controler->getUser();
        if($user->isMember($this->_controler->getGroupId(), 'D2')) {
            echo ' | <a href="'.$this->_controler->getAdminUrl().'">Admin</a>';
        }
        echo "\n";
    }

    //
    //
    // Definition of views
    // 
    //


    /**
     * Ouput image based view of folders.
     *
     * @access public
     */
    function displayFolder() {
        require_once('DisplayItemTreeVisitor.class');        

        $itemBo = new ItemBo($this->_controler->request->get('group_id'));
        $itemTree =& $itemBo->getItemTree();

        $displayItemTreeVisitor = new DisplayItemTreeVisitor();
        $displayItemTreeVisitor->setParentList($itemBo->getParentList());

        $itemTree->accept($displayItemTreeVisitor);      
        print $displayItemTreeVisitor->toHtml();
    }

    /**
     * Ouput image based view of a subfolder.
     *
     * This method is related to displayFolder and is called via Ajax to
     * render only a subtree of the folder view. The main difficulty of this
     * view it to build the good list of images and, to be able to perform
     * that, we have to know subtree ancestors.
     *
     * @see displayFolder
     * @access public
     */
    function rawDisplay() {
        require_once('DisplayItemTreeVisitor.class');
        require_once('NodeToRootVisitor.class');

        $itemBo = new ItemBo($this->_controler->request->get('group_id'));
        $itemTree =& $itemBo->getItemTree();

        // Subtree ancestors
        $parentNode =& $itemTree->searchNode($request->get('id'));
        $nodeToRootVisitor = new NodeToRootVisitor();
        $parentNode->accept($nodeToRootVisitor);
        $path = $nodeToRootVisitor->getPath();

        $displayItemTreeVisitor = new DisplayItemTreeVisitor();
        $displayItemTreeVisitor->setParentList($itemBo->getParentList());
        $displayItemTreeVisitor->setPath($path, true);
        $itemTree->accept($displayItemTreeVisitor);
        
        print $displayItemTreeVisitor->toHtml();
    }
    
    /**
     * Ouput ul/li view of folders.
     *
     * @access public
     */
    function uldisplayFolder() {
        require_once('DisplayItemTreeUlVisitor.class');
    
        $itemBo = new ItemBo($this->_controler->request->get('group_id'));
        $itemTree =& $itemBo->getItemTree();

        $displayItemTreeVisitor = new DisplayItemTreeUlVisitor();       
        $itemTree->accept($displayItemTreeVisitor);
        
        print '<div class="lidir">'.$displayItemTreeVisitor->toHtml().'</div><script>initEvents();</script>';       
    }

    /**
     * Ouput ul/li view of subfolders.
     *
     * This method is related to uldisplayFolderand is called via Ajax to
     * render only a subtree of the folder view.
     *
     * @see uldisplayFolder
     * @access public
     */
    function ulsubfolder() {
        require_once('DisplayItemTreeUlVisitor.class');
        
        $itemBo = new ItemBo($this->_controler->request->get('group_id'));        
        $itemTree =& $itemBo->getItemSubTree($this->_controler->request->get('id'));

        $displayItemTreeVisitor = new DisplayItemTreeUlVisitor();
        $itemTree->accept($displayItemTreeVisitor);

        print $displayItemTreeVisitor->toHtml();        
    }
}


?>