<?php
/**
 * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved
 *
 * This file is a part of Codendi.
 *
 * Codendi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Codendi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Codendi; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * 
 */

require_once('common/backend/Backend.class.php');
require_once('common/dao/MailingListDao.class.php');

class BackendAliases extends Backend {

    protected $need_update=false;   
    protected $_userdao = null;
    protected $_mailinglistdao = null;


    /**
     * Hold an instance of the class
     */
    protected static $_instance;
    
    /**
     * Backends are singletons
     */
    public static function instance() {
        if (!isset(self::$_instance)) {
            $c = __CLASS__;
            self::$_instance = new $c;
        }
        return self::$_instance;
    }

    /**
     * @return UserDao
     */
    protected function _getUserDao() {
        if (!$this->_userdao) {
          $this->_userdao = new UserDao(CodendiDataAccess::instance());
        }
        return $this->_userdao;
    }

    /**
     * @return MailingListDao
     */
    protected function _getMailingListDao() {
        if (!$this->_mailinglistdao) {
          $this->_mailinglistdao = new MailingListDao(CodendiDataAccess::instance());
        }
        return $this->_mailinglistdao;
    }

    function setNeedUpdateMailAliases() {
        $this->need_update=true;
    }

    function aliasesNeedUpdate() {
        return $this->need_update;
    }


    /**
     * Write System email aliases: 
     * - generic aliases like codendi-admin
     * - mailing list aliases for mailman
     * - user aliases for addresses like user@codendi.server.name
     */
    public function update() {
        $alias_file = $GLOBALS['alias_file'];
        $alias_file_new = $alias_file.".new";
        $alias_file_old = $alias_file.".old";

        if (!$fp = fopen($alias_file_new, 'w')) {
            $this->log("Can't open file for writing: $alias_file_new");
            return false;
        }

        if ((! $this->writeGenericAliases($fp))
            || (!$this->writeListAliases($fp))
            || (!$this->writeUserAliases($fp))) {
            $this->log("Can't write aliases to $alias_file_new");
            return false;
        }
        fclose($fp);

        // Replace current file by new one
        if (!$this->installNewFileVersion($alias_file_new,$alias_file,$alias_file_old,true)) return false;

        // Run newaliases
        return (system("/usr/bin/newaliases") !== false);
    }


    /** Generic part: should be written first */
    protected function writeGenericAliases($fp) {
        fwrite($fp, "# This file is autogenerated - Do not edit\n\n");
        fwrite($fp, "#   - The Codendi wide aliases (specific to Codendi) resides in this file\n");
        fwrite($fp, "#   - All system wide aliases remains in /etc/aliases\n\n");
        fwrite($fp, "# Codendi wide aliases\n\n");
        fwrite($fp, "codendi-contact:         codendi-admin\n\n");
        fwrite($fp, "codex-contact:           codendi-admin\n");// deprecated user name
        fwrite($fp, "codex-admin:             codendi-admin\n");// deprecated user name
        fwrite($fp, "sourceforge:             codendi-admin\n");// deprecated user name
        fwrite($fp, $GLOBALS['sys_http_user'].":               codendi-admin\n");
        fwrite($fp, "noreply:                 \"|".$GLOBALS['codendi_bin_prefix']."/gotohell\"\n");
        fwrite($fp, "undisclosed-recipients:  \"|".$GLOBALS['codendi_bin_prefix']."/gotohell\"\n"); // for phpWiki notifications...
        fwrite($fp, "webmaster:               codendi-admin\n");
        return fwrite($fp, "\n\n");
    }

    /** User aliases for addresses like user@codendi.server.name */
    protected function writeUserAliases($fp) {
        fwrite($fp, "### Begin User Aliases ###\n\n");

        $allowed_statuses=array('A', 'R'); // Active and restricted users
        $dar = $this->_getUserDao()->searchByStatus($allowed_statuses);
        foreach($dar as $row) {
            if (($row['email'])&&($row['user_name'])) {
                fwrite($fp, sprintf("%-50s%-10s",$row['user_name'].":",$row['email']."\n"));
            }
        }
        return fwrite($fp, "\n\n");
    }



    /** Mailing list aliases for mailman */
    protected function writeListAliases($fp) {
        // Determine the name of the mailman wrapper
	$mm_wrapper = $GLOBALS['mailman_wrapper'];

        fwrite($fp, "### Begin Mailing List Aliases ###\n\n");
        $dar = $this->_getMailingListDao()->searchAllActiveML();
        foreach($dar as $row) {
            if ($row['list_name']) {
                // Convert to lower case
                $list_name=strtolower($row['list_name']);
                // Remove blank chars
                $list_name = str_replace(" ", "", $list_name);
                // Mailman 2.1 aliases
                fwrite($fp, sprintf("%-50s%-10s","$list_name:",             "\"|$mm_wrapper post $list_name\"\n"));
                fwrite($fp, sprintf("%-50s%-10s","$list_name-admin:",       "\"|$mm_wrapper admin $list_name\"\n"));
                fwrite($fp, sprintf("%-50s%-10s","$list_name-bounces:",     "\"|$mm_wrapper bounces $list_name\"\n"));
                fwrite($fp, sprintf("%-50s%-10s","$list_name-confirm:",     "\"|$mm_wrapper confirm $list_name\"\n"));
                fwrite($fp, sprintf("%-50s%-10s","$list_name-join:",        "\"|$mm_wrapper join $list_name\"\n"));
                fwrite($fp, sprintf("%-50s%-10s","$list_name-leave:",       "\"|$mm_wrapper leave $list_name\"\n"));
                fwrite($fp, sprintf("%-50s%-10s","$list_name-owner:",       "\"|$mm_wrapper owner $list_name\"\n"));
                fwrite($fp, sprintf("%-50s%-10s","$list_name-request:",     "\"|$mm_wrapper request $list_name\"\n"));
                fwrite($fp, sprintf("%-50s%-10s","$list_name-subscribe:",   "\"|$mm_wrapper subscribe $list_name\"\n"));
                fwrite($fp, sprintf("%-50s%-10s","$list_name-unsubscribe:", "\"|$mm_wrapper unsubscribe $list_name\"\n"));
            }
        }
        return fwrite($fp, "\n\n");
    }

}

?>
