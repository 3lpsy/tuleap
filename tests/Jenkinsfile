#!/usr/bin/env groovy

def npm_credentials = [usernamePassword(credentialsId: 'nexus.enalean.com_readonly', passwordVariable: 'NPM_PASSWORD', usernameVariable: 'NPM_USER')];

def runRESTTests(String version) {
    sh """
    mkdir -p working_copy/api-$version
    cp -R sources/* working_copy/api-$version/
    mkdir -p results/api-$version
    docker run --rm -v \$WORKSPACE/working_copy/api-$version/:/usr/share/tuleap --mount type=tmpfs,destination=/tmp -v \$WORKSPACE/results/api-$version:/output \$DOCKER_REGISTRY/enalean/tuleap-test-rest:$version
    """
    junit "results/api-$version/rest_tests.xml"
}

def runKarmaTests(String name, String path) {
    sh """
    cid="\$(docker create -v \$WORKSPACE/sources:/sources:ro --security-opt seccomp=\$WORKSPACE/sources/tests/karma/seccomp_chrome.json \$DOCKER_REGISTRY/enalean/tuleap-test-karma:latest --path $path)"
    docker start --attach "\$cid" || true
    mkdir -p 'results/karma'
    docker cp "\$cid":/output/test-results.xml results/karma/test-$name-results.xml
    docker rm -fv "\$cid"
    """
    junit "results/karma/test-$name-results.xml"
}

pipeline {
    agent {
        label 'docker'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare') {
            steps {
                dir ('results') {
                    deleteDir()
                }
                withCredentials(npm_credentials) {
                    sh 'docker run --rm -e NPM_REGISTRY="$NPM_REGISTRY" -e NPM_USER="$NPM_USER" -e NPM_PASSWORD="$NPM_PASSWORD" -e NPM_EMAIL="$NPM_EMAIL" -v "$WORKSPACE/sources/":/tuleap -v "$WORKSPACE/sources/":/output --tmpfs /tmp/tuleap_build:rw,noexec,nosuid --read-only $DOCKER_REGISTRY/tuleap-generated-files-builder dev'
                }
            }
        }

        stage('Check lockfiles') {
            steps {
                dir ('sources') {
                    sh """
                    #!/bin/bash
                    set +ex
                    modified_lockfiles="\$(git status --porcelain | grep -E '(package-lock.json|composer.lock)' || true)"
                    if [ -z "\$modified_lockfiles" ]; then
                        echo "All lockfiles are present and up to date!"
                    else
                        echo 'Your lockfiles does not seem to be present or up to date!'
                        echo "\$modified_lockfiles"
                        exit 1
                    fi
                    """
                }
            }
            post {
                failure {
                    dir ('sources') {
                        sh 'git diff'
                    }
                }
            }
        }

        stage('Tests') {
            steps {
                parallel 'UT SimpleTest PHP 5.6': {
                    sh """
                    cid="\$(docker create -v \$WORKSPACE/sources:/tuleap:ro \$DOCKER_REGISTRY/enalean/tuleap-simpletest:c6-php56)"
                    docker start --attach "\$cid" || true
                    mkdir -p 'results/ut-simpletest-php-56'
                    docker cp "\$cid":/output/unit_tests_report.xml results/ut-simpletest-php-56/
                    docker rm -fv "\$cid"
                    """
                    junit 'results/ut-simpletest-php-56/unit_tests_report.xml'
                },
                'UT PHPUnit PHP 5.6': {
                    sh "make -C $WORKSPACE/sources phpunit-ci-56"
                    junit 'results/ut-phpunit-php-56/phpunit_tests_results.xml'
                },
                'UT PHPUnit PHP 7.0': {
                    sh "make -C $WORKSPACE/sources phpunit-ci-70"
                    junit 'results/ut-phpunit-php-70/phpunit_tests_results.xml'
                },
                'Karma AgileDashboard PlanningV2': { runKarmaTests('planning', 'plugins/agiledashboard/www/js/planning-v2') },
                'Karma AgileDashboard Kanban': { runKarmaTests('kanban', 'plugins/agiledashboard/www/js/kanban') },
                'Karma Tracker': { runKarmaTests('tracker', 'plugins/tracker/www/scripts') },
                'Karma FRS plugin': { runKarmaTests('frs', 'plugins/frs/www/js/angular') },
                'Karma Label plugin': { runKarmaTests('label', 'plugins/label/www/scripts') },
                'Karma PullRequest plugin': { runKarmaTests('pullrequest', 'plugins/pullrequest/www/js/angular') },
                'Karma CrossTracker plugin': { runKarmaTests('crosstracker', 'plugins/crosstracker/www/scripts') },
                'REST CentOS 6 PHP 5.6 Apache 2.4 MySQL 5.6': { runRESTTests('c6-php56-httpd24-mysql56') },
                'SOAP': {
                    sh """
                    mkdir -p working_copy/api-soap
                    cp -R sources/* working_copy/api-soap/
                    cid="\$(docker create -v \$WORKSPACE/working_copy/api-soap:/usr/share/tuleap \$DOCKER_REGISTRY/enalean/tuleap-test-soap:3)"
                    docker start --attach "\$cid" || true
                    mkdir -p 'results/api-soap'
                    docker cp "\$cid":/output/soap_tests.xml results/api-soap/ || true
                    docker rm -fv "\$cid"
                    """
                    junit 'results/api-soap/soap_tests.xml'
                },
                'Whole platform integration': {
                    dir ('sources') {
                        sh """
                        tests/selenium/wrap.sh "$WORKSPACE/results/distlp-integration"
                        """
                    }
                    junit 'results/distlp-integration/Tuleap-Tests-*.xml'
                },
                'Build and run CentOS 6': {
                    dir ('sources') {
                        sh 'OS=centos6 tests/build_and_run/test.sh'
                    }
                },
                'Build CentOS 7': {
                    dir ('sources') {
                        sh 'OS=centos7 tests/build_and_run/test.sh'
                    }
                },
                failFast: false
            }
            post {
                always {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'results/'
                    sh 'rm -rf working_copy || echo "Cleanup of the working copies has failed, please stop writing files as root"'
                }
            }
        }
    }
}
