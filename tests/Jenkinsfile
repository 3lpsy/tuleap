#!/usr/bin/env groovy

def npm_credentials = [usernamePassword(credentialsId: 'nexus.enalean.com_readonly', passwordVariable: 'NPM_PASSWORD', usernameVariable: 'NPM_USER')];

def runRESTTests(String version) {
    sh """
    mkdir -p working_copy/api-$version
    cp -R sources/* working_copy/api-$version/
    cp working_copy/api-$version/tests/rest/bin/composer.json working_copy/api-$version/composer.json
    mkdir -p results/api-$version
    docker run --rm -v \$WORKSPACE/working_copy/api-$version/:/usr/share/tuleap -v \$WORKSPACE/results/api-$version:/output \$DOCKER_REGISTRY/enalean/tuleap-test-rest:$version
    """
    junit "results/api-$version/rest_tests.xml"
}

pipeline {
    agent {
        label 'docker'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare') {
            steps {
                dir ('results') {
                    deleteDir()
                }
                withCredentials(npm_credentials) {
                    sh 'docker run --rm -e NPM_REGISTRY="$NPM_REGISTRY" -e NPM_USER="$NPM_USER" -e NPM_PASSWORD="$NPM_PASSWORD" -e NPM_EMAIL="$NPM_EMAIL" -v $WORKSPACE/sources/:/tuleap --tmpfs /tmp/tuleap_build:rw,noexec,nosuid --read-only $DOCKER_REGISTRY/tuleap-generated-files-builder'
                }
            }
        }

        stage('Check lockfiles') {
            steps {
                dir ('sources') {
                    sh """
                    #!/bin/bash
                    set +ex
                    modified_lockfiles="\$(git status --porcelain | grep -E '(package-lock.json|composer.lock)' || true)"
                    if [ -z "\$modified_lockfiles" ]; then
                        echo "All lockfiles are present and up to date!"
                    else
                        echo 'Your lockfiles does not seem to be present or up to date!'
                        echo "\$modified_lockfiles"
                        exit 1
                    fi
                    """
                }
            }
            post {
                failure {
                    dir ('sources') {
                        sh 'git diff'
                    }
                }
            }
        }

        stage('Tests') {
            steps {
                parallel 'UT SimpleTest PHP 5.3': {
                    sh """
                    cid="\$(docker create -v \$WORKSPACE/sources:/tuleap:ro \$DOCKER_REGISTRY/enalean/tuleap-simpletest:c6-php53)"
                    docker start --attach "\$cid" || true
                    mkdir -p 'results/ut-simpletest-php-53'
                    docker cp "\$cid":/output/unit_tests_report.xml results/ut-simpletest-php-53/
                    docker rm -fv "\$cid"
                    """
                    junit 'results/ut-simpletest-php-53/unit_tests_report.xml'
                },
                'UT PHPUnit PHP 5.3': {
                    sh """
                    cid="\$(docker create -v \$WORKSPACE/sources:/tuleap:ro \$DOCKER_REGISTRY/enalean/tuleap-test-phpunit-c6-php53 --ci)"
                    docker start --attach "\$cid" || true
                    mkdir -p 'results/ut-phpunit-php-53'
                    docker cp "\$cid":/output/phpunit_tests.xml results/ut-phpunit-php-53/
                    docker rm -fv "\$cid"
                    """
                    junit 'results/ut-phpunit-php-53/phpunit_tests.xml'
                },
                'UT SimpleTest PHP 5.6': {
                    sh """
                    cid="\$(docker create -v \$WORKSPACE/sources:/tuleap:ro \$DOCKER_REGISTRY/enalean/tuleap-simpletest:c6-php56)"
                    docker start --attach "\$cid" || true
                    mkdir -p 'results/ut-simpletest-php-56'
                    docker cp "\$cid":/output/unit_tests_report.xml results/ut-simpletest-php-56/
                    docker rm -fv "\$cid"
                    """
                    junit 'results/ut-simpletest-php-56/unit_tests_report.xml'
                },
                'Karma AgileDashboard PlanningV2': {
                    withCredentials(npm_credentials) {
                        sh """
                        cid="\$(docker create -v \$WORKSPACE/sources:/tuleap:ro -e NPM_REGISTRY="\$NPM_REGISTRY" -e NPM_USER="\$NPM_USER" -e NPM_PASSWORD="\$NPM_PASSWORD" -e NPM_EMAIL="\$NPM_EMAIL" \$DOCKER_REGISTRY/enalean/tuleap-test-karma --path plugins/agiledashboard/www/js/planning-v2 --output-dir /output)"
                        docker start --attach "\$cid" || true
                        mkdir -p 'results/karma'
                        docker cp "\$cid":/output/test-results.xml results/karma/test-planning-results.xml
                        docker rm -fv "\$cid"
                        """
                        junit 'results/karma/test-planning-results.xml'
                    }
                },
                'Karma AgileDashboard Kanban': {
                    withCredentials(npm_credentials) {
                        sh """
                        cid="\$(docker create -v \$WORKSPACE/sources:/tuleap:ro -e NPM_REGISTRY="\$NPM_REGISTRY" -e NPM_USER="\$NPM_USER" -e NPM_PASSWORD="\$NPM_PASSWORD" -e NPM_EMAIL="\$NPM_EMAIL" \$DOCKER_REGISTRY/enalean/tuleap-test-karma --path plugins/agiledashboard/www/js/kanban --output-dir /output)"
                        docker start --attach "\$cid" || true
                        mkdir -p 'results/karma'
                        docker cp "\$cid":/output/test-results.xml results/karma/test-kanban-results.xml
                        docker rm -fv "\$cid"
                        """
                        junit 'results/karma/test-kanban-results.xml'
                    }
                },
                'Karma FRS plugin': {
                    withCredentials(npm_credentials) {
                        sh """
                        cid="\$(docker create -v \$WORKSPACE/sources:/tuleap:ro -e NPM_REGISTRY="\$NPM_REGISTRY" -e NPM_USER="\$NPM_USER" -e NPM_PASSWORD="\$NPM_PASSWORD" -e NPM_EMAIL="\$NPM_EMAIL" \$DOCKER_REGISTRY/enalean/tuleap-test-karma --path plugins/frs/www/js/angular --output-dir /output)"
                        docker start --attach "\$cid" || true
                        mkdir -p 'results/karma'
                        docker cp "\$cid":/output/test-results.xml results/karma/test-frs-results.xml
                        docker rm -fv "\$cid"
                        """
                        junit 'results/karma/test-frs-results.xml'
                    }
                },
                'Karma CrossTracker widget': {
                    withCredentials(npm_credentials) {
                        sh """
                        cid="\$(docker create -v \$WORKSPACE/sources:/tuleap:ro -e NPM_REGISTRY="\$NPM_REGISTRY" -e NPM_USER="\$NPM_USER" -e NPM_PASSWORD="\$NPM_PASSWORD" -e NPM_EMAIL="\$NPM_EMAIL" \$DOCKER_REGISTRY/enalean/tuleap-test-karma --path plugins/tracker/www/scripts/cross-tracker --output-dir /output)"
                        docker start --attach "\$cid" || true
                        mkdir -p 'results/karma'
                        docker cp "\$cid":/output/test-results.xml results/karma/test-cross-tracker-results.xml
                        docker rm -fv "\$cid"
                        """
                        junit 'results/karma/test-cross-tracker-results.xml'
                    }
                },
                'REST CentOS 6 PHP 5.3 Apache 2.2 MySQL 5.1': { runRESTTests('c6-php53-httpd22-mysql51') },
                'REST CentOS 6 PHP 5.6 Apache 2.4 MySQL 5.6': { runRESTTests('c6-php56-httpd24-mysql56') },
                'SOAP': {
                    sh """
                    mkdir -p working_copy/api-soap
                    cp -R sources/* working_copy/api-soap/
                    cid="\$(docker create -v \$WORKSPACE/working_copy/api-soap:/tuleap \$DOCKER_REGISTRY/enalean/tuleap-test-soap)"
                    docker start --attach "\$cid" || true
                    mkdir -p 'results/api-soap'
                    docker cp "\$cid":/output/soap_tests.xml results/api-soap/ || true
                    docker rm -fv "\$cid"
                    """
                    junit 'results/api-soap/soap_tests.xml'
                },
                failFast: false
            }
            post {
                always {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'results/'
                    sh 'rm -rf working_copy || echo "Cleanup of the working copies has failed, please stop writing files as root"'
                }
            }
        }
    }
}
