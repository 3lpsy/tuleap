<!--
//
// CodeX: Breaking Down the Barriers to Source Code Sharing inside Xerox
// Copyright (c) Xerox Corporation, CodeX / CodeX Team, 2001-2002. All Rights Reserved
// http://codex.xerox.com
//
// $Id$
//
// Originally written by Laurent Julliard and Stephane Bouhet 2002, CodeX Team, Xerox
//
-->
  <chapter id="VersionControlWithCVS">
    <title>Version Control with CVS</title>

    <para>This chapter is not a CVS Tutorial. It focuses on the integration of
    CVS with CodeX and how to use it in an optimal way in this context. If you
    are not familiar with CVS version control system look at the CVS
    references on page <xref linkend="References" /></para>

    <para>It is important to note that version control is just a part of the
    overall configuration management activity. Therefore, CVS alone does not
    constitute a complete configuration management solution for your project.
    Depending on the maturity of a project, the project may have specific
    policies regarding use of the CVS baseline or the integration of bug
    fixes, etc. Projects should make sure that project members know and follow
    these policies. For example, a project may wish both to commit changes
    daily to avoid loss of work, and to also insure that the baseline is
    always unit tested code. Since the end of the day may arrive before the
    code or unit tests are complete, a single baseline cannot accommodate both
    uses, so the project may opt to use CVS branches. Don&#39;t worry if you
    do not initially know enough to write the final policy for your project -
    this always tends to evolve as the project matures - but do communicate
    regularly with the project members and improve your configuration
    management plan on a regular basis.</para>

    <section id="CVS:ConcurrentVersionControl">
      <title>CVS: Concurrent Version Control</title>

      <para>CVS stands for Concurrent Versions System. It allows a team of
      multiple developers to concurrently manage their own version of the same
      source code and gracefully merge the changes brought to the software by
      the various team players. CVS can help you track the changes in the
      history of your project.</para>

      <para>No good software project should be started without making a
      decision on which version control tool is going to be used. CVS is only
      one of the possible choices <footnote><para>There are many version
      control software available on the market whether Free Software (SCCS,
      RCS, PKS...) or Commercial (SourceSafe, ClearCase, TeamWare...)</para></footnote>.
      CodeX made it the default version control tool for several reasons:</para>

      <itemizedlist mark="bullet"
                    spacing="compact">
        <listitem>
          <para>It has an elegant and efficient client/server architecture
          that makes it usable from anywhere on the Xerox Intranet.</para>
        </listitem>

        <listitem>
          <para>It runs on almost every hardware platforms and Operating
          Systems available on the market today (Linux, Unix, Windows,
          MacOS...).</para>
        </listitem>

        <listitem>
          <para>It is a bullet proof version control system that is being used
          by literally hundreds of thousands of software projects, whether
          Open Source or commercial throughout the world.</para>
        </listitem>

        <listitem>
          <para>It can be used in a command-line mode or through one of the
          many graphical user interface front-ends.</para>
        </listitem>

        <listitem>
          <para>It is very good at minimizing disk storage space on the server
          side and network bandwidth consumption between the client and the
          server. Working with CVS over a modem connection is perfectly
          feasible.</para>
        </listitem>

        <listitem>
          <para>Out of the box it can support small to mid-size projects well,
          and can be configured and extended to support most any size project.</para>
        </listitem>

        <listitem>
          <para>And last but not least, it is a fully Open Source software
          distributed under the GNU GPL License.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="CVSIntegrationinCodeX">
      <title>CVS Integration in CodeX</title>

      <section id="TheCVSRepository">
        <title>The CVS Repository</title>

        <para>Whenever a new project is hosted on CodeX, a new CVS repository
        is automatically created and properly initialized. Each project has
        its own CVS repository as opposed to what happens in most CVS servers,
        where all projects share the same repository. Having its own
        repository has a certain number of advantages: Your CVS logs, history
        files, and all administrative files are unique to your repository.
        This allows you to fully customize the behavior of your CVS
        repository.</para>

        <para>In addition the CodeX server applies a direct mapping at the
        Operating System level between a project name and a unique Unix group
        name as well as between project members and Unix users. In other words
        each CVS repository belongs to the Unix group specially created for
        this project and all project members are also member of this Unix
        group. This configuration gives you optimal flexibility if you want to
        tune access control to your project repository.</para>

        <para><note>All CVS repositories are available under the
        <literal>/cvsroot/projectname directory</literal>
        on the CodeX server. All interactions with the CVS repository take
        place from a CVS client through the cvs program. If need be you can
        also use your shell account (see <xref linkend="ShellAccount" />) to
        interact with the CVS repository directly but you should never do that
        unless you know exactly what you are doing.</note></para>
      </section>

      <section id="CVSWebInterface">
        <title>The CVS Web Interface</title>

        <para>In order to interact with the CVS repository of any CodeX-hosted
        project, you normally need to have CVS installed on your machine.
        However CodeX also offers a built-in Web interface to the CVS
        repository which allows you to browse the source code, download it,
        view either the latest version or any previous version based on date
        or compare two revisions of the same file.</para>

        <para>The CVS Web interface can be accessed via the &#34;CVS&#34; item
        in the Project Main Menu or via the CVS service listed in the Public
        Area (see <xref linkend="FigureASampleProjectSummaryPage" />). In
        either case click on the &#34;Browse CVS repository&#34; link to
        access the top directory of the project CVS repository. From there you
        can navigate through the source code and learn more about the overall
        source code structure of a project.</para>

        <figure id="FigureASampleCVSWebSession">
          <title>A sample CVS Web session</title>

          <mediaobject>
            <imageobject>
              <imagedata format="PNG"
                         fileref="../../slides/en_US/CVS_Web_Session.png" width="12cm" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section id="CommandLineInterface">
        <title>Command Line Interface</title>

        <para>CVS originates from the Unix world and therefore all the CVS
        functions can be controlled from a command line interface. Even though
        CVS has multiple command line options, most commands that you normally
        use have one or two command-line options and are very easy to
        remember. Refer to the R section for links to more information about
        how to use CVS.</para>
      </section>

      <section id="GraphicalFront-ends">
        <title>Graphical Front-ends</title>

        <para>Many CVS graphical front-ends can be used on your client
        workstation. There are clients for all platforms: Windows, Linux, Unix
        and Mac. WinCVS seems to be one of the most well known and well known
        for Windows platform. On Linux, gCVS and Cervisia are the most
        popular.</para>

        <para>There is also a 100% Java client called jCVS that runs on any
        machine supporting JDK (or JRE). And finally, for those of you who use
        Emacs or Xemacs as an editor you&#39;ll probably want to use the
        excellent pcl-cvs package, which provides full CVS integration on
        these editors. Many commercial text editors also offer tight
        integration with CVS.</para>
      </section>
    </section>

    <section id="ATypicalCVSLifeCycle">
      <title>A Typical CVS Life Cycle</title>

      <para>Again the intent of this section is not to give formal CVS
      training but rather to explain what are the steps a project team
      typically goes through to efficiently use CVS and, more generally, all
      the CodeX tools involved in a Software release process. It also deals
      with the problem of contributing source code when you are not part of a
      project team. In this section all examples are given in the form of CVS
      command lines but transposing them to graphical front-ends should not be
      a problem.</para>

      <figure id="FigureATypicalSoftwareDevelopmentLifeCycleOnCodeX">
        <title>A Typical Software Development Life Cycle on CodeX</title>

        <mediaobject>
          <imageobject>
            <imagedata format="PNG"
                       fileref="../../slides/en_US/CVS_Life_Cycle.png" width="14cm" />
          </imageobject>
        </mediaobject>
      </figure>

      <section id="Loggingin">
        <title>Logging In</title>

        <para><emphasis>Audience: all CodeX users</emphasis></para>

        <para>The first step when dealing with a CodeX-hosted CVS repository
        is to authenticate yourself with the CVS server. In CodeX, anonymous
        users cannot access the source code of any project whether be it
        through the CVS repository or through the File Release mechanism. So
        make sure you have created your own account on CodeX before
        interacting with a CVS repository.</para>

        <para>Assuming that you have your CodeX login/password ok, you can now
        use them to authenticate yourself with the CVS repository. To connect
        to the CVS repository of a given project type the following command
        (in one line):</para>

        <programlisting format="linespecific" linenumbering="unnumbered" width="80">
cvs -d:pserver:loginname@cvs.projectname.codex.xerox.com:/cvsroot/projectname
login
        </programlisting>

        <para>Where:</para>

        <itemizedlist mark="bullet"
                      spacing="compact">
          <listitem>
            <para>The -d argument is called the CVS root path. This path is a
            sort of URL to locate your CVS repository on the net. CVS
            graphical front-ends will also ask you for this root path.</para>
          </listitem>

          <listitem>
            <para><literal><emphasis>projectname</emphasis></literal> is the
            project short name</para>
          </listitem>

          <listitem>
            <para><literal><emphasis>loginname</emphasis></literal> is your
            CodeX login (all lowercase)</para>
          </listitem>
        </itemizedlist>

        <para>CVS keeps track of the password associated with a given CVS root
        path. So as long as you do not logout there is no need to authenticate
        yourself in subsequent working sessions. If you don&#39;t want to
        leave your CVS connection &#34;open&#34; when you leave your office,
        use the &#34;<literal>cvs logout</literal>&#34; command.</para>
      </section>

      <section id="Importingexistingsourcecode">
        <title>Importing existing source code</title>

        <para><emphasis>Audience: project members</emphasis></para>

        <para>As the happy administrator of a new CodeX project, the first
        thing to do is to populate your freshly brewed CVS repository with
        your project source code. To do so, first create a new directory
        topdirectory on your workstation and place your source code under this
        top directory (keep the exact same directory structure you are used to
        under topdirectory). Then type the following command (in one line):</para>

        <programlisting format="linespecific" linenumbering="unnumbered" width="80">
cvs -d:pserver:loginname@cvs.projectname.codex.xerox.com:/cvsroot/projectname
import topdirectory vendor_tag start
        </programlisting>

        <para>Where:</para>

        <itemizedlist mark="bullet"
                      spacing="compact">
          <listitem>
            <para>The -d argument is called the CVS root path. This path is a
            sort of URL to locate your CVS repository on the net. CVS
            graphical front-ends will also ask you for this root path.</para>
          </listitem>

          <listitem>
            <para><literal><emphasis>projectname</emphasis></literal> is the
            project short name</para>
          </listitem>

          <listitem>
            <para><literal><emphasis>loginname</emphasis></literal> is your
            CodeX login (all lowercase)</para>
          </listitem>

          <listitem>
            <para><literal><emphasis>topdirectory</emphasis></literal> is the
            name of the top level directory to import</para>
          </listitem>

          <listitem>
            <para><literal><emphasis>vendor_tag</emphasis></literal> is a
            special tag. For now replace it with &#34;Xerox&#34;</para>
          </listitem>
        </itemizedlist>

        <para><tip><title>Tip: made a mistake while importing your source
        code?</title><para>It is not unusual to make a mistake when importing
        your source code into a fresh CVS repository especially for new users.
        Typical mistakes are directories placed at the wrong level or with the
        wrong name. Nothing to fear though... if you want to start again on a
        new CVS repository contact the CodeX Team and we&#39;ll do that for
        you.</para></tip></para>

        <para><note>Note that if you already have a CVS repository
        available, the CodeX Team can help you transfer this repository on
        CodeX and preserve all of your project history. We just need an
        archive (zip or tar) of your entire CVS tree including the CVSROOT
        directory. From there we&#39;ll re-install everything for you on the
        CodeX server. Contact us for more information.</note></para>
      </section>

      <section id="Checkingcodeout">
        <title>Checking code out</title>

        <para><emphasis>Audience: all CodeX users</emphasis></para>

        <para>Once a CVS repository has been populated other CodeX users can
        checkout the source code and place it on their own workstation. The
        result is called a working copy in the CVS jargon. Note that
        &#39;checkout&#39; in the CVS world does not mean that the user has
        acquired any sort of lock on the file. The CVS paradigm is: anyone
        (with the right permissions) can retrieve a working copy for editing;
        changes are reconciled or flagged for conflict resolution when the
        file is committed. As its name says it and unlike other tools (RCS,
        SCCS, ClearCase...) CVS is a concurrent version control system.</para>

        <para>A working copy is NOT an image of the CVS repository. It is
        rather a snapshot of the source tree at some point in time and, by
        default, it&#39;s the latest version at the time the working copy is
        created or updated. One of the interesting features of a working copy
        is that it is a self-contained entity. In other words, a working copy
        contains all the necessary information for CVS to know exactly which
        CVS server and repository it is coming from and the corresponding
        moment in the history of the source tree . This is also why you
        won&#39;t see the -d command-line option in all subsequent CVS
        commands presented here. These commands run from within a working
        copy, so CVS knows exactly where the CVS repository is.</para>

        <para>To create a working copy type the following command:</para>

<programlisting format="linespecific" linenumbering="unnumbered" width="80">
cvs -d:pserver:loginname@cvs.projectname.codex.xerox.com:/cvsroot/projectname
checkout directory
</programlisting>

        <para>Where:</para>

        <itemizedlist mark="bullet"
                      spacing="compact">
          <listitem>
            <para>The -d argument is called the CVS root path. This path is a
            sort of URL to locate your CVS repository on the net. CVS
            graphical front-ends will also ask you for this root path.</para>
          </listitem>

          <listitem>
            <para><literal><emphasis>projectname</emphasis></literal> is the
            project short name</para>
          </listitem>

          <listitem>
            <para><literal><emphasis>loginname</emphasis></literal> is your
            CodeX login (all lowercase)</para>
          </listitem>

          <listitem>
            <para><literal><emphasis>directory</emphasis></literal> is the
            path to the directory that you want to checkout. To learn more
            about the directory structure aof the CVS repository you are
            working with, first browse the CVS repository via the CVS Web
            Interface (see <xref linkend="CVSWebInterface" />)</para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="Updatingthesourcecode">
        <title>Updating the source code</title>

        <para><emphasis>Audience: all CodeX users</emphasis></para>

        <para>Running a &#34;<literal>cvs update</literal>&#34; command from
        within a working copy has the effect of updating the working copy (or
        a subpart of it) with the latest version of each source file. To
        update a working copy with terse output mode type:</para>

        <programlisting format="linespecific" linenumbering="unnumbered" width="80">
cvs -q update
        </programlisting>

        <para>If you simply want to know what files have changed on the CVS
        repository since your last update but don&#39;t want to update your
        working, you can run the cvs command with the
        &#34;show-me-but-don&#39;t-do&#34; flag (-n):</para>

        <programlisting format="linespecific" linenumbering="unnumbered" width="80">
cvs -n -q update
        </programlisting>

        <para>Remark: The CVS update command is among the most semantically
        rich in the CVS command set. It is used not only as described above,
        but also to merge your working copy with another version of the
        software, possibly changing the branch to which your working copy
        points. Refer to your CVS documentation for complete details.</para>
      </section>

      <section id="Committingyourchanges">
        <title>Committing your changes (project team)</title>

        <para><emphasis>Audience: project members</emphasis></para>

        <para>Project members involved in development activities will likely
        want to contribute the changes made in their own working copy back to
        the CVS repository. In CVS terminology this is called a commit
        operation.</para>

        <para>To commit changes you have made in your working copy, type the
        following command:</para>

        <programlisting format="linespecific" linenumbering="unnumbered" width="80">
cvs commit -m&#34;Explain the nature of the change here...&#34; [filenames]
        </programlisting>

        <para>Where:</para>

        <itemizedlist mark="bullet"
                      spacing="compact">
          <listitem>
            <para>The -m option is followed by a text message explaining what
            changes you have made</para>
          </listitem>

          <listitem>
            <para>The <emphasis>filenames</emphasis> argument is optional. It
            can be individual files or directories. But if there isn&#39;t any
            argument cvs will automatically commit all the files that have
            changed in the directory where you are located and all
            sub-directories recursively.</para>
          </listitem>
        </itemizedlist>

        <para><tip><title>Tip: Include a bug or task number in your commit
        messages</title><para>In the ideal world, all modifications made to
        the source code of a project should be related to either a bug logged
        in the CodeX BTS or to a task assign to a developer. If your project
        team lives in this wonderful world :-) then don&#39;t forget to
        include the related bug or task ID number at the beginning or at the
        end of your commit message. The CVS administrative files can help you
        enforce this rule by checking the format of all the submitted commit
        messages and reject them if it does not follow the recommended
        pattern.</para></tip></para>

        <para><tip><title>Tip: update before you commit</title><para>If you
        try to commit a modified file that was also modified on the CVS
        repository in the meantime, the CVS server will refuse to execute the
        <literal>cvs commit</literal> command. You must first execute a
        <literal>cvs update</literal> command to bring your own working copy
        up to date with latest version, merge your changes with those from
        others (CVS does it automatically in most cases) and then only commit
        your own changes back to the CVS repository. If you want to be immune
        from others&#39; changes then create a CVS branch and work with it in
        isolation.</para></tip></para>

        <para>As a project member, make sure you understand and follow your
        project policy before you commit any changes to your CVS repository.
        For example some projects require that only working, build-able, code
        that passes automatic unit tests be checked into the main branch. Thus
        the baseline can automatically be built and unit tested nightly.</para>
      </section>

      <section id="Contributingyourchanges">
        <title>Contributing your changes (other users)</title>

        <para><emphasis>Audience: all CodeX users</emphasis></para>

        <para>This is a variant of the previous section for those of you who
        do not have write access to the CVS repository of a project and,
        therefore, cannot commit their modifications to the CVS repository.</para>

        <para>The variant explained here is actually a method that is
        universally used in the Open Source world to contribute source code
        modification to the project team. It consists in the generation of a
        text file containing the differences between your modified version of
        the source code and the original one that you initially downloaded.
        This file is called a diff file because there is a tool called diff
        that can automatically do that for you.</para>

        <para>The reason why diff files are so popular is because they follow
        a well-documented format. Diff files are sent to the original project
        team which, upon reception, is going to use another universal tool
        called patch to automatically merge the contributed changes with the
        master copy of the source code. This is why, by extension, a diff file
        is also known as a <emphasis>patch</emphasis>.</para>

        <para>Diff files can be generated either with the
        <emphasis>diff</emphasis> tool (part of the GNU tools) that is
        available on all platforms including Windows or directly with CVS if
        you have been hacking on a CVS working copy.</para>

        <para><emphasis role="bold">The Diff way:</emphasis></para>

        <itemizedlist mark="bullet"
                      spacing="compact">
          <listitem>
            <para>Use the diff way when you obtained the original source code
            from a File Release and not from the project CVS repository.
            Let&#39;s assume the original source file is under the directory
            <literal>project-0.1/</literal> and that your modified version is
            under <literal>project-0.1-new/</literal></para>
          </listitem>

          <listitem>
            <para>You can generate a diff file with the following command (all
            files in subdirectories will be checked recursively for changes)</para>

<programlisting format="linespecific" linenumbering="unnumbered" width="80">
diff -rc project-0.1/ project-0.1-new/
</programlisting>

          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">The CVS way:</emphasis></para>

        <itemizedlist mark="bullet"
                      spacing="compact">
          <listitem>
            <para>This is the preferred way when you obtained the source code
            by creating your own CVS working copy. Let&#39;s assume that you
            are at the top level of the working copy.</para>
          </listitem>

          <listitem>
            <para>You can generate a diff file between your version and the
            very latest version in the CVS repository for the entire source
            tree by typing with the following CVS command:</para>

<programlisting format="linespecific" linenumbering="unnumbered" width="80">
cvs diff -c
</programlisting>
          <para></para>
          </listitem>

          <listitem>
            <para>If you want to generate a diff against a specific version of
            the source tree, then specify the tag for this version (version V1
            in the example below) in the command line:</para>

<programlisting format="linespecific" linenumbering="unnumbered" width="80">
cvs diff -c -r V1
</programlisting>
          </listitem>
        </itemizedlist>

        <para>In both cases, store the output of the diff or cvs diff command
        in a text file. Compress the output file if it&#39;s a large one and
        use the CodeX Patch Manager (see <xref linkend="PatchManager" /> on
        how to submit your patch to the project team).</para>

        <para>And thanks for contributing some code!</para>
      </section>

      <section id="ExportingandPackaging">
        <title>Exporting and Packaging</title>

        <para><emphasis>Audience: project members</emphasis></para>

        <para>There is a quick and easy way to release a pre-packaged version
        of your source file and make it available to all CodeX users through
        the File Release mechanism (see <xref linkend="FileRelease" />).</para>

        <procedure>
          <step>
            <para>Make sure all the project members involved in software
            development have committed the changes that were supposed to
            appear in this new release.</para>
          </step>

          <step>
            <para>Update your own working copy with the changes committed by
            all other project members with the following command:</para>

<programlisting format="linespecific" linenumbering="unnumbered" width="80">
cvs -q update
</programlisting>
          <para></para>
          </step>

          <step>
            <para>Update the ChangeLog, Release Notes and README file at the
            top of your source tree and commit the changes for these 3 files.</para>
          </step>

          <step>
            <para>Tag (mark) the CVS repository with the appropriate version
            number. This version number will be attached to the most recent
            revision of all committed files. From your working copy type
            (V_1_2 is a tag name that represents version 1.2 of your project):</para>

<programlisting format="linespecific" linenumbering="unnumbered" width="80">
cvs -q tag V_1_2
</programlisting>
          <para></para>
          </step>

          <step>
            <para>Your software release is now ready. Export a clean image of
            the CVS source tree in a fresh directory. By clean image we mean
            an image without any CVS specific files in it. Just source files.
            Assuming that you wish to export version 1.2 (tagged with label
            V_1_2) and that you want the exported software to be rooted under
            the <literal>project-1.2</literal> directory, type:</para>

<programlisting format="linespecific" linenumbering="unnumbered" width="80">
cvs -d:pserver:login@cvs.project.codex.xerox.com:/cvsroot/project
export project-1.2
</programlisting>
          <para></para>
          </step>

          <step>
            <para>Create a ZIP or tar archive with the entire
            <literal>project-1.2/</literal> directory</para>
          </step>

          <step>
            <para>Deliver this archive through the File Release service.</para>
          </step>

          <step>
            <para>Done! Nice job...Take a break. And remember to announce the
            availability of your new version via the CodeX News service (see
            <xref linkend="NewsService" />).</para>
          </step>
        </procedure>
      </section>
    </section>

    <section id="CVSforprojectadministrators">
      <title>CVS for project administrators</title>

      <para>There are a few things that Project Administrators must absolutely
      be aware of to manage their CVS repository well.</para>

      <section id="Accesscontrol">
        <title>Access control</title>

        <para>CVS read access is granted to any CodeX registered user. CodeX
        is about sharing source code not about burying it. So this is the
        standard CodeX setting and, unless otherwise agreed with the CodeX
        Team, the read permission has to remain active at any time. Source
        Code accesses, whether through CVS or File Release download are
        tracked in the Source Code Access Logs (see <xref
        linkend="SourceCodeAccessLogs" />). Finally, it is worth noting that
        anonymous users are denied access to the source code; even read
        access.</para>

        <para>By default, CVS write access is granted to all project members.
        It is, however, possible for a project administrator to deny CVS write
        access to certain project members. Revoking CVS write access for
        project members is not feasible from the Web interface. You must use
        your Shell Account to log into the CodeX server (see <xref
        linkend="ShellAccount" />) and type the following commands at the
        shell prompt:</para>

        <itemizedlist mark="bullet"
                      spacing="compact">
          <listitem>
            <para><literal>newgrp projectname</literal> (Where <literal><emphasis>projectname</emphasis></literal> is the
            short project name)</para>
          </listitem>

          <listitem>
            <para><literal>cd /cvsroot/projectname/CVSROOT</literal></para>
          </listitem>

          <listitem>
            <para>Edit the <literal>readers</literal> file and add the login
            name of the project members with read-access only (one login name
            per line)</para>
          </listitem>

          <listitem>
            <para><literal>exit</literal> (Logout)</para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="AdministrativeFiles">
        <title>Administrative Files</title>

        <para>Each CVS repository comes with a number of administrative files
        that are all located in the <literal>CVSROOT</literal> directory.
        These files gives project administrators all sorts of interesting
        capabilities like the creation of virtual modules from a collection of
        files and directories, trigger e-mail notification on certain events
        like commit or add, check the format of a CVS tag before accepting it,
        etc. (See the CVS Documentation cited in the R chapter for more
        information about administrative files).</para>

        <para><tip><title>Tip: Never edit CVS Administrative files in place</title><para>Never-ever
        edit any CVS administrative files directly in the CVS repository by
        using your CodeX Shell Account (except for <literal>readers</literal>
        and <literal>writers</literal> files). Always use CVS itself to manage
        the changes you want to apply to these files. Proceed as usual by
        checking out a working copy of the CVSROOT directory. Edit the
        appropriate files and commit the changes to the repository.</para></tip></para>

        <para><note>When making changes to the administrative files make
        sure you preserve the CodeX specific settings in the following files:
        config, writers and loginfo. Also be very careful not to change
        directory or file ownership unless you know exactly what you are
        doing.</note></para>
      </section>

      <section id="CVSE-mailnotification">
        <title>CVS E-mail notification</title>

        <para>CVS comes with a number of e-mail notification capabilities. CVS
        allows you to send e-mail to the development teams. For example, using
        the <literal>cvs watch</literal> command in combination with the
        notify CVS administrative file (see above), developers can be notified
        of whom is currently editing what file. In other cases you may use the
        <literal>commitinfo, loginfo</literal> or <literal>rcsinfo</literal>
        CVS administrative files to trigger e-mail notification whenever a
        file is committed, checked-out or tagged with a new release number.</para>

        <para>In all cases, you have to know that in order to reach any of the
        development team member you just need to specify their CodeX login
        name as their e-mail address. The CodeX server will know where to
        redirect the e-mail notification. Using login name is safer than using
        full e-mail addresses because they might change and you&#39;ll have to
        update your CVS administrative files by hand. Of course you can also
        specify any other full e-mail address corresponding to individuals
        that are not CodeX users or to CodeX or Xerox distribution lists.
        There is virtually no limit.</para>

        <para>For more information about the CVS notification capabilities
        please refer to the CVS material listed in the References section (see
        <xref linkend="References" />).</para>
      </section>
    </section>
  </chapter>
<!--
Local Variables:
sgml-parent-document: ("CodeX_User_Guide.xml" "book" "chapter")
End:
-->