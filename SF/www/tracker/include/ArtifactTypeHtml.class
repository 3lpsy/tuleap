<?php
//
// Copyright (c) Xerox Corporation, CodeX Team, 2001-2003. All rights reserved
//
// $Id$
//
//
//	Originally by to the SourceForge Team,1999-2000
//
//  Written for CodeX by Stephane Bouhet
//

//require($DOCUMENT_ROOT.'/../common/tracker/ArtifactType.class');

class ArtifactTypeHtml extends ArtifactType {

	/**
	 *  ArtifactType() - constructor
	 *
	 *  @param $Group object
	 *  @param $artifact_type_id - the id # assigned to this artifact type in the db
	 */
	function ArtifactTypeHtml(&$Group,$artifact_type_id=false, $arr=false) {
		return $this->ArtifactType($Group,$artifact_type_id,$arr);
	}

	/**
	 *  Display the header menu for this artifact type
	 *
	 *  @param params: array of parameters used to display the header
	 * 
	 *  @return void
	 */
	function header($params) {
		global $DOCUMENT_ROOT;

		$group_id= $this->Group->getID();

		//required by new site_project_header
		$params['group']=$group_id;
		$params['toptab']='trackers';
		$params['tabtext']=$this->getName();

		site_project_header($params);
		echo '<h3>Tracker: <a href="/tracker/?group_id='.$group_id.'&atid='.$this->getID().'">'.$this->getName().'</a></h3><p>';

		echo '<strong><a href="/tracker/?func=add&group_id='.$group_id.'&atid='. $this->getID() .'">Submit A New '.$this->getCapsItemName().'</a>';
		echo ' | <a href="/tracker/?func=browse&set=my&group_id='.$group_id.'&atid='. $this->getID() .'">My '.$this->getCapsItemName().'s </a>';
		echo ' | <a href="/tracker/?func=browse&set=open&group_id='.$group_id.'&atid='. $this->getID() .'">Open '.$this->getCapsItemName().'s </a>';
		echo ' | <a href="/tracker/admin/?group_id='.$group_id.'&atid='.$this->getID().'">Admin</a>';
		if ($params['help']) {
		    echo ' | '.help_button($params['help'],false,'Help');
		}

		echo '</strong><br>';
		echo '<HR NoShade SIZE="1" SIZE="90%">';
	}

	/**
	 *  Display the footer for this artifact type
	 *
	 *  @param params: array of parameters used to display the header
	 * 
	 *  @return void
	 */
	function footer($params) {
		site_project_footer($params);
	}

	/**
	 *  Display the admin header menu for this artifact type
	 *
	 *  @param params: array of parameters used to display the header
	 * 
	 *  @return void
	 */
	function adminHeader($params) {
		$group_id= $this->Group->getID();

		//required by new site_project_header
		$params['group']=$group_id;
		$params['toptab']='trackers';
		$params['tabtext']=$this->getName();

		site_project_header($params);

		echo '<strong><a href="/tracker/admin/?group_id='.$group_id.'">Admin All Trackers</a>';
		echo ' | <a href="/tracker/admin/?group_id='.$group_id.'&atid='. $this->getID() .'">Admin</a>';
		echo ' | <a href="/tracker/admin/?group_id='.$group_id.'&atid='. $this->getID() .'&func=editoptions">General Settings</a>';
		echo ' | <a href="/tracker/admin/?group_id='.$group_id.'&atid='. $this->getID() .'&func=canned">Manage Canned Responses</a>';
		echo ' | <a href="/tracker/admin/?group_id='.$group_id.'&atid='. $this->getID() .'&func=field_usage">Manage Field Usage</a>';
		echo ' | <a href="/tracker/admin/?group_id='.$group_id.'&atid='. $this->getID() .'&func=field_values">Manage Field Values</a>';
		echo ' | <a href="/tracker/admin/?func=report&group_id='.$group_id.'&atid='. $this->getID() .'">Manage Reports</a>';
		echo ' | <a href="/tracker/admin/?func=notification&group_id='.$group_id.'&atid='. $this->getID() .'&func=notification">Email Notification Settings</a>';
	    echo ' | '.help_button($params['help'],false,'Help');
		echo '</strong><hr>';
	}

	/**
	 *  Display the admin header menu for artifact type
	 *
	 *  @param params: array of parameters used to display the header
	 * 
	 *  @return void
	 */
	function adminTrackersHeader($params) {
		$group_id= $this->Group->getID();

		//required by new site_project_header
		$params['group']=$group_id;
		$params['toptab']='trackers';
		$params['tabtext']=$this->getName();

		site_project_header($params);

		echo '<strong><a href="/tracker/admin/?group_id='.$group_id.'">Admin All Trackers</a>';
		echo ' | <a href="/tracker/admin/?group_id='.$group_id.'&func=create">Create a New Tracker</a>';
		if ($params['help']) {
		    echo ' | '.help_button($params['help'],false,'Help');
		}
		echo '</strong><hr>';
	}

	/**
	 *  Display a select box for the canned responses
	 *
	 *  @param name: the select box name
	 *  @param checked: the default value
	 *  @param show_100: add the 100 value
	 *  @param text_100: the 100 label
	 * 
	 *  @return void
	 */
	function cannedResponseBox ($name='canned_response',$checked='xzxz') {
		return html_build_select_box ($this->getCannedResponses(),$name,$checked);
	}
	
	/**
	 *  Display the different options and the trackers lists
	 *
	 *  @return void
	 */
	function displayPendingTrackers() {
		global $atf, $theme,$font_size;
		

		echo "<form name=\"cal\"><script language=\"JavaScript\" src=\"/include/calendar.js\"></script>";		
		// Get the artfact type list
		$at_arr = $atf->getPendingArtifactTypes();
		echo '<H2>Pending Trackers Removals</H2>';
		if (!$at_arr) {
			echo "<h3>No Tracker pending for Deletion</h3>";
		} else {
		    echo '<H3>Trackers Pending for Deletion</H3>';

			$title_arr=array();
			$title_arr[]='ID';
			$title_arr[]='Project';
			$title_arr[]='Tracker';
			$title_arr[]='Deletion date';
			$title_arr[]='Delay?';
			$title_arr[]='Restore?';
			$title_arr[]='Delete?';
			echo html_build_list_table_top ($title_arr);
		
			$fmt = "\n".'<TR class="%s"><td>%s</td><td>%s</td><td>%s</td><td>%s</td>'.
			    '<td align="center">%s</td><td align="center">%s</td><td align="center">%s</td></tr>';
			$i=0;
			while ($arr = db_fetch_array($at_arr)) {
			    echo sprintf($fmt,
					    util_get_alt_row_color($i),
					    $arr['group_artifact_id'],
					    $arr['project_name'],
					    $arr['name'],
					    '<input type="text" name="delay_date" value="'.date("Y-m-d",$arr['deletion_date']).'"><a href="javascript:show_calendar(\'document.cal.delay_date\',document.cal.delay_date.value,\''.$theme.'\',\''.getFontsizeName($font_size).'\');"><img src="'.util_get_image_theme("calendar/cal.png").'"  border="0"></a>',
					    '<a href="javascript: var delay = document.cal.delay_date.value; document.location=\'/tracker/admin/restore.php?func=delay&group_id='.$arr['group_id'].'&atid='.$arr['group_artifact_id'].'&delay_date=\'+delay;"><img src="'.util_get_image_theme("ic/save16b.png").'" border="0" onClick="return confirm(\'Delay deletion for this tracker?\')"></a>',
					    "<a href=\"/tracker/admin/restore.php?func=restore&group_id=".$arr['group_id']."&atid=".$arr['group_artifact_id']."\"><img src=\"".util_get_image_theme("ic/convert.png")."\" border=\"0\" onClick=\"return confirm('Restore this tracker?')\"></a>",
					    "<a href=\"/tracker/admin/restore.php?func=delete&group_id=".$arr['group_id']."&atid=".$arr['group_artifact_id']."\"><img src=\"".util_get_image_theme("ic/trash.png")."\" border=\"0\" onClick=\"return confirm('** WARNING!! ** Delete this tracker and all its dependencies (no possible restore operation)?')\"></a>" );
			$i=0;
			}
		    // final touch...
		    echo "</TABLE></form>";
		}
	}
	
	/**
	 *  Display the different options and the trackers lists
	 *
	 *  @return void
	 */
	function displayAdminTrackers() {
		global $atf;
				
		// Get the artfact type list
		$at_arr = $atf->getArtifactTypes();
		
		if (!$at_arr || count($at_arr) < 1) {
			echo "<h1>No Accessible Trackers Found</h1>";
			echo "<p>
				<strong>No trackers have been set up, or you cannot view them.<p><FONT COLOR=RED>The Admin for this project ".
				"will have to set up data types using the <a href=\"/tracker/admin/?group_id=$group_id\">admin page</a></FONT></strong>";
		} else {
		    echo '<H2>All Trackers Administration</H2>';
			echo '<H3><a href="/tracker/admin/?group_id='.$this->Group->getID().'&func=create">Create A New Tracker</a></H3>';
			echo 'Create a new tracker from scratch or from an existing tracker.';
			echo '<H3>Manage Trackers</H3>';
			echo 'Administrate or delete a tracker.<p>';

			$title_arr=array();
			$title_arr[]='ID';
			$title_arr[]='Tracker';
			$title_arr[]='Description';
			$title_arr[]='Delete?';
			echo html_build_list_table_top ($title_arr);
		
			$fmt = "\n".'<TR class="%s"><td>%s</td><td>%s</td><td>%s</td>'.
			    '<td align="center">%s</td></tr>';

			for ($i = 0; $i < count($at_arr); $i++) {
			    echo sprintf($fmt,
					    util_get_alt_row_color($i),
					    "<a href=\"/tracker/admin/?group_id=".$this->Group->getID()."&atid=".$at_arr[$i]->getID()."\">".$at_arr[$i]->getID()."</a>",
					    $at_arr[$i]->getName(),
					    $at_arr[$i]->getDescription().'&nbsp;',
					    "<a href=\"/tracker/admin/?func=delete_tracker&group_id=".$this->Group->getID()."&atid=".$at_arr[$i]->getID()."\"><img src=\"".util_get_image_theme("ic/trash.png")."\" border=\"0\" onClick=\"return confirm('** WARNING!! ** Delete this tracker and all its dependencies?')\"></a>" );

			}
		    // final touch...
		    echo "</TABLE>";
		}
	}
	
	/**
	 *  Display the different options for administrate a tracker
	 *
	 *  @return void
	 */
	function displayAdminTracker($group_id,$atid) {
		
	    echo '<H2>Tracker \'<a href="/tracker?group_id='.$group_id.'&atid='.$atid.'">'.$this->getName().'</a>\' - Administration</H2>';
	
	    if ( $this->userIsAdmin() ) {
			echo '<H3><a href="/tracker/admin/?group_id='.$group_id.'&atid='.$atid.'&func=editoptions">General Settings</a></H3>';
			echo 'Define the title, the description, etc of this tracker.<P>';
			echo '<H3><a href="/tracker/admin/?group_id='.$group_id.'&atid='.$atid.'&func=canned">Manage Canned Responses</a></H3>';
			echo 'Add, update or delete the canned responses.';
			echo '<H3><a href="/tracker/admin/?func=field_usage&group_id='.$group_id.'&atid='.$atid.'">Manage Field Usage</a></H3>';
			echo 'Define what tracker fields you want to use in this tracker (remark: some of the fields like status, assignee, severity&hellip; are mandatory and cannot be removed).<P>';
			echo '<H3><a href="/tracker/admin/?func=field_values&group_id='.$group_id.'&atid='.$atid.'">Manage Field Values</a></H3>';
			echo 'Define the set of values for the tracker fields you have decided to use in your tracker. <P>';
			echo '<H3><a href="/tracker/admin/?func=report&group_id='.$group_id.'&atid='.$atid.'">Manage Reports</a></H3>';
			echo 'Define personal or project-wide tracker reports: what search criteria to use and what tracker fields to show in the tracker report table&hellip;';
		
			echo '<H3><a href="/tracker/admin?func=notification&group_id='.$group_id.'&atid='.$atid.'">Email Notification Settings</a></H3>';
			echo 'Users can define when they want to be notified of a tracker update via email. Project Administrators can also define global email notification rules.<P>';
	    }
	}

	/**
	 *  Display the select box with the permissions values
	 *
	 *  @return void
	 */
	function displayPermValues($i,$perm_level) {
		$out = '<FONT size="-1"><SELECT name="user_name['.$i.']">';
		$out .= '<OPTION value="0"'.(($perm_level==0)?" selected":"").'>None';
		$out .= '<OPTION value="1"'.(($perm_level==1)?" selected":"").'>Tech Only';
		$out .= '<OPTION value="2"'.(($perm_level==2)?" selected":"").'>Tech & Admin';
		$out .= '<OPTION value="3"'.(($perm_level==3)?" selected":"").'>Admin Only';
		$out .= '</SELECT></FONT>';
		
		return $out;
	}

	/**
	 *  Display the users permissions for this tracker
	 *
	 *  @return void
	 */
	function displayUsersPerm() {
		
	    $result=$this->getUsersPerm($this->getID());
	    $rows=db_numrows($result);
	
	    if ($rows > 0) {
	
			$title_arr=array();
			$title_arr[]='User';
			$title_arr[]='Permissions';
			$title_arr[]='Delete?';
					
			echo html_build_list_table_top ($title_arr);
		
			for ($i=0; $i < $rows; $i++) {
				$user_id = db_result($result, $i, 'user_id');
			    $user_name = db_result($result, $i, 'user_name');
			    $perm_level =  db_result($result, $i, 'perm_level');
		
			    echo '<TR class="'. util_get_alt_row_color($i).'">'.
			    	 '<TD>'.util_user_link($user_name).'</TD>';
				echo '<TD align="center">'.$this->displayPermValues($i,$perm_level).'</TD>';
				echo '<TD align="center"><a href="/tracker/admin/?group_id='.$this->Group->getID().'&atid='.$this->getID().'&func=deleteuser&user_id='.$user_id.'"><img src="'.util_get_image_theme("ic/trash.png").'" border="0" onClick="return confirm(\'Delete this user?\')"></a></TD>';
				echo '</TR>';
			}
			echo '</TABLE>';
		} else {
			echo '<H3>No users for this tracker.</H3>';
		}
		
	}
	
	/**
	 *  Display a selectbox for the user members
	 *
	 *  @return void
	 */
	function displayGroupUsers() {
	    $result=$this->getGroupMembers();
	    $rows=db_numrows($result);
	
		echo '<SELECT name="user_id">';
		for ($i=0; $i < $rows; $i++) {
			$user_id = db_result($result, $i, 'user_id');
		    $user_name = db_result($result, $i, 'user_name');
			echo '<OPTION value="'.$user_id.'">'.$user_name.'</OPTION>';
		}
		echo '</SELECT>';

	}
	
	/**
	 *  Display the differents options for this tracker
	 *
	 *  @return void
	 */
	function displayOptions($group_id,$atid) {
		
		echo '<H2>Tracker \'<a href="/tracker?group_id='.$group_id.'&atid='.$atid.'">'.$this->getName().'</a>\' - General Settings</H2>';
		echo '<form name="form1" >
		  <input type="hidden" name="update" value="1">
		  <input type="hidden" name="group_id" value="'.$group_id.'">
		  <input type="hidden" name="atid" value="'.$atid.'">
		  <input type="hidden" name="func" value="editoptions">
		  <table width="100%" border="0" cellpadding="5">
		    <tr> 
		      <td width="21%"><b>Name</b> <font color="red">*</font>:</td>
		      <td width="79%"> 
		        <input type="text" name="name" value="'.$this->getName().'">
		      </td>
		    </tr>
		    <tr> 
		      <td width="21%"><b>Description</b>: <font color="red">*</font></td>
		      <td width="79%"> 
		        <textarea name="description" rows="3" cols="50">'.$this->getDescription().'</textarea>
		      </td>
		    </tr>
		    <tr> 
		      <td width="21%"><b>Short name</b>: <font color="red">*</font></td>
		      <td width="79%"> 
		        <input type="text" name="itemname" value="'.$this->getItemName().'">
		      </td>
		    </tr>
		    <tr> 
		      <td width="21%"><b> Public tracker:</b></td>
		      <td width="79%"> ';
		if ( $this->isPublic() ) {
			echo '<input type="checkbox" name="is_public" value="1" checked>';
		} else {
			echo '<input type="checkbox" name="is_public" value="1">';
		}
		echo '			
		      </td>
		    </tr>
		    <tr> 
		      <td width="21%"><b>Allow anonymous submission:</b></td>
		      <td width="79%">';
		if ( $this->allowsAnon() ) {
			echo '<input type="checkbox" name="allow_anon" value="1" checked>';
		} else {
			echo '<input type="checkbox" name="allow_anon" value="1">';
		}
		echo '	
		      </td>
		    </tr>
		    <tr> 
		      <td width="21%"><b>Submit instructions</b>:<br><i>(HTML tags allowed)</i></td>
		      <td width="79%"> 
		        <textarea name="submit_instructions" rows="3" cols="50">'.$this->getSubmitInstructions().'</textarea>
		      </td>
		    </tr>
		    <tr> 
		      <td width="21%"><b>Browse instructions</b>:<br><i>(HTML tags allowed)</i></td>
		      <td width="79%"> 
		        <textarea name="browse_instructions" rows="3" cols="50">'.$this->getBrowseInstructions().'</textarea>
		      </td>
		    </tr>
		  </table>
		  <p align="center"><input type="submit" value="Submit"></p>
		</form>';
	}


	/**
	 *  Display a select box for the tracker list for a group
	 *
	 *  @param group_id: the project id
	 *  @param name: the select box name
	 *  @param checked: the default value
	 * 
	 *  @return void
	 */
	function trackersSelectBox ($group_id,$name,$checked='xzxz') {
		global $atf;
		
		return html_build_select_box ($atf->getArtifactTypesFromId($group_id),$name,$checked);
	}

	/**
	 *  Display the create tracker form
	 *
	 *  @param group_id: the group id
	 *  @param codex_template: the artifact type id chosen for a CodeX template
	 *  @param group_id_template: the group id chosen for an existing tracker
	 *  @param atid_template: the artifact type id chosen for an existing tracker
	 *  @param name: the name chosen
	 *  @param description: the description chosen
	 *  @param itemname: the short name chosen
	 *  @param feedback: the error or info message
	 *
	 *  @return void
	 */
	function displayCreateTracker($group_id,$codex_template,$group_id_template,$atid_template,$name,$description,$itemname,$feedback) {
		echo '<script language="JavaScript">
		      function trimStr(value) {
		      	trimValue = "";
		      	for(i=0;i<value.length;i++) {
		      		if ( value.charAt(i) != " " ) {
		      			trimValue = trimValue + value.charAt(i);
		      		}
		      	}
		      	return trimValue;
		      }
		    
			  function onChangeGroup() {
			  	document.form_create.func.value = "create";
			  	document.form_create.submit();
			  }
			  
			  function checkValues() {
			  	if ( trimStr(document.form_create.name.value) == "" ) {
		  			document.form_create.feedback.value = "Please, fill the tracker name.";
		  			return false;
				}
			  	if ( trimStr(document.form_create.description.value) == "" ) {
		  			document.form_create.feedback.value = "Please, fill the tracker description.";
		  			return false;
				}
			  	if ( trimStr(document.form_create.itemname.value) == "" ) {
		  			document.form_create.feedback.value = "Please, fill the tracker short name.";
		  			return false;
				}
	  			return true;
				
			  }
			
			  function onSubmitCreateTemplate() {
			  	if ( checkValues() ) {
			  		if ( (document.form_create.group_id_template.value == "")||(document.form_create.atid_template.value == "") ) {
			  			document.form_create.feedback.value = "Please, choose a project and a tracker first.";
					  	document.form_create.func.value = "create";
			  		}
			  		document.form_create.atid_chosen.value = document.form_create.atid_template.value;
			  		document.form_create.group_id_chosen.value = document.form_create.group_id_template.value;
				} else {
				  	document.form_create.func.value = "create";
				}
			  	document.form_create.submit();
			  }

			  function onSubmitCreateCodeXTemplate() {
			  	if ( checkValues() ) {
			  		if ( document.form_create.codex_template.value == 100 ) {
			  			document.form_create.feedback.value = "Please, choose a template first.";
					  	document.form_create.func.value = "create";
			  		}
			  		document.form_create.atid_chosen.value = document.form_create.codex_template.value;
			  		document.form_create.group_id_chosen.value = 100;
				} else {
				  	document.form_create.func.value = "create";
				}
			  	document.form_create.submit();
			  }

			  function showGroupSelection() {
			  	win=window.open("","group_id_selection","height=145,width=480,toolbar=no,location=no,resizable=yes,left=200,top=200");
				win.location = "/tracker/group_selection.php?opener_form=form_create&opener_field=group_id_template&filter=member";
			  }

			  function showTrackerSelection() {
			  	if ( document.form_create.group_id_template.value == "" ) {
			  		alert("Please, select a project first!");
			  		return;
			  	}
			  	win=window.open("","artifact_group_id_selection","height=45,width=200,toolbar=no,location=no,resizable=yes,left=200,top=200");
				win.location = "/tracker/tracker_selection.php?group_id=" + document.form_create.group_id_template.value + "&opener_form=form_create&opener_field=atid_template";
			  }

			  </script>
			 ';
		echo '<h2>Create a new tracker:</h2>
		<p>Please, fill the name, description and short name of this new tracker:</p>';
		echo '<form name="form_create" >
		  <input type="hidden" name="group_id" value="'.$group_id.'">
		  <input type="hidden" name="func" value="docreate">
		  <input type="hidden" name="atid_chosen" value="">
		  <input type="hidden" name="group_id_chosen" value="">
		  <input type="hidden" name="feedback" value="">
		  <table width="100%" border="0" cellpadding="5">
		    <tr> 
		      <td width="21%"><b>Name</b>: <font color="red">*</font></td>
		      <td width="79%"> 
		        <input type="text" name="name" value="'.$name.'">
		      </td>
		    </tr>
		    <tr> 
		      <td width="21%"><b>Description</b>: <font color="red">*</font></td>
		      <td width="79%"> 
		        <textarea name="description" rows="3" cols="50">'.$description.'</textarea>
		      </td>
		    </tr>
		    <tr> 
		      <td width="21%"><b>Short name</b>: <font color="red">*</font></td>
		      <td width="79%"> 
		        <input type="text" name="itemname" value="'.$itemname.'">
		      </td>
		    </tr>';
		echo '</table>';
		echo '<p>Choose a creation method:</p>';
		echo '<table>
			  <tr valign="top">
			     <td width="300"><li><b>From a predefined CodeX template:</b></li></td>
			     <td colspan="2">';
		echo $this->trackersSelectBox(100,"codex_template");
		echo '	 &nbsp;<input type="button" name="CreateCodeXTemplate" value="Create" onClick="onSubmitCreateCodeXTemplate()"><br><br></td>
			  <tr valign="top">    
			     <td width="300"><li><b>From an existing tracker:</b><br><i>(Choose a project first and then a tracker of this project or fill directly a tracker ID)</i></li></td>
			     
			     <td>
			     	<table>
			     	  <tr>
			     	  	<td>Project ID:</td>
			     		<td><input name="group_id_template" value=""><a href="javascript:showGroupSelection()"><img src="'.util_get_image_theme("button_choose.png").'" align="absmiddle" border="0"></a></td>
			     	  </tr>
			     	  <tr>
				        <td>Tracker ID:</td>
			     		<td><input name="atid_template" value=""><a href="javascript:showTrackerSelection()"><img src="'.util_get_image_theme("button_choose.png").'" align="absmiddle" border="0"></a></td>
					  <tr>
					</table>
				 </td>			     		
		         <td><input type="button" name="CreateTemplate" value="Create" onClick="onSubmitCreateTemplate()"></td>
		      <tr>';

	    echo '</form>
			  </table>';
		
	}

	/**
	 *  Display the field usage list
	 *
	 *  @return void
	 */
	function displayFieldUsageList() {
		global $ath,$art_field_fact,$PHP_SELF;
		
		echo '<h3>List of all Available Fields</h3>';
		echo '<p>(Click to modify)';
		
		
		// Show all the fields currently available in the system
		$i=0;
		$title_arr=array();
		$title_arr[]='Field Label';
		$title_arr[]='Type';
		$title_arr[]='Description';
		$title_arr[]='Rank<br>on screen';
		$title_arr[]='Status';
		$title_arr[]='Delete?';
		
		echo html_build_list_table_top ($title_arr);
		
		// Build HTML ouput for  Used fields
		$iu=0;
		$fields = $art_field_fact->getAllUsedFields();
		$html = "";
		
		while (list($field_name,$field) = each($fields)) {
		
		    $rank = ($field->getPlace()?$field->getPlace():"-");
		    $status = ($field->getUseIt()?"Used":"Unused");
		
			$html .= '<TR class="'. 
			    util_get_alt_row_color($iu) .'">';
		
		    $html .= '<TD><A HREF="'.$PHP_SELF.'?group_id='.$this->Group->getID()."&atid=".$this->getID().
			'&func=display_field_update&field_id='.$field->getID().'">'.
			$field->getLabel().'</A></td>'.
			"\n<td>".$field->getLabelDisplayType().'</td>'.
			"\n<td>".$field->getDescription().'</td>'.
			"\n<td align =\"center\">".$rank.'</td>'.
			"\n<td align =\"center\">".$status.'</td>';
			
			if ( $field->isStandardField() ) {
				// For standard, we can't delete them - Only unused them
		    	$html .= "\n<td align =\"center\">-</td>";
			} else {
		    	$html .= "\n<td align =\"center\"><a href=\"/tracker/admin/?func=field_delete&group_id=".$this->Group->getID()."&atid=".$this->getID()."&field_id=".$field->getID()."\"><img src=\"".util_get_image_theme("ic/trash.png")."\" border=\"0\" onClick=\"return confirm('** WARNING!! ** If you delete this field, you will lost ALL the associated data. You can also set to UNUSED this field. Continue?')\"></a></td>";
		    }
		
			$html .= "<TR>";
					    			
			$iu++;
		}
		
		// Now print the HTML table
		if ($iu == 0) {
		    echo '<tr><td colspan="4"><center><b>---- No field in use. Choose one below ----</b></center></tr>'.$html;  
		} else {
		    echo '<tr><td colspan="4"><center><b>---- USED FIELDS ----</b></center></tr>'.$html;  
		}

		// Build HTML ouput for Unused fields
		$iu=0;
		$fields = $art_field_fact->getAllUnusedFields();
		$html = "";
		
		while (list($field_name,$field) = each($fields)) {
		
		    $rank = ($field->getPlace()?$field->getPlace():"-");
		    $status = ($field->getUseIt()?"Used":"Unused");
		
			$html .= '<TR class="'. 
			    util_get_alt_row_color($iu) .'">';
		
		    $html .= '<TD><A HREF="'.$PHP_SELF.'?group_id='.$this->Group->getID()."&atid=".$this->getID().
			'&func=display_field_update&field_id='.$field->getID().'">'.
			$field->getLabel().'</A></td>'.
			"\n<td>".$field->getLabelDisplayType().'</td>'.
			"\n<td>".$field->getDescription().'</td>'.
			"\n<td align =\"center\">".$rank.'</td>'.
			"\n<td align =\"center\">".$status.'</td>';
			if ( $field->isStandardField() ) {
				// For standard, we can't delete them - Only unused them
		    	$html .= "\n<td align =\"center\">-</td>";
			} else {
			    $html .= "\n<td align =\"center\"><a href=\"/tracker/admin/?func=field_delete&group_id=".$this->Group->getID()."&atid=".$this->getID()."&field_id=".$field->getID()."\"><img src=\"".util_get_image_theme("ic/trash.png")."\" border=\"0\" onClick=\"return confirm('** CAUTION!! ** If you delete this field, you will lost ALL the associated data. Continue?')\"></a></td>";
			}
		
			$html .= "<TR>";
					    			
			$iu++;
		}
		
		// Now print the HTML table
		if ($iu == 0) {
		    echo '<tr><td colspan="4"><center><b>---- NO UNUSED FIELD ----</b></center></tr>'.$html;  
		} else {
		    echo '<tr><td colspan="4"><center><b>---- UNUSED FIELDS ----</b></center></tr>'.$html;  
		}

		echo '</TABLE>';
		echo '<hr>';
		
	}
	
	/**
	 *  Display the field type select box
	 *
	 *  @param data_type: the field data type (string, int, flat or date)
	 *  @param display_type: the field display type (select box, text field, ...)
	 *  @param form_name: the HTTP form name
	 *
	 *  @return void
	 */
	function displayFieldType($data_type,$display_type,$form_name) {
		
		$af = new ArtifactField();
		
		echo '<script language="JavaScript">

			  function onChangeFieldType(form) {
			  		switch ( form.field_type.value ) {
			  		// Select Box
			  		case "1":
			  			form.data_type.value = '.$af->DATATYPE_INT.';
					  	form.display_type.value = "SB";
					  	form.display_size.value = "N/A";
					  	break;
			  		// Multi Select Box
			  		case "2":
			  			form.data_type.value = '.$af->DATATYPE_INT.';
					  	form.display_type.value = "MB";
					  	form.display_size.value = "";
					  	break;
			  		// TextField
			  		case "3":
			  			form.data_type.value = '.$af->DATATYPE_TEXT.';
					  	form.display_type.value = "TF";
					  	form.display_size.value = "";
					  	break;
			  		// TextArea
			  		case "4":
			  			form.data_type.value = '.$af->DATATYPE_TEXT.';
					  	form.display_type.value = "TA";
					  	form.display_size.value = "";
					  	break;
			  		// DateField
			  		case "5":
			  			form.data_type.value = '.$af->DATATYPE_DATE.';
					  	form.display_type.value = "DF";
					  	form.display_size.value = "";
					  	break;
			  		// FloatField
			  		case "6":
			  			form.data_type.value = '.$af->DATATYPE_FLOAT.';
					  	form.display_type.value = "TF";
					  	form.display_size.value = "";
					  	break;
			  		// IntegerField
			  		case "7":
			  			form.data_type.value = '.$af->DATATYPE_INT.';
					  	form.display_type.value = "TF";
					  	form.display_size.value = "";
					  	break;
					default:
						alert("Unknow field type!");
						break;
			  		}
			  }

			  </script>
			 ';

        echo '<select name="field_type" onChange="onChangeFieldType('.$form_name.')">';
		if ( $data_type&&$display_type ) {
			$selected = "";
			if ( ($data_type == $af->DATATYPE_INT || $data_type == $af->DATATYPE_USER)
				 &&($display_type == "SB") ) 
				$selected = " selected";
			echo '<option value="1"'.$selected.'>Select Box</option>';
			
			$selected = "";
			if ( ($data_type == $af->DATATYPE_INT || $data_type == $af->DATATYPE_USER)
				 &&($display_type == "MB") ) 
				$selected = " selected";
			echo '<option value="2"'.$selected.'>Multi Select Box</option>';
			
			$selected = "";
			if ( ($data_type == $af->DATATYPE_TEXT)
				 &&($display_type == "TF") ) 
				$selected = " selected";
			echo '<option value="3"'.$selected.'>Text Field</option>';
			
			$selected = "";
			if ( ($data_type == $af->DATATYPE_TEXT)
				 &&($display_type == "TA") ) 
				$selected = " selected";
			echo '<option value="4"'.$selected.'>Text Area</option>';

			$selected = "";
			if ( ($data_type == $af->DATATYPE_DATE)
				 &&($display_type == "DF") ) 
				$selected = " selected";
			echo '<option value="5"'.$selected.'>Date Field</option>';

			$selected = "";
			if ( ($data_type == $af->DATATYPE_FLOAT)
				 &&($display_type == "TF") ) {
				$selected = " selected";
			}
			echo '<option value="6"'.$selected.'>Float Field</option>';

			$selected = "";
			if ( ($data_type == $af->DATATYPE_INT)
				 &&($display_type == "TF") ) 
				$selected = " selected";
			echo '<option value="7"'.$selected.'>Integer Field</option>';

		} else {
			echo '
			<option value="1">Select Box</option>
			<option value="2">Multi Select Box</option>
			<option value="3">Text Field</option>
			<option value="4">Text Area</option>
			<option value="5">Date Field</option>
			<option value="6">Float Field</option>
			<option value="7">Integer Field</option>';
		}
        echo '</select>';
	}

	/**
	 *  Display the field usage add or update form
	 *
	 *  @param func: field_create or field_update
	 *  @param field_id: the field id
	 *  @param field_name: the field name
	 *  @param description: the field description
	 *  @param label: the field label
	 *  @param data_type: the field data type (string, int, flat or date)
	 *  @param default_value: the default value
	 *  @param display_type: the field display type (select box, text field, ...)
	 *  @param display_size: the field display size
	 *  @param rank_on_screen: rank on screen
	 *  @param show_on_add: display this field on the submission form used by project members  
	 *  @param show_on_add_members: display this field on the submission form used by other users 
	 *  @param empty_ok: allow empty fill
	 *  @param keep_history: keep in the history
	 *  @param special: is the field has special process
	 *  @param use_it: this field is used or not
	 *  @param show_use: boolean - display the checkbox for using or not this field
	 *
	 *  @return void
	 */
	function displayFieldUsageForm($func="field_create",$field_id=false,$field_name=false,$description=false,$label=false,$data_type=false,$default_value=false,$display_type=false,
								   $display_size=false,$rank_on_screen=false,$show_on_add=false,$show_on_add_members=false,
								   $empty_ok=false,$keep_history=false,$special=false,$use_it=false,$show_use=false) {
		global $art_field_fact;
		
		$field = $art_field_fact->getFieldFromId($field_id);

		$af = new ArtifactField();

		if ( $func == "field_create" ) {
			echo '<h3>Create a new field</h3>';
			echo '
			  <form name="form_create" method="/tracker/admin/index.php">
			  <input type="hidden" name="func" value="'.$func.'">
			  <input type="hidden" name="group_id" value="'.$this->Group->getID().'">
			  <input type="hidden" name="atid" value="'.$this->getID().'">
			  <input type="hidden" name="field_id" value="'.$this->getNextFieldID().'">
			  <input type="hidden" name="field_name" value="'.$this->buildFieldName($this->getNextFieldID()).'">
			  <input type="hidden" name="data_type" value="'.$af->DATATYPE_INT.'">
			  <input type="hidden" name="display_type" value="SB">';
		} else {
			echo "<h3>Update Field '$label'</h3>";
			echo '
			  <form name="form_create" method="/tracker/admin/index.php">
			  <input type="hidden" name="func" value="'.$func.'">
			  <input type="hidden" name="group_id" value="'.$this->Group->getID().'">
			  <input type="hidden" name="atid" value="'.$this->getID().'">
			  <input type="hidden" name="field_id" value="'.$field_id.'">
			  <input type="hidden" name="field_name" value="'.$field_name.'">
			  <input type="hidden" name="data_type" value="'.$data_type.'">
			  <input type="hidden" name="display_type" value="'.$display_type.'">';
		}
		
		if ( $field && $field->isStandardField() ) {
			echo '<p><i><b>** IMPORTANT NOTE **</b> \''.$label.'\' is a standard field of the CodeX 
				Tracker. Its purpose is global to all trackers and we strongly advise 
				you not to change its label and description unless they have a similar 
				meaning which preserves the role of the field.</i></p>';
		}
	
		echo '
		  <b>Field identification and description:</b><br>
          <p>Field Label: <font color="red">*</font> ';
		      
		if ( $label ) {
			echo '<input type="text" name="label" size="30" maxlength="40" value="'.$label.'">';
		} else {
			echo '<input type="text" name="label" size="30" maxlength="40">';
		}
		
		echo '<p>Description: ';
		            
		if ( $description ) {
		    echo '<input type=text name="description" size="70" maxlength="255" value="'.$description.'">';
		} else {
		    echo '<input type=text name="description" size="70" maxlength="255" value="'.$description.'">';
		}
		
		echo '
		  <p>Field type: <font color="red">*</font>&nbsp;';
		
		if ( $field && $field->isStandardField() ) {
			echo $field->getLabelDisplayType();
		} else {
			$this->displayFieldType($data_type,$display_type,"form_create");
		}
		
		echo '			
		  <p><b>Display informations:</b><br>
		  <table width="100%" border="0" cellpadding="5" cellspacing="0">
		    <tr> 
		      <td>Display Size:&nbsp;';
		      
		if ( $display_size ) {
			if ( $field && $field->isStandardField() ) {
				echo $display_size;
			    echo '<input type="hidden" name="display_size" value="'.$display_size.'">';
			} else {
			    echo '<input type="text" name="display_size" size="5" maxlength="5" value="'.$display_size.'">';
			}
		} else {
			if ( $display_type == "SB" ) {
		    	echo '<input type="text" name="display_size" size="5" maxlength="5" value="N/A">';
			} else {
		    	echo '<input type="text" name="display_size" size="5" maxlength="5">';
		    }
		}
			    
	    echo '
		      </td>
		      <td rowspan="2">Display this field...<br>
                                    <ul>
		        <li>On the submission form used by project members ';
		        
		if ( $show_on_add ) {
			echo '<input type="checkbox" name="show_on_add" value="1" checked>';
		} else {
			echo '<input type="checkbox" name="show_on_add" value="1">';
		}
		
		echo '
		        </li>
		        <li>On the submission form used by other users';
		        
		if ( $show_on_add_members ) {
			echo '<input type="checkbox" name="show_on_add_members" value="1" checked>';
		} else {
			echo '<input type="checkbox" name="show_on_add_members" value="1">';
		}		
		
		echo '
		        </li></ul>
		      </td>
		    </tr>
		    <tr> 
		      <td>Rank on screen:&nbsp;';
		      
		if ( $rank_on_screen ) {
	        echo '<input type="text" name="rank_on_screen" size="5" maxlength="5" value="'.$rank_on_screen.'">';
	    } else {
	        echo '<input type="text" name="rank_on_screen" size="5" maxlength="5">';
	    }
	    
	    echo '
		      </td>
		    </tr>
		  </table>
		  <b>Miscellaneous:</b>
		  <table width="100%" border="0" cellpadding="5" cellspacing="0">
		    <tr> 
		      <td width="30%">Allow Empty Value: ';
		
		if ( $field && $field->isStandardField() ) {
			if ( $empty_ok ) {
				echo 'Yes';
			    echo '<input type="hidden" name="empty_ok" value="1" checked>';
			} else {
				echo 'No';
			    echo '<input type="hidden" name="empty_ok" value="1">';
			}
		} else {
			if ( $empty_ok ) {
				echo '<input type="checkbox" name="empty_ok" value="1" checked>';
			} else {
				echo '<input type="checkbox" name="empty_ok" value="1">';
			}
		}
				
		echo '
		        </td><td>Keep Change History: ';
		
		if ( $field && $field->isStandardField() ) {
			if ( $keep_history ) {
				echo 'Yes';
			    echo '<input type="hidden" name="keep_history" value="1" checked>';
			} else {
				echo 'No';
			    echo '<input type="hidden" name="keep_history" value="1">';
			}
		} else {
			if ( $keep_history ) {
				echo '<input type="checkbox" name="keep_history" value="1" checked>';
			} else {
				echo '<input type="checkbox" name="keep_history" value="1">';
			}
		}
				
		echo '
		      </td></tr>';
		      
		if ( $show_use ) {
		    echo  '
		      <tr><td>';
			if ( $use_it == 1 ) {
				echo 'Use this field: <input type="checkbox" name="use_it" value="1" checked>';
			} else {
				echo 'Use this field: <input type="checkbox" name="use_it" value="1">';
			}
		    echo  '
		      </tr></td>';
		} else {
			echo '<input type="hidden" name="use_it" value="1">';
		}

		if ( $special ) {
			echo '<input type="hidden" name="special" value="1">';
		} else {
			echo '<input type="hidden" name="special" value="0">';
		}
		
		echo '
		  </table><p>';
		  
		if ( $func == "field_create" ) {
			echo '<input type="submit" name="Submit" value="Create">';
		} else {
			echo '<input type="submit" name="Submit" value="Update">';
		}
		
		echo '    
		  </p>
		</form>
		<p><font color="red">*</font>: fields required</p>';
		
	}

	/**
	 *  Display the field values list for editing the values
	 *
	 *  @return void
	 */
	function displayFieldValuesEditList() {
		global $ath,$art_field_fact;
		
		echo '<p>(Click to modify)';
		
		
		// Show all the fields currently available in the system
		$i=0;
		$title_arr=array();
		$title_arr[]='Field Label';
		$title_arr[]='Description';
		
		echo html_build_list_table_top ($title_arr);
		
		// Build HTML ouput for  Used fields
		$iu=0;
		$fields = $art_field_fact->getAllUsedFields();
		$html = "";
		
		while (list($field_name,$field) = each($fields)) {
		
			// Special case for submitted_by field
			// We don't display this field
			if ( $field->getName() == "submitted_by" ) {
				continue;
			}
			
			$html .= '<TR class="'. 
			    util_get_alt_row_color($iu) .'">';
		
		    $html .= '<TD><A HREF="'.$PHP_SELF.'?group_id='.$this->Group->getID()."&atid=".$this->getID().
			'&func=display_field_values&field_id='.$field->getID().'">'.
			$field->getLabel().'</A></td>'.
			"\n<td>".$field->getDescription().'</td>';
		
			$html .= "<TR>";

			$iu++;
		}
		
		// Now print the HTML table
		if ($iu == 0) {
		    echo '<tr><td colspan="4"><center><b>---- No used field ----</b></center></tr>';
		} else {
			echo $html;
		}

		echo '</TABLE>';
		echo '<hr>';
		
	}

	/**
	 *  Display the value function form
	 *
	 *  @param field_id: the field id to edit
	 *  @param value_function: the value function to bind to
	 *  @param or_label: display an additionnal label to display "Or ..."
	 *
	 *  @return void
	 */
	function displayValueFunctionForm($field_id,$value_function="",$or_label="") {
	    
	    if ( $or_label ) {
	    	echo '<h3>'.$or_label.' Bind the field to a list of values</h3>';
	    } else {
	    	echo '<h3>Bind the field to a list of values</h3>';
		}
	
	    echo '
	      <FORM ACTION="'.$PHP_SELF.'" METHOD="POST">
	      <INPUT TYPE="HIDDEN" NAME="func" VALUE="update_binding">
	      <INPUT TYPE="HIDDEN" NAME="field_id" VALUE="'.$field_id.'">
	      <INPUT TYPE="HIDDEN" NAME="group_id" VALUE="'.$this->Group->getID().'">
	      <INPUT TYPE="HIDDEN" NAME="atid" VALUE="'.$this->getID().'">
	      Bind To: &nbsp; 
	      <select name="value_function">
	          <option value="">None</option>';
		        
		if ( $value_function ) {
			$selected = "";
			if ( $value_function == "group_members" ) {
				$selected = " selected";
			}
			echo '<option value="group_members"'.$selected.'>Group members</option>';
			
			$selected = "";
			if ( $value_function == "artifact_submitters" ) {
				$selected = " selected";
			}
			echo '<option value="artifact_submitters"'.$selected.'>Group members</option>';

			$selected = "";
			if ( $value_function == "artifact_technicians" ) {
				$selected = " selected";
			}
			echo '<option value="artifact_technicians"'.$selected.'>Artifact technicians</option>';
		} else {
			echo '
		          <option value="group_members">Group members</option>
		          <option value="artifact_submitters">Artifact submitters</option>
		          <option value="artifact_technicians">Artifact technicians</option>';
		}
		
		echo '
		        </select>
	      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <INPUT TYPE="SUBMIT" NAME="SUBMIT" VALUE="Bind">
	      </FORM>';
		
	}
	
	/**
	 *  Display the field value form
	 *
	 *  @param $func: value_create or value_update
	 *  @param field_id: the field id to edit
	 *  @param value_id: the value id
	 *  @param value: the value 
	 *  @param order_id: rank
	 *  @param status: the field value status (Visible or Hidden)
	 *  @param description: the field value description
	 *
	 *  @return void
	 */
	function displayFieldValueForm($func,$field_id,$value_id=false,$value=false,$order_id=false,$status=false,$description=false) {
		global $PHP_SELF;
		
		if ( $func == "value_create" ) {
			echo '<h3>Create a new field value</h3>';
		} else {
			echo '<h3>Update the field value</h3>';
		}
					
		echo '
	      <FORM ACTION="'.$PHP_SELF.'" METHOD="POST">
	      <INPUT TYPE="HIDDEN" NAME="func" VALUE="'.$func.'">
	      <INPUT TYPE="HIDDEN" NAME="field_id" VALUE="'.$field_id.'">
	      <INPUT TYPE="HIDDEN" NAME="group_id" VALUE="'.$this->Group->getID().'">
	      <INPUT TYPE="HIDDEN" NAME="atid" VALUE="'.$this->getID().'">';

		if ( $func == "value_create" ) {
		    if ( $value_id ) {
		      	echo '<INPUT TYPE="hidden" NAME="value_id" VALUE="'.$value_id.'">';
		    } else {
		      	echo '<INPUT TYPE="hidden" NAME="value_id" VALUE="'.$this->getNextValueID($field_id).'">';
		    }
		} else {
	      	echo '<INPUT TYPE="hidden" NAME="value_id" VALUE="'.$value_id.'">';
		}

	    echo '  
		  <table width="100%" border="0" cellpadding="5" cellspacing="0">
		    <tr> 
		      <td width="45%">Value: <font color="red">*</font>&nbsp;';

	    if ( $value ) {
	      	echo '<INPUT TYPE="TEXT" NAME="value" VALUE="'.$value.'" SIZE="30" MAXLENGTH="60">';
	    } else {
	      	echo '<INPUT TYPE="TEXT" NAME="value" VALUE="" SIZE="30" MAXLENGTH="60">';
	    }
	    
	    echo '
	    	  </td>
		      <td width="25%">Rank:&nbsp;';
	      
	    if ( $order_id ) {
	    	echo '<INPUT TYPE="TEXT" NAME="order_id" VALUE="'.$order_id.'" SIZE="6" MAXLENGTH="6">';
		} else {
	    	echo '<INPUT TYPE="TEXT" NAME="order_id" VALUE="" SIZE="6" MAXLENGTH="6">';
		}
	    
	    echo '</td>
		      <td width="30%">';
	       
		if ( $func == "value_update" ) {
			if ( $status == "P" ) {
				echo 'Status: Permanent';
				echo '<input type="hidden" name="status" value="P">';
			} else {
				echo 'Status:&nbsp;
				<select name="status">';
				if ( $status ) {
					$selected = "";
					if ( $status == "V" ) 
						$selected = " selected";
					echo '<option value="V"'.$selected.'>Active</option>';
		
					$selected = "";
					if ( $status == "H" ) 
						$selected = " selected";
					echo '<option value="H"'.$selected.'>Hidden</option>';
		
				} else {
					echo '				
				          <option value="V" selected>Active</option>
				          <option value="H">Hidden</option>';
				}
				echo '
				</select> ';
			}
		} else {
			echo '&nbsp;</td>';
		}
	
		     
		echo '
		  </tr>
		  <tr>
		     <td colspan="4">Description:<BR>';
	     
	    if ( $description ) {
	    	echo '<textarea name="description" rows="2" cols="65">'.$description.'</textarea>';
	   	} else {
	    	echo '<textarea name="description" rows="2" cols="65"></textarea>';
		}
	
		echo '</td>
			</tr>
			</table>
			<p>';
	      
		if ( $func == "value_create" ) {
			echo '<INPUT TYPE="SUBMIT" NAME="SUBMIT" VALUE="Create">';
		} else {
			echo '<INPUT TYPE="SUBMIT" NAME="SUBMIT" VALUE="Update">';
		}

		echo '    
		  </p>
		</form>
		<p><font color="red">*</font>: fields required</p>';
	}
	
	/**
	 *  Display the field values list for a field
	 *
	 *  @param field_id: the field id
	 *
	 *  @return void
	 */
	function displayFieldValuesList($field_id) {
		global $ath,$art_field_fact,$PHP_SELF;
		
		
		$field = $art_field_fact->getFieldFromId($field_id);
		if ( !$field ) {
			return;
		}

		$values = $field->getFieldValues ($this->getID(),"'V','P'");
		$rows = db_numrows($values);
		
		if (!$values || ($rows == 0)) {
		    echo "\n<H3>No values defined yet</H3>";
		    return;
		} else {
		    echo '<h3>Existing values</h3>';
		    echo '<p>(Click to modify)';
		}

		
		// Show all the fields currently available in the system
		$i=0;
		$title_arr=array();
		$title_arr[]='Value Label';
		$title_arr[]='Description';
		$title_arr[]='Rank';
		$title_arr[]='Status';
		$title_arr[]='Delete?';
		
		echo html_build_list_table_top ($title_arr);
		
		// Build HTML ouput for  Used fields
		$iu=0;
		$html = "";

		while ($row = db_fetch_array($values)) {
		
		    $rank = $row['order_id']?$row['order_id']:"-";
		    $status = $this->getLabelValueStatus($row['status']);
		
			$html .= '<TR class="'. 
			    util_get_alt_row_color($iu) .'">';
		
		    $html .= '<TD><A HREF="'.$PHP_SELF.'?group_id='.$this->Group->getID()."&atid=".$this->getID().
			'&func=display_field_value&field_id='.$field->getID().'&value_id='.$row['value_id'].'">'.
			$row['value'].'</A></td>'.
			"\n<td>".$row['description'].'</td>'.
			"\n<td align =\"center\">".$rank.'</td>'.
			"\n<td align =\"center\">".$status.'</td>';
			
			if ( $row['status'] == "P" ) {
				// Unable to delete Permanent values
		    	$html .= "\n<td align =\"center\">-</td>";
			} else {
		    	$html .= "\n<td align =\"center\"><a href=\"/tracker/admin/?func=value_delete&group_id=".$this->Group->getID()."&atid=".$this->getID()."&field_id=".$field->getID()."&value_id=".$row['value_id']."\"><img src=\"".util_get_image_theme("ic/trash.png")."\" border=\"0\" onClick=\"return confirm('Delete this field value?')\"></a></td>";
		    }
		
			$html .= "<TR>";
					    			
			$iu++;
		}
		
		// Now print the HTML table
		if ($iu == 0) {
		    echo '<tr><td colspan="4"><center><b>---- NO ACTIVE VALUES ----</b></center></tr>'.$html;  
		} else {
		    echo '<tr><td colspan="4"><center><b>---- ACTIVE VALUES ----</b></center></tr>'.$html;  
		}

		// Build HTML ouput for Unused fields
		$iu=0;
		$values = $field->getFieldValues ($this->getID(),"'H'");
		$html = "";
		
		while ($row = db_fetch_array($values)) {
		
		    $rank = $row['order_id']?$row['order_id']:"-";
		    $status = $this->getLabelValueStatus($row['status']);
		
			$html .= '<TR class="'. 
			    util_get_alt_row_color($iu) .'">';
		
		    $html .= '<TD><A HREF="'.$PHP_SELF.'?group_id='.$this->Group->getID()."&atid=".$this->getID().
			'&func=display_field_value&field_id='.$field->getID().'&value_id='.$row['value_id'].'">'.
			$row['value'].'</A></td>'.
			"\n<td>".$row['description'].'</td>'.
			"\n<td align =\"center\">".$rank.'</td>'.
			"\n<td align =\"center\">".$status.'</td>';

			if ( $row['status'] == "P" ) {
				// Unable to delete Permanent values
		    	$html .= "\n<td align =\"center\">-</td>";
			} else {
		    	$html .= "\n<td align =\"center\"><a href=\"/tracker/admin/?func=value_delete&group_id=".$this->Group->getID()."&atid=".$this->getID()."&field_id=".$field->getID()."&value_id=".$row['value_id']."\"><img src=\"".util_get_image_theme("ic/trash.png")."\" border=\"0\" onClick=\"return confirm('Delete this field value?')\"></a>";
		    }
		
			$html .= "<TR>";
					    			
			$iu++;
		}
		
		// Now print the HTML table
		if ($iu == 0) {
		    echo '<tr><td colspan="4"><center><b>---- NO HIDDEN VALUES ----</b></center></tr>'.$html;
		} else {
		    echo '<tr><td colspan="4"><center><b>---- HIDDEN VALUES ----</b></center></tr>'.$html;  
		}

		echo '</TABLE>';
		echo '<hr>';
		
	}


	/* 
	 *
	 * displayNotificationForm
	 *
	 * return void
	 *
	 *
	 *
	 */
	
	function displayNotificationForm($user_id) {
	
		// By default it's all 'yes'
		for ($i=0; $i<$this->num_roles; $i++) {
		    $role_label = $this->arr_roles[$i]['role_label'];
		    for ($j=0; $j<$this->num_events; $j++) {
				$event_label = $this->arr_events[$j]['event_label'];
				$arr_notif[$role_label][$event_label] = 1;
				//echo "[$role_label][$event_label] = 1<br>";
		    }
		}
		
		$res_notif = $this->getNotificationWithLabels($user_id);
		while ($arr = db_fetch_array($res_notif)) {
		    $arr_notif[$arr['role_label']][$arr['event_label']] = $arr['notify'];
		}
		
		$group = $this->getGroup();
		$group_artifact_id = $this->getID();
		$group_id = $group->getGroupId();

		echo '<H2>Tracker \'<a href="/tracker?group_id='.$group_id.'&atid='.$group_artifact_id.'">'.$this->getName().'</a>\' - Email Notification Settings</h2>';
		// Build Wachees UI
		$res = $this->getWatchees($user_id);
		$arr_watchees = array();
		while ($row_watchee = db_fetch_array($res)) {
		    $arr_watchees[] = user_getname($row_watchee['watchee_id']);
		}
		$watchees = join(',',$arr_watchees);
		
		echo '
		<FORM action="/tracker/admin" method="get">
		<INPUT type="hidden" name="func" value="notification">
		<INPUT type="hidden" name="atid" value="'.$this->getID().'">
		<INPUT type="hidden" name="group_id" value="'.$group_id.'">';
		
		echo '<h3><a name="GlobalEmailNotification"></a>Global Email Notification '.
		help_button('HELP_FIXME.html#HELP_FIXME').'</h3>';
		
		if ($this->userIsAdmin()) {
		    echo '
		              <P><B>As a project administrator</B> you can provide email addresses (comma separated) to which new Artifact submissions (and possibly updates) will be systematically sent.<BR>
			<BR><INPUT TYPE="TEXT" NAME="new_artifact_address" VALUE="'.$this->getEmailAddress().'" SIZE="55" MAXLENGTH="255"> 
			&nbsp;&nbsp;&nbsp;(send on all updates) <INPUT TYPE="CHECKBOX" NAME="send_all_artifacts" VALUE="1" '. (($this->emailAll())?'CHECKED':'') .'><BR><br>';
		} else {
		    if ($this->getEmailAddress())
				echo '
			              <P>The project administrator have configured the following email addresses to receive
			notification of new artifact submission (and possibly updates).<P><u>Recipients</u>: '.
				    $this->getEmailAddress().'
				&nbsp;&nbsp;&nbsp; (Send on all updates: '.(($this->emailAll())?'Yes':'No').')<p>';
		    else
				echo '
			                <P>The project administrator hasn\'t yet specified email addresses that will systematically receive
			 email notification of new artifacts.<P>';
		}
		 
		
		echo '<h3>Personal Email Notification</h3>';
		  
		if ($this->userIsTech()) {
		    // To watch other users you must have at least tech rights on the tracker
		    echo'
		<h4>Users To Watch '.
		help_button('HELP_FIXME.html#HELP_FIXME').'</h4>
		<P>If you want to be the backup of someone when they\'re away from the office, or if you need to do the QA to all their artifacts. '.$GLOBALS['sys_name'].' can send their email notification to you also. List the login name of any user you wish to watch, separated by commas.</b>
		<p><INPUT TYPE="TEXT" NAME="watchees" VALUE="'.$watchees.'" SIZE="55" MAXLENGTH="255"><br></p>
		';
		
		    $res = $this->getWatchers($user_id);
		    $arr_watchers = array();
		    while ($row_watcher = db_fetch_array($res)) {
				$watcher_name = user_getname($row_watcher['user_id']);
				$watchers .= '<a href="/users/'.$watcher_name.'">'.$watcher_name.'</a>,';
		    }
		    $watchers = substr($watchers,0,-1); // remove extra comma at the end
		    
		    if ($watchers) {
				echo "<p>For your information your own artifact notifications are currently watched by: <u>$watchers</u>";
		    } else {
				echo "<p>For your information <u>nobody</u> is currently watching your own artifact notifications ";
		    }
		    echo '<br><br>';
		}
		
		// Build Role/Event table 
		// Rk: Can't use html_build_list_table_top because of the specific layout
		echo '<h4>Event/Role Specific Settings '.
		help_button('HELP_FIXME.html#HELP_FIXME').'</h4>
		              <P>You can tune your notification settings and decide what artifact changes you
		want to be aware of depending on your role. <p>
		<b><u>Note</u></b>: Notification of *new* artifact submission to people other than the assignee
		 or the submitter can be configured by the project administrator in the <a href="#GlobalEmailNotification">Global Email Notification section</a> above.<p>';
		
		echo '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<table BORDER="0" CELLSPACING="1" CELLPADDING="2" class="small">
		<tr class="boxtitle">
		    <td colspan="'.$this->num_roles.'" align="center" width="50%"><b>If my role in a artifact is:</b></td>
		    <td rowspan="2" width="50%"><b>&nbsp;&nbsp;&nbsp;I want to be notified when:</b></td>
		</tr>';
		
		for ($i=0; $i<$this->num_roles; $i++) {
		    echo '<td align="center" width="10%"><b>'.$this->arr_roles[$i]['short_description']."</b></td>\n";
		}
		echo "</tr>\n";
		
		for ($j=0; $j<$this->num_events; $j++) {
		    $event_id = $this->arr_events[$j]['event_id'];
		    $event_label = $this->arr_events[$j]['event_label'];
		    echo "<tr class=\"".util_get_alt_row_color($j)."\">\n";
		    for ($i=0; $i<$this->num_roles; $i++) {
				$role_id = $this->arr_roles[$i]['role_id'];
				$role_label = $this->arr_roles[$i]['role_label'];
				$cbox_name = 'cb_'.$role_id.'_'.$event_id;
				//echo "<BR>$role_label $role_id $event_label $event_id ".$arr_notif['$role_label']['$event_label'];
				if ( (($role_label == 'ASSIGNEE') && !user_ismember($group_id)) ||
				     (($event_label == 'NEW_ARTIFACT') && ($role_label != 'ASSIGNEE') && ($role_label != 'SUBMITTER')) ) {
				    // if the user is not a member then the ASSIGNEE column cannot
				    // be set. If it's not an assignee or a submitter the new_artifact event is meaningless
				    echo '   <td align="center"><input type="hidden" name="'.$cbox_name.'" value="1">-</td>'."\n";
				} else {
				    echo '   <td align="center"><input type="checkbox" name="'.$cbox_name.'" value="1" '.
					($arr_notif[$role_label][$event_label] ? 'checked':'')."></td>\n";
				}
		    }
		    echo '   <td>&nbsp;&nbsp;&nbsp;'.$this->arr_events[$j]['description']."</td>\n";
		    echo "</tr>\n";
		}
		
		echo'
		</table>
		
		<HR>
		<P align="center"><INPUT type="submit" name="submit" value="Submit Changes">
		</FORM>';
			
		
	}

	/**
	 *  Display the default value form
	 *
	 *  @param field_id: the field id to edit
	 *  @param default_value: the default value
	 *
	 *  @return void
	 */
	function displayDefaultValueForm($field_id,$default_value) {
		global $ath,$art_field_fact,$PHP_SELF;
		
		$field = $art_field_fact->getFieldFromId($field_id);
		if ( !$field ) {
			return;
		}

		echo '<h3>Define Default Value</h3>';
					
		echo '
	      <FORM ACTION="'.$PHP_SELF.'" METHOD="POST">
	      <INPUT TYPE="HIDDEN" NAME="func" VALUE="update_default_value">
	      <INPUT TYPE="HIDDEN" NAME="field_id" VALUE="'.$field_id.'">
	      <INPUT TYPE="HIDDEN" NAME="group_id" VALUE="'.$this->Group->getID().'">
	      <INPUT TYPE="HIDDEN" NAME="atid" VALUE="'.$this->getID().'">';

		if ( $field->isSelectBox() || $field->isMultiSelectBox() ) {
			echo 'Value: ';
			echo html_build_select_box ($field->getFieldValues($this->getID(),"'V','P'"),"default_value",$default_value);
		} else {
	      	echo 'Value: <INPUT TYPE="text" NAME="default_value" VALUE="'.$default_value.'">';
		}

		echo '
		<INPUT type="submit" name="submit" value="Update">
		</form><hr>';
	}

	/**
	 *  Get tha label for a code status
	 *
	 *  @param status: the code status
	 *
	 *  @return string
	 */
	function getLabelValueStatus($status) {
		switch ( $status ) {
		case "P":
			return "Permanent";
		case "V":
			return "Active";
		case "H":
			return "Hidden";
		default:
			return "Unknow status:".$status;
		}
	}

}

?>
