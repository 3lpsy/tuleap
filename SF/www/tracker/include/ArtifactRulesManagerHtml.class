<?php
//
// Copyright (c) Xerox Corporation, CodeX Team, 2001-2003. All rights reserved
//
// $Id$
//
//

require_once('common/tracker/ArtifactRulesManager.class');
require_once('ArtifactTypeHtml.class');
require_once('ArtifactRuleHtml.class');
require_once('ArtifactRuleJavascript.class');
$Language->loadLanguageMsg('tracker/tracker');

class ArtifactRulesManagerHtml extends ArtifactRulesManager {

    var $artifact_type;
    var $href;
    
	/**
	 *  ArtifactRulesManagerHtml() - constructor
	 *
	 *  @param $artifact_type object
	 */
	function ArtifactRulesManagerHtml(&$artifact_type_html, $href) {
		$this->ArtifactRulesManager();
        $this->artifact_type =& $artifact_type_html;
        $this->href          = $href;
	}
    
    function saveRule($source, $source_value, $target, $target_values) {
        parent::saveRule($this->artifact_type->getId(), $source, $source_value, $target, $target_values);
    }
    
    function displayRulesAsJavascript() {
        echo "\n//------------------------------------------------------\n";
        $art_field_fact =& new ArtifactFieldFactory($this->artifact_type);
        $used_fields = $art_field_fact->getAllUsedFields();
        foreach($used_fields as $field) {
            if ($field->isSelectBox() || $field->isSelectBox()) {
                $values = $field->getFieldValues ($this->artifact_type->getID(),"'A','P'");
                if (db_numrows($values) > 1) {
                    echo "fields['".$field->getID()."'] = new com.xerox.codex.tracker.Field('".$field->getID()."', '".$field->getLabel()."');\n";
                    $default_value = $field->getDefaultValue();
                    echo "options['".$field->getID()."'] = {};\n";
                    while ($row = db_fetch_array($values)) {
                        echo "options['". $field->getID() ."']['". $row['value_id'] ."'] = {option:new Option('". $row['value'] ."', '". $row['value_id'] ."'), selected:". ($row['value_id']==$default_value?'true':'false') ."};\n";
                    }
                }
            }
        }
        $rules = $this->getAllRulesByArtifactTypeWithOrder($this->artifact_type->getId());
        if ($rules && count($rules) > 0) {
            foreach ($rules as $key => $nop) {
                $html =& new ArtifactRuleJavascript($rules[$key]);
                echo 'rules_definitions['. $rules[$key]->id .'] = ';
                $html->display();
                echo ";\n";
            }
        }
        echo "\n//------------------------------------------------------\n";
    }
    
    function displayEditForm() {
        echo '<h3>'. $GLOBALS['Language']->getText('tracker_include_type','edit_rule') .'</h3>';
        echo '<noscript class="error">'. $GLOBALS['Language']->getText('tracker_dynamic_fields','noscript') .'</noscript>';
        echo '<form action="" method="post"><div id="edit_rule"></div>';
        echo '</form>';
        echo '<script type="text/javascript">'."\n";
        echo "//<![CDATA[\n";
        $this->displayRulesAsJavascript();
        
        echo "messages = {\n";
            echo "choose_field:       '". $GLOBALS['Language']->getText('tracker_include_type','choose_field') ."',\n";
            echo "if_then:            '". $GLOBALS['Language']->getText('tracker_include_type','if_then') ."',\n";
            echo "btn_save_rule:      '". $GLOBALS['Language']->getText('tracker_include_type','btn_save_rule') ."',\n";
            echo "delete_are_you_sure:'". $GLOBALS['Language']->getText('tracker_dynamic_fields','delete_are_you_sure') ."'";
        echo "};\n";
        echo 'buildAdminUI();';
        echo "\n//------------------------------------------------------\n";
        echo "\n".'//]]></script>';
        echo '</fieldset>';
    }
    
    function displayRules() {
        $this->_header();
        $rules = $this->getAllRulesByArtifactTypeWithOrder($this->artifact_type->getId());
        echo '<h3>'. $GLOBALS['Language']->getText('tracker_include_type','existing_rules') .'</h3>';
        if (!$rules || count($rules) == 0) {
            echo $GLOBALS['Language']->getText('tracker_dynamic_fields','no_dynamic_fields');
        } else {
            $if_then = explode('%', $GLOBALS['Language']->getText('tracker_include_type','if_then'));
            $titles = array();
            $titles[] = trim($if_then[0]).':&nbsp;';
            $titles[] = trim(substr($if_then[1], 1)).':&nbsp;';
            $titles[] = trim(substr($if_then[2], 1)).':&nbsp;';
            $titles[] = trim(substr($if_then[3], 1)).':&nbsp;';
            $titles[] = 'Actions';
            echo html_build_list_table_top($titles, false, false, false);
            $art_field_fact =& new ArtifactFieldFactory($this->artifact_type);
            $i = 0;
            foreach ($rules as $key => $nop) {
                $html =& new ArtifactRuleHtml($rules[$key], $art_field_fact, util_get_alt_row_color($i++), $this->href .'&edit=', $this->href .'&delete=');
                $html->display();
            }
            echo '</table>';
        }
        $this->displayEditForm();
        echo '<br />';
        $this->_footer();
    }
    
    function badRequest() {
        header("HTTP/1.1 400 Bad Request");
        $GLOBALS['feedback'] .= 'Bad Request';
        $this->_header();
        echo "The server is unable to process your request.";
        $this->_footer();
    }
    function _header() {
        $GLOBALS['HTML']->includeJavascriptFile("/include/scriptaculous/prototype.js");
        $GLOBALS['HTML']->includeJavascriptFile("/include/scriptaculous/scriptaculous.js");
        $GLOBALS['HTML']->includeJavascriptFile("/include/dynamicFields.js");
        
        $params = array();
        $params['title']   = $this->artifact_type->getName() .' '. $GLOBALS['Language']->getText('tracker_include_type','mng_dynamic_fields');
        $params['help']    = 'TrackerAdministration.html';
		$this->artifact_type->adminHeader($params);
        $this->artifact_type->displayAdminTitle($GLOBALS['Language']->getText('tracker_include_type','mng_dynamic_fields_title'));
    }
    
    function _footer() {
        $this->artifact_type->footer(array());
    }
}

?>
