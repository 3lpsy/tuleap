<?php
/* 
 * Copyright 2005, STMicroelectronics
 *
 * Originally written by Manuel Vacelet
 *
 * This file is a part of CodeX.
 *
 * CodeX is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * CodeX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CodeX; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

require_once('WikiActions.class');
require_once(dirname(__FILE__).'/../lib/WikiEntry.class');
require_once(dirname(__FILE__).'/../lib/WikiPage.class');
require_once(dirname(__FILE__).'/../lib/Wiki.class');

/**
 *
 * @package    WikiService
 * @subpackage WikiServiceAdmin
 * @copyright  STMicroelectronics, 2005
 * @author     Manuel Vacelet <manuel.vacelet-abecedaire@st.com>
 * @license    http://opensource.org/licenses/gpl-license.php GPL
 */
class WikiServiceAdminActions extends WikiActions {
  /**
   * @access private 
   * @var int 
   */ 
  var $gid;

  function WikiServiceAdminActions($id=0) {
    $this->gid = (int) $id;
  }

  function checkPage($page) {
    global $feedback;

    /**
     * Check if the given page name is not empty
     */
    if(empty($page)) {
      $feedback = 'ERROR: You try to create a Wiki Document but you didn\'t
                   select any page. You have to create a Wiki Page before 
                   creating a Wiki Document.';
      return false;
    }
    
    /**
     * Check if the page is a valid page.
     */
    $wp = new WikiPage($this->gid, $page);
    if(! $wp->exist()) {     
      $wpw = new WikiPageWrapper($this->gid);
      $wpw->addNewProjectPage($page);
    }

    return true;
  }


  /**
   *
   */
  function create() {    
    $page=$_POST['page'];
    if(!empty($_POST['upage'])) {
      $page=$_POST['upage'];
    }

    if($this->checkPage($page)) {

      $we = new WikiEntry();
      $we->setGid($this->gid);
      $we->setName($_POST['name']);
      $we->setPage($page);
      $we->setDesc($_POST['desc']);
      $we->setRank($_POST['rank']);
      $we->setLanguage_id($_POST['language_id']);
      
      $we->add();
    }
  }

  /**
   *
   */
  function delete() {
    $we = new WikiEntry();
    $we->setGid($this->gid);
    $we->setId($_REQUEST['id']);

    $we->del();
  }

  /**
   *
   */
  function update() {
    $page=$_POST['page'];
    if(!empty($_POST['upage'])) {
      $page=$_POST['upage'];
    }

    if($this->checkPage($page)) {
      $we = new WikiEntry();
      $we->setId($_POST['id']);
      $we->setGid($this->gid);
      $we->setName($_POST['name']);
      $we->setPage($page);
      $we->setDesc($_POST['desc']);
      $we->setRank($_POST['rank']);
      $we->setLanguage_id($_POST['language_id']);
   
      $we->update();
    }
  }

  /**
   *
   */
  function setWikiPerms() {
    global $feedback;

    $w = new Wiki($this->gid);
    if ($_POST['reset']) 
        $ret = $w->resetPermissions();
    else
        $ret = $w->setPermissions($_POST['ugroups']);
    if(!$ret)
      exit_error('Error','ERROR: could not update permissions: <p>'.$feedback.'</p>');
  }

  /**
   *
   */
  function setWikiPagePerms() {
    global $feedback;

    $wp = new WikiPage($_POST['object_id']);
    if ($_POST['reset']) 
        $ret = $wp->resetPermissions();
    else
        $ret = $wp->setPermissions($_POST['ugroups']);
    if(!$ret)
      exit_error('Error','ERROR: could not update permissions on this Wiki Page: <p>'.$feedback.'</p>');
  }
}
?>