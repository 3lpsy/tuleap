<?php
/**
 * ArtifactTypes.class - Class to handle artifact types
 *
 * SourceForge: Breaking Down the Barriers to Open Source Development
 * Copyright 1999-2001 (c) VA Linux Systems
 * http://sourceforge.net
 *
 * @version   $Id$
 *
 */
//require($DOCUMENT_ROOT.'/../common/include/Error.class');
//require($DOCUMENT_ROOT.'/../common/tracker/ArtifactType.class');
//require($DOCUMENT_ROOT.'/../common/tracker/ArtifactGroup.class');
//require($DOCUMENT_ROOT.'/../common/tracker/ArtifactCategory.class');

$LANG->loadLanguageMsg('tracker/tracker');

class ArtifactTypes extends Error {

	/** 
	 * The artifact type object.
	 *
	 * @var		object	$ArtifactType.
	 */
	var $Group; //group object

	/**
	 * Array of artifactTypes data.
	 *
	 * @var		array	$data_array.
	 */
	var $data_array;

	/**
	 *	ArtifactTypes - constructor.
	 *
	 *	@param	object	The Group object.
	 *	@return	boolean	success.
	 */
	function ArtifactTypes(&$Group) {
	  global $LANG;

		$this->Error();
		if (!$Group || !is_object($Group)) {
			$this->setError($LANG->getText('tracker_common_type','invalid'));
			return false;
		}
		if ($Group->isError()) {
			$this->setError('ArtifactType: '.$Group->getErrorMessage());
			return false;
		}
		$this->Group =& $Group;
		return true;
	}

	/**
	 *	createTrackers - creates all the standard trackers for a given Group.
	 *
	 *	@return	boolean	success.
	 */
	function createTrackers() {

		// first, check if trackers already exist
		$res=db_query("SELECT * FROM artifact_group_list 
			WHERE group_id='".$this->Group->getID()."' AND datatype > 0");
		if (db_numrows($res) > 0) {
			return true;
		}

		db_begin();
		if (!$this->createBugTracker()) {
			db_rollback();
			return false;
		} elseif (!$this->createSupportTracker()) {
			db_rollback();
			return false;
		} elseif (!$this->createPatchTracker()) {
			db_rollback();
			return false;
		} elseif (!$this->createFeatureTracker()) {
			db_rollback();
			return false;
		} else {
			db_commit();
			return true;
		}
	}

	/**
	 *	createBugTracker creates bug tracker.
	 *
	 *	@return	boolean	success.
	 *	@access private.
	 */
	function createBugTracker() {
	  global $LANG;

		$at=new ArtifactType($this->Group);
		if (!$at || !is_object($at)) {
			$this->setError($LANG->getText('tracker_common_types','err_create'));
			return false;
		} else {
			if ($at->create($LANG->getText('tracker_common_types','bugs'),$LANG->getText('tracker_common_types','bug_desc'),1,1,0,'',30,1,'','',1)) {
				//
				//	create a default category
				//	
				$ac=new ArtifactCategory($at);
				$ac->create($LANG->getText('tracker_common_types','bug_ex'),100);

				//
				//	create a default group
				//	
				$ag=new ArtifactGroup($at);
				$ag->create($LANG->getText('tracker_common_types','v1_ex'));
				return true;
			} else {
				$this->setError($LANG->getText('tracker_common_types','fail_bug',$at->getErrorMessage()));
				return false;
			}
		}	  
	}

	/**
	 *	createSupportTracker creates support tracker.
	 *
	 *	@return	boolean	success.
	 *	@access private.
	 */
	function createSupportTracker() {
	  global $LANG;

		$at=new ArtifactType($this->Group);
		if (!$at || !is_object($at)) {
			$this->setError($LANG->getText('tracker_common_types','err_sr'));
			return false;
		} else {
			if ($at->create($LANG->getText('tracker_common_types','sr'),$LANG->getText('tracker_common_types','sr_desc'),1,1,0,'',15,0,'','',2)) {
				//
				//  create a default category
				//  
				$ac=new ArtifactCategory($at);
				$ac->create($LANG->getText('tracker_common_types','sr_ex'),100);

				//
				//  create a default group
				//  
				$ag=new ArtifactGroup($at);
				$ag->create($LANG->getText('tracker_common_types','v1_ex'));
				return true;
			} else {
				$this->setError($LANG->getText('tracker_common_types','fail_sr',$at->getErrorMessage()));
				return false;
			}   
		}
	}

	/**
	 *	createPatchTracker creates patch tracker.
	 *
	 *	@return	boolean	success.
	 *	@access private.
	 */
	function createPatchTracker() {
	  global $LANG;

		//	
		//  Set up a patch tracker for this group
		//  
		$at=new ArtifactType($this->Group);
		if (!$at || !is_object($at)) {
			$this->setError($LANG->getText('tracker_common_types','err_patch'));
			return false;
		} else {
			if ($at->create($LANG->getText('tracker_common_types','patch'),$LANG->getText('tracker_common_types','patch_desc'),1,1,0,'',15,1,'','',3)) {
				//
				//  create a default category
				//
				$ac=new ArtifactCategory($at);
				$ac->create($LANG->getText('tracker_common_types','patch_ex1'),100);

				//  
				//  create a default group
				//
				$ag=new ArtifactGroup($at);
				$ag->create($LANG->getText('tracker_common_types','patch_ex2'));
				return true;
			} else {
				$this->setError($LANG->getText('tracker_common_types','fail_patch',$at->getErrorMessage()));
				return false;
			}
		}
	}

	/**
	 *	createFeatureTracker creates feature tracker.
	 *
	 *	@return	boolean	success.
	 *	@access private.
	 */
	function createFeatureTracker() {
	 global $LANG;
 
		//	
		//  Set up a feature request tracker for this group
		//	
		$at=new ArtifactType($this->Group);
		if (!$at || !is_object($at)) {
			$this->setError($LANG->getText('tracker_common_types','err_fr'));
			return false;
		} else {
			if ($at->create($LANG->getText('tracker_common_types','fr'),$LANG->getText('tracker_common_types','fr_desc'),1,1,0,'',45,0,'','',4)) {
				//
				//  create a default category
				//
				$ac=new ArtifactCategory($at);
				$ac->create($LANG->getText('tracker_common_types','fr_ex1'),100);

				//  
				//  create a default group
				//
				$ag=new ArtifactGroup($at);
				$ag->create($LANG->getText('tracker_common_types','fr_ex2');
				return true;
			} else {
				$this->setError($LANG->getText('tracker_common_types','fail_fr',$at->getErrorMessage()));
				return false;
			}
		}
	}

}

?>
