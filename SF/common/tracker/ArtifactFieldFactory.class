<?php
//
// Copyright (c) Xerox Corporation, CodeX Team, 2001-2003. All rights reserved
//
// $Id$
//
//  Parts of code come from bug_util.php (written by Laurent Julliard)
//
//  Written for CodeX by Stephane Bouhet
//

//require($DOCUMENT_ROOT.'/../common/include/Error.class');
//require($DOCUMENT_ROOT.'/../common/tracker/ArtifactField.class');

// Sort by place result
function cmp_place($field1, $field2) {
    if ($field1->getPlace() < $field2->getPlace())
		return -1;
    else if ($field1->getPlace() > $field2->getPlace())
		return 1;
    return 0;
}

class ArtifactFieldFactory extends Error {

	// The artifact type object
	var $ArtifactType;
	
	// The fields array indexed by name 
	var $USAGE_BY_NAME;

	// The fields array indexed by id 
	var $USAGE_BY_ID;

	/**
	 *  Constructor.
	 *
	 *  @param ArtifactType: the artifact type object
	 *	@return	boolean	success.
	 */
	function ArtifactFieldFactory(&$ArtifactType) {
		// Error constructor
		$this->Error();
		
		if (!$ArtifactType || !is_object($ArtifactType)) {
			$this->setError('No Valid ArtifactType Object');
			return false;
		}
		if ($ArtifactType->isError()) {
			$this->setError('ArtifactFieldFactory: '.$ArtifactType->getErrorMessage());
			return false;
		}
		
		$this->ArtifactType = $ArtifactType;
		
		$this->USAGE_BY_NAME = array();
		$this->USAGE_BY_ID = array();

		$this->fetchData($this->ArtifactType->getID());
		
		return true;
	}
	
	/**
	 *  Retrieve the fields associated with an artifact type
	 *
	 *  @param group_artifact_id: the artifact type id
	 *	@return	boolean	success.
	 */
	function fetchData($group_artifact_id) {
	    
	    $sql='SELECT af.field_id, field_name, display_type, data_type, '.
		'display_size,label, description,scope,required,empty_ok,keep_history,special, '.
		'value_function,'.
		'af.group_artifact_id, use_it,show_on_add,show_on_add_members, place '.
		'FROM artifact_field_usage afu, artifact_field af '.
		'WHERE afu.group_artifact_id='.$group_artifact_id.' '.
		'AND afu.field_id=af.field_id AND af.group_artifact_id='.$group_artifact_id;
		
		//echo $sql;
		
	    $res = db_query($sql);
	
	    // Now put all used fields in a global array for faster access
	    // Index both by field_name and field_id
	    while ($field_array = db_fetch_array($res)) {
	    	//echo $field_array['field_name']."<br>";
			$this->USAGE_BY_ID[$field_array['field_id']] = new ArtifactField();
			$obj = $this->USAGE_BY_ID[$field_array['field_id']];
			$obj->setFromArray($field_array);
			$this->USAGE_BY_ID[$field_array['field_id']] = $obj;
			
			$this->USAGE_BY_NAME[$field_array['field_name']] = new ArtifactField();
			$obj = $this->USAGE_BY_NAME[$field_array['field_name']];
			$obj->setFromArray($field_array);
			$this->USAGE_BY_NAME[$field_array['field_name']] = $obj;
	    }
		
	    // rewind internal pointer of global arrays
	    reset($this->USAGE_BY_ID);
	    reset($this->USAGE_BY_NAME);
	}
	
	/**
	 *  Get the field object using his name
	 *
	 *  @param field_name: the field name
	 *	@return	ArtifactField object
	 */
	function getFieldFromName($field_name) {
		$field = $this->USAGE_BY_NAME[$field_name];
		return $field;
	}

	/**
	 *  Get the field object using his id
	 *
	 *  @param field_id: the field id
	 *	@return	ArtifactField object
	 */
	function getFieldFromId($field_id) {
		$field = $this->USAGE_BY_ID[$field_id];
		return $field;
	}

	/**
	 *  Return all the fields used
	 *
	 *	@return	array
	 */
	function getAllUsedFields() {

		$result_fields = array();
		reset($this->USAGE_BY_NAME);
	
		while (list($key,$field) = each($this->USAGE_BY_NAME) ) {
			if ( $field->getUseIt() == 1 ) {
				$result_fields[$key] = $field;
			}
		}
		
		uasort($result_fields,cmp_place);
		return $result_fields;

	}

	/**
     * 
     *  Returns the list of field names in the HTML Form corresponding to a
     *  field used by this project
     *
	 *
	 *	@return	array
	 */
	function extractFieldList($post_method=true) {
	
	    global $HTTP_GET_VARS, $HTTP_POST_VARS;

	    $vfl = array();
	    if ($post_method) {
			reset($HTTP_POST_VARS);
			while ( list($key, $val) = each($HTTP_POST_VARS)) {
			    if (isset($this->USAGE_BY_NAME[$key])) {
					$vfl[$key] = $val;
					//echo "Accepted key = ".$key." val = $val<BR>";
			    } else {
					//echo "Rejected key = ".$key." val = $val<BR>";
			    }
			}
	    } else {
			reset($HTTP_GET_VARS);
			while ( list($key, $val) = each($HTTP_GET_VARS)) {
			    if (isset($this->USAGE_BY_NAME[$key])) {
					$vfl[$key] = $val;
					//echo "Accepted key = ".$key." val = $val<BR>";
			    } else {
					//echo "Rejected key = ".$key." val = $val<BR>";
			    }
			}
	
		}

	    return($vfl);
	}

	/**
     * 
	 *  Check whether empty values are allowed for the bug fields
	 *
	 *  @param field_array: associative array of field_name -> value
	 *
	 *	@return	boolean
	 */
	function checkEmptyFields($field_array) {
	    global $feedback;
	
	    $bad_fields = array();
	    reset($field_array);
	    while ( list($key, $val) = each($field_array)) {
	    	
	    	$field = $this->getFieldFromName($key);
	    	if ( $field ) {
				$is_empty = ($field->isSelectBox() ? ($val==100) : ($val==''));
				if ( $is_empty && !$field->isEmptyOk()) {
				    $bad_fields[] = $field->getLabel();
				}
			}
	    }
	
	    if (count($bad_fields) > 0) {
			$feedback = 'Missing fields: '.join(', ',$bad_fields).
			    '<p>Empty values for the above listed field(s) are not allowed. Click on the'.
			    'Back arrow of your browser and try again';
			return false;
	    } else {
			return true;
	    }
	
	}
	
}

?>
