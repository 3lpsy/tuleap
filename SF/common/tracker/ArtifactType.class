<?php
//
// Copyright (c) Xerox Corporation, CodeX Team, 2001-2003. All rights reserved
//
// $Id$
//
//
//	Originally by to the SourceForge Team,1999-2000
//
//  Written for CodeX by Stephane Bouhet
//

//require($DOCUMENT_ROOT.'/../common/include/Error.class');

class ArtifactType extends Error {

	/**
	 * The Group object.
	 *
	 * @var		object	$Group.
	 */
	var $Group; 

	/**
	 * Current user permissions.
	 *
	 * @var		int		$current_user_perm.
	 */
	var $current_user_perm;

	/**
	 * Technicians db resource ID.
	 *
	 * @var		int		$technicians_res.
	 */
	var $technicians_res;

	/**
	 * Canned responses resource ID.
	 *
	 * @var		int		$cannecresponses_res.
	 */
	var $cannedresponses_res;

	/**
	 * Array of artifact data.
	 *
	 * @var		array	$data_array.
	 */
	var $data_array;

	/**
	 * number of notification events
	 *
	 * @var		array	
	 */
	var $num_events = 0;

	/**
	 * Array of events
	 *
	 * @var		array	
	 */
	var $arr_events = array();

	/**
	 * number of roles
	 *
	 * @var		array	
	 */
	var $num_roles = 0;

	/**
	 * Array of roles
	 *
	 * @var		array	
	 */
	var $arr_roles = array();

	/**
	 *	ArtifactType - constructor.
	 *
	 *	@param	object	The Group object.
	 *	@param	int		The id # assigned to this artifact type in the db.
	 *  @param	array	The associative array of data.
	 *	@return boolean	success.
	 */
	function ArtifactType(&$Group,$artifact_type_id=false, $arr=false) {
		$this->Error();
		if (!$Group || !is_object($Group)) {
			$this->setError('No Valid Group Object');
			return false;
		}
		if ($Group->isError()) {
			$this->setError('ArtifactType: '.$Group->getErrorMessage());
			return false;
		}
		
		$this->Group = $Group;
		if ($artifact_type_id) {
			$res_events = $this->getNotificationEvents($artifact_type_id);
			$this->num_events = db_numrows($res_events);
			$i=0;
			while ($arr_events = db_fetch_array($res_events)) {
    				$this->arr_events[$i] = $arr_events; $i++;
			}

			$res_roles = $this->getNotificationRoles($artifact_type_id);
			$this->num_roles = db_numrows($res_roles);
			$i=0;
			while ($arr_roles = db_fetch_array($res_roles)) {
    				$this->arr_roles[$i] = $arr_roles; $i++;
			}

			if (!$arr || !is_array($arr)) {
				if (!$this->fetchData($artifact_type_id)) {
					return false;
				}
			} else {
				$this->data_array = $arr;
				if ($this->data_array['group_id'] != $this->Group->getID()) {
					$this->setError('Group_id in db result does not match Group Object');
					$this->data_array = null;
					return false;
				}
			}
			if (!$this->isPublic()) {
			        if ( (!$this->userIsAdmin()) || (!$this->userIsTech()) ) {
	                		$this->setError('Permission Denied');
					$this->data_array = null;
	                		return false;
				}
			}
		}
		
		unset($this->technicians_res);
		unset($this->current_user_perm);
		unset($this->cannedresponses_res);
	}

	/**
	 *	Create user permissions: Tech Only for group members and Tech & Admin for group admin
	 *
	 *	@param	atid: the artfact type id 
	 *
	 *	@return boolean
	 */
	function createUserPerms($atid) {
		
		$sql = "SELECT "
			. "user.user_id AS user_id, "
			. "user_group.admin_flags "
			. "FROM user,user_group WHERE "
			. "user.user_id=user_group.user_id AND user_group.group_id=".$this->Group->getID();
		$res = db_query($sql);
		
		while ($row = db_fetch_array($res)) {
			if ( $row['admin_flags'] == "A" ) {
				// Admin user
				$perm = 2;
					
			} else {
				// Standard user
				$perm = 1;
			}

			if ( !$this->addUser($row['user_id'],$perm) ) {
				$this->setError("Fail to create user permission:".$this->getErrorMessage());
				return false;
			}
		}
		
		return true;

	}

	/**
	 *	create - use this to create a new ArtifactType in the database.
	 *
	 *  @param  group_id: the group id of the new tracker
	 *	@param	group_id_template: the template group id (used for the copy)
	 *	@param	atid_template: the template artfact type id 
	 *	@param	name: the name of the new tracker
	 *	@param	description: the description of the new tracker
	 *	@param	itemname: the itemname of the new tracker
	 *	@return id on success, false on failure.
	 */
	function create($group_id,$group_id_template,$atid_template,$name,$description,$itemname) {
		global $feedback,$ath;

		if (!$name || !$description || !$itemname || trim($name) == "" || trim($description) == "" || trim($itemname) == ""  ) {
			$this->setError('ArtifactType: Name, Description, and Short Name are required and not empty.');
			return false;
		}

		//	get the template Group object
		$group = group_get_object($group_id_template);
		if (!$group || !is_object($group) || $group->isError()) {
			$this->setError('ArtifactType: Invalid group_id_template');
		}

		// We retrieve public and anonymous submission from the template
		$at_template = new ArtifactType($group,$atid_template);
		
		// First, we create a new ArtifactType into artifact_group_list
		
		$sql="INSERT INTO 
			artifact_group_list 
			(group_id,
			name,
			description,
			item_name,
			is_public,
			allow_anon) 
			VALUES 
			('". $group_id ."',
			'". addslashes($name) ."',
			'". addslashes($description) ."',
			'". addslashes($itemname) ."',
			".$at_template->isPublic().",".$at_template->allowsAnon().")";
		//echo $sql;
		$res = db_query($sql);
		if (!$res || db_affected_rows($res) <= 0) {
			$this->setError('ArtifactType: '.db_error());
			return false;
		} else {
			$id = db_insertid($res,'artifact_group_list','group_artifact_id');
			if (!$this->fetchData($id)) {
				$this->setError('ArtifactType: failed to load the new tracker');
				return false;
			} else {
				// Create field factory
				$art_field_fact = new ArtifactFieldFactory($ath);

				// Then copy all the fields informations
				if ( !$art_field_fact->copyFields($atid_template,$id) ) {
					$this->setError('ArtifactType: '.$art_field_fact->getErrorMessage());
					return false;
				}
				
				// Then copy all the reports informations
				// Create field factory
				$art_report_fact = new ArtifactReportFactory();

				if ( !$art_report_fact->copyReports($atid_template,$id) ) {
					$this->setError('ArtifactType: '.$art_report_fact->getErrorMessage());
					return false;
				}

				// Copy artifact_notification_event and artifact_notification_role
				if ( !$this->copyNotificationEvent($id) ) {
					return false;
				}
				if ( !$this->copyNotificationRole($id) ) {
					return false;
				}
				
				// Create user permissions: Tech Only for group members and Tech & Admin for group admin
				if ( !$this->createUserPerms($id) ) {
					return false;
				}
		
				return $id;
			}
		}
	}
	

	/**
	 *  fetch the notification roles for this ArtifactType from the database.
	 *
	 *  @param	int		The artifact type ID.
	 *  @return query result.
	 */
	function getNotificationRoles($artifact_type_id) {
	    $sql = 'SELECT * FROM artifact_notification_role WHERE group_artifact_id='.$artifact_type_id.' ORDER BY rank ASC;';
	    //$sql = 'SELECT * FROM artifact_notification_role_default ORDER BY rank ASC;';
	    //echo $sql.'<br>';
	    return db_query($sql);
	}

	/**
	 *  fetch the notification events for this ArtifactType from the database.
	 *
	 *  @param	int		The artifact type ID.
	 *  @return query result.
	 */
	function getNotificationEvents($artifact_type_id) {
	    $sql = 'SELECT * FROM artifact_notification_event WHERE group_artifact_id='.$artifact_type_id.' ORDER BY rank ASC;';
	    //$sql = 'SELECT * FROM artifact_notification_event_default ORDER BY rank ASC;';
	    //echo $sql.'<br>';
		return db_query($sql);
	}

	/**
	 *  fetchData - re-fetch the data for this ArtifactType from the database.
	 *
	 *  @param	int		The artifact type ID.
	 *  @return boolean	success.
	 */
	function fetchData($artifact_type_id) {
		$sql = "SELECT * FROM artifact_group_list
			WHERE group_artifact_id='$artifact_type_id' 
			AND group_id='". $this->Group->getID() ."'";
		$res=db_query($sql);
		if (!$res || db_numrows($res) < 1) {
			$this->setError('ArtifactType: Invalid ArtifactTypeID');
			return false;
		}
		$this->data_array = db_fetch_array($res);
		db_free_result($res);
		return true;
	}

	/**
	 *	  getGroup - get the Group object this ArtifactType is associated with.
	 *
	 *	  @return	Object	The Group object.
	 */
	function getGroup() {
		return $this->Group;
	}

	/**
	 *	  getID - get this ArtifactTypeID.
	 *
	 *	  @return	int	The group_artifact_id #.
	 */
	function getID() {
		return $this->data_array['group_artifact_id'];
	}

	/**
	 *	  getOpenCount - get the count of open tracker items in this tracker type.
	 *
	 *	  @return	int	The count.
	 */
	function getOpenCount() {
		return $this->data_array['open_count'];
	}

	/**
	 *	  getTotalCount - get the total number of tracker items in this tracker type.
	 *
	 *	  @return	int	The total count.
	 */
	function getTotalCount() {
		return $this->data_array['count'];
	}

	/**
	 *	  allowsAnon - determine if non-logged-in users can post.
	 *
	 *	  @return	boolean	allow_anonymous_submissions.
	 */
	function allowsAnon() {
		return $this->data_array['allow_anon'];
	}

	/**
	 *	  emailAll - determine if we're supposed to email on every event.
	 *
	 *	  @return	boolean	email_all.
	 */
	function emailAll() {
		return $this->data_array['email_all_updates'];
	}

	/**
	 *	  emailAddress - defined email address to send events to.
	 *
	 *	  @return	string	email.
	 */
	function getEmailAddress() {
		return $this->data_array['email_address'];
	}

	/**
	 *	  getSubmitInstructions - get the free-form string strings.
	 *
	 *	  @return	string	instructions.
	 */
	function getSubmitInstructions() {
		return $this->data_array['submit_instructions'];
	}

	/**
	 *	  getBrowseInstructions - get the free-form string strings.
	 *
	 *	  @return string instructions.
	 */
	function getBrowseInstructions() {
		return $this->data_array['browse_instructions'];
	}

	/**
	 *	  isPublic - whether non-group-members can view.
	 *
	 *	  @return boolean	is_public.
	 */
	function isPublic() {
		return $this->data_array['is_public'];
	}

	/**
	 *	  getName - the name of this ArtifactType.
	 *
	 *	  @return	string	name.
	 */
	function getName() {
		return $this->data_array['name'];
	}

	/**
	 *	  getItemName - the item name of this ArtifactType.
	 *
	 *	  @return	string	name.
	 */
	function getItemName() {
		return $this->data_array['item_name'];
	}

	/**
	 *	  getCapsItemName - the item name of this ArtifactType with the first letter in caps.
	 *
	 *	  @return	string	name.
	 */
	function getCapsItemName() {
		return strtoupper(substr($this->data_array['item_name'],0,1)).substr($this->data_array['item_name'],1);
	}

	/**
	 *	  getDescription - the description of this ArtifactType.
	 *
	 *	  @return	string	description.
	 */
	function getDescription() {
		return $this->data_array['description'];
	}

	/**
	 *	  this tracker is not deleted
	 *
	 *	  @return boolean.
	 */
	function isValid() {
		return ($this->data_array['status'] == 'A');
	}


	/**
	 *	getTechnicians - returns a result set of technicians.
	 *
	 *	@return database result set.
	 */
	function getTechnicians() {
		global $display_debug;

		if (!isset($this->technicians_res)) {
			$sql="SELECT user.user_id, user.user_name ". 
			     "FROM artifact_perm ap, user ".
			     "WHERE (user.user_id = ap.user_id) and ".
			     "group_artifact_id=". $this->getID()." ".
			     "AND perm_level in (1,2)";
			//echo "sql=$sql<br>";
			$this->technicians_res = db_query($sql);
			
			if ( $display_debug ) {
				$rows = db_numrows($this->technicians_res);
				echo "<DBG:ArtifactType.getTechnicians>sql=".$sql."<br>";
				for($i=0;$i<$rows;$i++) {
					echo db_result($this->technicians_res, $i, 'user_name')."<br>";
				}
			}
		}
		return $this->technicians_res;
	}

	/**
	 *	getCannedResponses - returns a result set of canned responses.
	 *
	 *	@return database result set.
	 */
	function getCannedResponses() {
		if (!isset($this->cannedresponses_res)) {
			$sql="SELECT artifact_canned_id,title,body
				FROM artifact_canned_responses 
				WHERE group_artifact_id='". $this->getID() ."'";
			//echo $sql;
			$this->cannedresponses_res = db_query($sql);
		}
		return $this->cannedresponses_res;
	}

	/**
	 *	addUser - add a user to this ArtifactType - depends on UNIQUE INDEX preventing duplicates.
	 *
	 *	@param	int		user_id of the new user.
	 *  @param  value: the value permission
	 *
	 *	@return boolean	success.
	 */
	function addUser($id,$value) {
		if (!$this->userIsAdmin()) {
			$this->setError('Permission Denied');
			return false;
		}
		if (!$id) {
			$this->setError('Missing Params');
			return false;
		}
		$sql="INSERT INTO artifact_perm (group_artifact_id,user_id,perm_level) 
			VALUES ('".$this->getID()."','$id',$value)";
		$result=db_query($sql);
		if ($result && db_affected_rows($result) > 0) {
			return true;
		} else {
			$this->setError(db_error());
			return false;
		}
	}

	/**
	 *	existUser - check if a user is already in the project permissions
	 *
	 *	@param	int		user_id of the new user.
	 *	@return boolean	success.
	 */
	function existUser($id) {
		if (!$id) {
			$this->setError('Missing Params');
			return false;
		}
		$sql="SELECT * FROM artifact_perm WHERE user_id=$id AND group_artifact_id=".$this->getID();
		$result=db_query($sql);
		if (db_numrows($result) > 0) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 *	updateUser - update a user's permissions.
	 *
	 *	@param	int		user_id of the user to update.
	 *	@param	int		(1) tech only, (2) admin & tech (3) admin only.
	 *	@return boolean	success.
	 */
	function updateUser($id,$perm_level) {
		if (!$this->userIsAdmin()) {
			$this->setError('Permission Denied');
			return false;
		}
		if (!$id) {
			$this->setError('Missing Params: '.$id.'|'.$perm_level);
			return false;
		}
		$sql="UPDATE artifact_perm SET perm_level='$perm_level'
			WHERE user_id='$id' AND group_artifact_id='".$this->getID()."'";
		$result=db_query($sql);
		if ($result) {
			return true;
		} else {
			$this->setError(db_error());
			return false;
		}
	}

	/**
	 *	deleteUser - delete a user's permissions.
	 *
	 *	@param	int		user_id of the user who's permissions to delete.
	 *	@return boolean	success.
	 */
	function deleteUser($id) {
		if (!$this->userIsAdmin()) {
			$this->setError('Permission Denied');
			return false;
		}
		if (!$id) {
			$this->setError('Missing Params');
			return false;
		}
		$sql="DELETE FROM artifact_perm
			WHERE user_id='$id' AND group_artifact_id='".$this->getID()."'";
		$result=db_query($sql);
		if ($result) {
			return true;
		} else {
			$this->setError(db_error());
			return false;
		}
	}

	/**
	 *	preDelete - Mark this for deletion.
	 *
	 *	@return boolean	success.
	 */
	function preDelete() {
		if (!$this->userIsAdmin()) {
			$this->setError('Permission Denied');
			return false;
		}
		$date = (time() + 1000000); // 12 days of delay
		$sql="update artifact_group_list SET status='D', deletion_date='$date'
			WHERE group_artifact_id='".$this->getID()."'";
		$result=db_query($sql);
		if ($result) {
			return true;
		} else {
			$this->setError(db_error());
			return false;
		}
	}

	/**
	 *	delay - change date for deletion.
	 *
	 *	@return boolean	success.
	 */
	function delay($date) {
		global $sys_datefmt;
		if (!$this->userIsAdmin()) {
			$this->setError('Permission Denied');
			return false;		
		}
		$keywords = preg_split("/-/", $date);
		$ts = mktime("23", "59", "59", $keywords[1], $keywords[2], $keywords[0]);
		if (time() > $ts) {
		 	$this->setError('Delay date must not be in the past');
			return false;
		}
		$sql="update artifact_group_list SET deletion_date='$ts'
			WHERE group_artifact_id='".$this->getID()."'";
		$result=db_query($sql);
		if ($result) {
			return true;
		} else {
			$this->setError(db_error());
			return false;
		}
	}

	/**
	 *	restore - Unmark this for deletion.
	 *
	 *	@return boolean	success.
	 */
	function restore() {
		if (!$this->userIsAdmin()) {
			$this->setError('Permission Denied');
			return false;
		}
		$sql="update artifact_group_list SET status='A'
			WHERE group_artifact_id='".$this->getID()."'";
		$result=db_query($sql);
		if ($result) {
			return true;
		} else {
			$this->setError(db_error());
			return false;
		}
	}

	/**
	 *	updateUsers - update the user's permissions.
	 *
	 *  @param atid: the group artifact id
	 *	@param array: the array which contains the user permissions.
	 *	@return boolean	success.
	 */
	function updateUsers($atid,$user_name) {

	    $result=$this->getUsersPerm($this->getID());
	    $rows=db_numrows($result);
	
	    if ( ($rows > 0)&&(is_array($user_name)) ) {

			$update_error = "";
				
			for ($i=0; $i < $rows; $i++) {
				$user_id = db_result($result, $i, 'user_id');
				$sql = "update artifact_perm set perm_level = ".$user_name[$i]." where ";
				$sql .= "group_artifact_id = ".$atid." and user_id = ".$user_id;
				//echo $sql."<br>";
				$result2=db_query($sql);
				if (!$result2) {
					$update_error .= " Error during updating user permission - user_id=".$user_id." - ".db_error();
				}
				
			}
			
			if ($update_error) {
				$this->setError($update_error);
				return false;
			} else {
				return true;
			}
		}
		
		return false;
	}

	/*

		USER PERMISSION FUNCTIONS

	*/

	/**
	 *	  userCanView - determine if the user can view this artifact type.
	 *
	 *	  @return boolean	user_can_view.
	 */
	function userCanView() {
		if ($this->isPublic()) {
			return true;
		} else {
			if (!user_isloggedin()) {
				return false;
			} else {
				return ( ($this->getCurrentUserPerm() != 0)||(user_is_super_user) );
			}
		}
	}

	/**
	 *	userIsAdmin - see if the logged-in user's perms are >= 2 or project admin.
	 *
	 *	@return boolean
	 */
	function userIsAdmin() { 

		if ( ($this->getCurrentUserPerm() >= 2) || (user_ismember($this->Group->getID(),'A')) ) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 *	userIsTech - see if the logged-in user's perms are 1,2 or project admin.
	 *
	 *	@return boolean
	 */
	function userIsTech() { 
		if ( ($this->getCurrentUserPerm() == 1) || ($this->getCurrentUserPerm() == 2) || (user_ismember($this->Group->getID(),'A')) ) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 *	getCurrentUserPerm - get the logged-in user's perms from artifact_perm.
	 *
	 *	@return int perm level for the logged-in user.
	 */
	function getCurrentUserPerm() {
		if (!user_isloggedin()) {
			return 0;
		} else {
			if (!isset($this->current_user_perm)) {
				$sql="select perm_level
				FROM artifact_perm
				WHERE group_artifact_id='". $this->getID() ."'
				AND user_id='".user_getid()."'";
				//echo $sql;
				$this->current_user_perm=db_result(db_query($sql),0,0);
			}
			return $this->current_user_perm;
		}
	}

	/**
	 *	getUserPerm - get a user's perms from artifact_perm.
	 *
	 *	@return int perm level for a user.
	 */
	function getUserPerm($user_id) {
		$sql="select perm_level
		FROM artifact_perm
		WHERE group_artifact_id='". $this->getID() ."'
		AND user_id='".$user_id."'";
		//echo $sql."<br>";
		return db_result(db_query($sql),0,0);
	}

	/**
	 *  update - use this to update this ArtifactType in the database.
	 *
	 *  @param	string	The item name.
	 *  @param	string	The item description.
	 *  @param	bool	(1) true (0) false - viewable by general public.
	 *  @param	bool	(1) true (0) false - whether non-logged-in users can submit.
	 *  @param	int		Days before this item is considered overdue.
	 *  @param	int		Days before stale items time out.
	 *  @param	bool	(1) true (0) false - whether the resolution box should be shown.
	 *  @param	string	Free-form string that project admins can place on the submit page.
	 *  @param	string	Free-form string that project admins can place on the browse page.
	 *  @return true on success, false on failure.
	 */
	function update($name,$description,$itemname,$is_public,$allow_anon,
		            $submit_instructions,$browse_instructions) {

		if ( !$this->userIsAdmin() ) {
			$this->setError('ArtifactType: Permission Denied');
			return false;
		}
		
		if (!$name || !$description || !$itemname || trim($name) == "" || trim($description) == "" || trim($itemname) == ""  ) {
			$this->setError('ArtifactType: Name, Description, and Short Name are required and not empty');
			return false;
		}
		
		$allow_anon = ((!$allow_anon) ? 0 : $allow_anon); 
		$is_public = ((!$is_public) ? 0 : $is_public); 

		$sql="UPDATE artifact_group_list SET 
			name='$name',
			description='". htmlspecialchars($description) ."',
			item_name='$itemname',
			is_public='$is_public',
			allow_anon='$allow_anon',
			submit_instructions='$submit_instructions',
			browse_instructions='$browse_instructions'
			WHERE 
			group_artifact_id='". $this->getID() ."' 
			AND group_id='". $this->Group->getID() ."'";

		//echo $sql;
		
		$res=db_query($sql);
		if (!$res) {
			$this->setError('ArtifactType::Update(): '.db_error());
			return false;
		} else {
			$this->fetchData($this->getID());
			return true;
		}
	}
	/**
	 *  updateNotificationSettings - use this to update this ArtifactType in the database.
	 *
	 *  @param	bool	(1) true (0) false - whether to email on all updates.
	 *  @param	string	The address to send new entries and updates to.
	 *  @param	int	uid the user to set watches on
	 *  @param	string	the list of users to watch
	 *  @param	string	the list of watching users
	 *  @return true on success, false on failure.
	 */
	function updateNotificationSettings($email_all,$email_address,$user_id, $watchees) {

		if ($email_address && !validate_emails($email_address)) {
			$email_address='';
		}
		if ($email_all && !$email_address) {
			$email_all=0;
		}

		$email_all = ((!$email_all) ? 0 : $email_all); 
		$sql="UPDATE artifact_group_list SET 
			email_all_updates='$email_all',
			email_address='$email_address' 
			WHERE 
			group_artifact_id='".$this->getID()."' 
			AND group_id='".$this->Group->getID()."'";

		$res=db_query($sql);
		//echo $sql."<br>";
		if (!$res ) {
			$this->setError('ArtifactType::Update(): '.db_error());
			return false;
		} else {
			// set watchees 
			$this->setWatchees($user_id, $watchees);
			
			$this->fetchData($this->getID());
			return true;
		}
	}

	function deleteWatchees($user_id) {

    		$sql = "DELETE FROM artifact_watcher WHERE user_id='$user_id' AND artifact_group_id='".$this->getID()."'";
		//echo $sql."<br>";
    		return db_query($sql);
	}
	
	function getWatchees($user_id) {
	    $sql = "SELECT watchee_id FROM artifact_watcher WHERE user_id='$user_id' AND artifact_group_id=".$this->getID();
		//echo $sql."<br>";
	    return db_query($sql);    
	}
	
	function setWatchees($user_id, $watchees) {
		//echo "setWatchees($user_id, $watchees)<br>";
		if ($watchees) {
			//echo "watchees";
   			$res_watch = true;
			$watchees = preg_replace("/\s+/","",$watchees);
 			$arr_user_names = split(',',$watchees);
			$arr_user_ids = array();
			while (list(,$user_name) = each($arr_user_names)) {
			    $res = user_get_result_set_from_unix($user_name);
			    if (!$res || (db_numrows($res) <= 0)) {
				// user doesn;t exist  so abort this step and give feedback
				$this->setError(" - Error Invalid user name '$user_name'");
				$res_watch = false;
				continue;
			    } else {
				// store in a hash to eliminate duplicates. skip user itself
				if (db_result($res,0,'user_id') != $user_id)
				    $arr_user_ids[db_result($res,0,'user_id')] = 1;
			    }
			}
			
			if ($res_watch) {
			    $this->deleteWatchees($user_id); 
			    $arr_watchees = array_keys($arr_user_ids);
			    $sql = 'INSERT INTO artifact_watcher (artifact_group_id, user_id,watchee_id) VALUES ';
    			    $num_watchees = count($arr_watchees);
    			    for ($i=0; $i<$num_watchees; $i++) {
				$sql .= "('".$this->getID()."','$user_id','".$arr_watchees[$i]."'),";
    			    } 
    			$sql = substr($sql,0,-1); // remove extra comma at the end 
			//echo $sql."<br>";
    			return db_query($sql);

			}   
		} else 
			$this->deleteWatchees($user_id);	
	}
	
	function getWatchers($user_id) {
	    $sql = "SELECT user_id FROM artifact_watcher WHERE watchee_id='$user_id' AND artifact_group_id='$this->getID()'";
	    return db_query($sql);    
	}
	
	function deleteNotification($user_id) {
	    $sql = "DELETE FROM artifact_notification WHERE user_id='$user_id' AND group_artifact_id='".$this->getID()."'";
	    //echo $sql."<br>";
	    return db_query($sql);
	}

	function setNotification($user_id,$arr_notification) {
	    $sql = 'INSERT INTO artifact_notification (group_artifact_id, user_id,role_id,event_id,notify) VALUES ';
	
	    for ($i=0; $i<$this->num_roles; $i++) {
			$role_id = $this->arr_roles[$i]['role_id'];
			for ($j=0; $j<$this->num_events; $j++) { 
			$event_id = $this->arr_events[$j]['event_id'];
			$sql .= "('".$this->getID()."','$user_id','$role_id','$event_id','".$arr_notification[$role_id][$event_id]."'),"; 
			} 
		} 
		$sql = substr($sql,0,-1); // remove extra comma at the end 
		//echo $sql."<br>";
		return db_query($sql); 
	}
	
	//
	// People who are project members
	function getGroupMembers () {
		$group_id = $this->Group->getID();
		$sql="SELECT user.user_id,user.user_name ".
			"FROM user,user_group ".
			"WHERE (user.user_id=user_group.user_id ".
			"AND user_group.group_id='$group_id') ".
			"ORDER BY user.user_name";
		return db_query($sql);
	}
	
	// People who have once submitted a bug
	function getSubmitters () {
		$group_id = $this->Group->getID();
		$sql="SELECT DISTINCT user.user_id,user.user_name ".
			"FROM user,artifact ".
			"WHERE (user.user_id=artifact.submitted_by ".
			"AND artifact.group_id='$group_id') ".
			"ORDER BY user.user_name";
		return db_query($sql);
	}
		
	//
	// People who are project admins
	function getGroupAdmins () {
		$group_id = $this->Group->getID();
		$sql="SELECT user.user_id,user.user_name ".
			"FROM user,user_group ".
			"WHERE (user.user_id=user_group.user_id ".
			"AND user_group.group_id='$group_id') OR user.user_id=100 ".
		        "AND user_group.admin_flags = 'A' ".
			"ORDER BY user.user_name";
		return db_query($sql);
	}

	function getUsersPerm($group_artifact_id) {
		$sql="SELECT u.user_id,u.user_name,au.perm_level ".
			"FROM user u,artifact_perm au ".
			"WHERE u.user_id=au.user_id AND au.group_artifact_id=".$group_artifact_id." ".
			"ORDER BY u.user_name";
		//echo $sql;
		return db_query($sql);
	}

	/**
	 * Copy notification event from default
	 *
	 * @param group_artifact_id: the destination artifact type id
	 *
	 * @return boolean
	 */
	function copyNotificationEvent($group_artifact_id) {
		$sql = "insert into artifact_notification_event ".
			   "select event_id,".$group_artifact_id.",event_label ,short_description,description,rank ".
			   "from artifact_notification_event_default";
			   
		$res_insert = db_query($sql);
		
		if (!$res_insert || db_affected_rows($res_insert) <= 0) {
			$this->setError("Fail to copy notification event");
			return false;
		}
		
		return true;
	}

	/**
	 * Copy notification role from default
	 *
	 * @param group_artifact_id: the destination artifact type id
	 *
	 * @return boolean
	 */
	function copyNotificationRole($group_artifact_id) {
		$sql = "insert into artifact_notification_role ".
			   "select role_id,".$group_artifact_id.",role_label  ,short_description,description,rank ".
			   "from artifact_notification_role_default";
			   
		$res_insert = db_query($sql);
		
		if (!$res_insert || db_affected_rows($res_insert) <= 0) {
			$this->setError("Fail to copy notification role");
			return false;
		}
		
		return true;
	}
 
	/**
	 *
	 * Get artifacts by age
	 *
	 * @return boolean
	 */
	function getOpenArtifactsByAge() {
		$time_now=time();
		//			echo $time_now."<P>";
		
		for ($counter=1; $counter<=8; $counter++) {
		
			$start=($time_now-($counter*604800));
			$end=($time_now-(($counter-1)*604800));
			
			$sql="SELECT count(*) FROM artifact WHERE open_date >= $start AND open_date <= $end AND status_id = '1' AND group_artifact_id='".$this->getID()."'";
			
			$result = db_query($sql);
			
			$names[$counter-1]=format_date("m/d/y",($start))." to ".format_date("m/d/y",($end));
			if (db_numrows($result) > 0) {
				$values[$counter-1]=db_result($result, 0,0);
			} else {
				$values[$counter-1]='0';
			}
		}
		
		$results['names'] = $names;
		$results['values'] = $values;
		
		return $results;
	
	}
	
	/**
	 *
	 * Get artifacts by age
	 *
	 * @return boolean
	 */
	function getArtifactsByAge() {
		$time_now=time();
		
		for ($counter=1; $counter<=8; $counter++) {
		
			$start=($time_now-($counter*604800));
			$end=($time_now-(($counter-1)*604800));
			
			$sql="SELECT avg((close_date-open_date)/86400) FROM artifact WHERE close_date > 0 AND (open_date >= $start AND open_date <= $end) AND status_id <> '1' AND group_artifact_id='".$this->getID()."'";
			
			$result = db_query($sql);
			$names[$counter-1]=format_date("m/d/y",($start))." to ".format_date("m/d/y",($end));		
			if (db_numrows($result) > 0) {
				$values[$counter-1]=db_result($result, 0,0);
			} else {
				$values[$counter-1]='0';
			}
		}
		
		$results['names'] = $names;
		$results['values'] = $values;
		
		return $results;
		
	}
	
	/**
	 *
	 * Get artifacts grouped by standard field
	 *
	 * @return boolean
	 */
	function getArtifactsBy($field) {
	
		$sql="SELECT ".$field->getName().", count(*) AS Count FROM artifact ".
		" WHERE  artifact.group_artifact_id=".$this->getID().
		" GROUP BY ".$field->getName();
		
		$result=db_query($sql);
		if ($result && db_numrows($result) > 0) {
			for ($j=0; $j<db_numrows($result); $j++) {
				if ( $field->isSelectBox() || $field->isMultiSelectBox() ) {
					$labelValue = $field->getLabelValues($this->getID(), array(db_result($result, $j, 0)));
					$names[$j] = $labelValue[0];
				} else {
					$names[$j] = db_result($result, $j, 0);
				}
				$values[$j]= db_result($result, $j, 1);
			}
		}
		
		$results['names'] = $names;
		$results['values'] = $values;
		
		return $results;
	}
	
	/**
	 *
	 * Get open artifacts grouped by standard field
	 *
	 * @return boolean
	 */
	function getOpenArtifactsBy($field) {
	
		$sql="SELECT ".$field->getName().", count(*) AS Count FROM artifact ".
		" WHERE artifact.group_artifact_id='".$this->getID()."' ".
		" AND artifact.status_id=1".
		" GROUP BY ".$field->getName();
				
		$result = db_query($sql);
		if ($result && db_numrows($result) > 0) {
			for ($j=0; $j<db_numrows($result); $j++) {
				if ( $field->isSelectBox() || $field->isMultiSelectBox() ) {
					$labelValue = $field->getLabelValues($this->getID(), array(db_result($result, $j, 0)));
					$names[$j] = $labelValue[0];
				} else {
					$names[$j] = db_result($result, $j, 0);
				}
				$values[$j]= db_result($result, $j, 1);
			}
		}
		
		$results['names'] = $names;
		$results['values'] = $values;
		
		return $results;
	}
	
	/**
	 *
	 * Get artifacts grouped by field
	 *
	 * @return boolean
	 */
	function getArtifactsByField($field) {
	
		$sql="SELECT ".$field->getValueFieldName().", count(*) AS Count FROM artifact_field_value, artifact ".
		    " WHERE  artifact.group_artifact_id='".$this->getID()."' ".
		    " AND artifact_field_value.artifact_id=artifact.artifact_id".
		    " AND artifact_field_value.field_id=".$field->getID().
		    " GROUP BY ".$field->getValueFieldName();
		
		$result = db_query($sql);
		if ($result && db_numrows($result) > 0) {
			for ($j=0; $j<db_numrows($result); $j++) {
				if ( $field->isSelectBox() || $field->isMultiSelectBox() ) {
					$labelValue = $field->getLabelValues($this->getID(), array(db_result($result, $j, 0)));
					$names[$j] = $labelValue[0];
				} else {
					$names[$j] = db_result($result, $j, 0);
				}
				
				$values[$j]= db_result($result, $j, 1);
			}
			$results['names'] = $names;
			$results['values'] = $values;

		}
		return $results;
	}
	
	/**
	 *
	 * Get open artifacts grouped by field
	 *
	 * @return boolean
	 */
	function getOpenArtifactsByField($field) {
	
		$sql="SELECT ".$field->getValueFieldName().", count(*) AS Count FROM artifact_field_value, artifact ".
		" WHERE  artifact.group_artifact_id='".$this->getID()."' ".
		" AND artifact_field_value.artifact_id=artifact.artifact_id".
		" AND artifact_field_value.field_id=".$field->getID().
		" AND artifact.status_id=1".  
		" GROUP BY ".$field->getValueFieldName();
		
		$result = db_query($sql);
		if ($result && db_numrows($result) > 0) {
			for ($j=0; $j<db_numrows($result); $j++) {
				if ( $field->isSelectBox() || $field->isMultiSelectBox() ) {
					$labelValue = $field->getLabelValues($this->getID(), array(db_result($result, $j, 0)));
					$names[$j] = $labelValue[0];
				} else {
					$names[$j] = db_result($result, $j, 0);
				}
				
				$values[$j]= db_result($result, $j, 1);
			}
			$results['names'] = $names;
			$results['values'] = $values;
		
		}
		return $results;
	}
	


	/**
	 * Check if for a user and for role, there is a changement
	 *
	 * @param user_id: the user id
	 * @param role: the role
	 * @param changes: array of changes
	 *
	 * @return boolean
	 */
	function checkNotification($user_id, $role, $changes=false) {
	
	    $send = false;
	    $arr_notif = $this->buildNotificationMatrix($user_id);
	    if (!$arr_notif) { return true; }
	
	    // echo "==== DBG Checking Notif. for $user_id (role=$role)<br>";
	    $user_name = user_getname($user_id);
	
	    //----------------------------------------------------------
	    // If it's a new bug only (changes is false) check the NEW_BUG event and
	    // ignore all other events
	    if ($changes==false) {
			if ($arr_notif[$role]['NEW_ARTIFACT']) {
			    // echo "DBG NEW_ARTIFACT notified<br>";
			    return true;
			} else {
			    // echo "DBG No notification<br>";
			    return false;
			}
	    }
	
	    //----------------------------------------------------------
	    //Check: I_MADE_IT  (I am the author of the change )
	    // Check this one first because if the user said no she doesn't want to be 
	    // aware of any of her change in this role and we can return immediately.
	    if (($user_id == user_getid()) && !$arr_notif[$role]['I_MADE_IT']) {
			// echo "DBG Dont want to receive my own changes<br>";
			return false;
	    }
	    
	    //----------------------------------------------------------
	    // Check :  NEW_COMMENT  A new followup comment is added 
	    if ($arr_notif[$role]['NEW_COMMENT'] && isset($changes['details'])) {
			// echo "DBG NEW_COMMENT notified<br>";
			return true;
	    }
	
	    //----------------------------------------------------------
	    //Check: NEW_FILE  (A new file attachment is added)
	    if ($arr_notif[$role]['NEW_FILE'] && isset($changes['attach'])) {
			// echo "DBG NEW_FILE notified<br>";
			return true;
	    }
	  
	    //----------------------------------------------------------
	    //Check: CLOSED  (The bug is closed)
	    // Rk: this one has precedence over PSS_CHANGE. So notify even if PSS_CHANGE
	    // says no.
	    if ($arr_notif[$role]['CLOSED'] && ($changes['status_id']['add'] == 'Closed')) {
			// echo "DBG CLOSED bug notified<br>";
			return true;
	    }
	
	    //----------------------------------------------------------
	    //Check: PSS_CHANGE  (Priority,Status,Severity changes)
	    if ($arr_notif[$role]['PSS_CHANGE'] && 
		(isset($changes['priority']) || isset($changes['status_id']) || isset($changes['severity'])) ) {
			// echo "DBG PSS_CHANGE notified<br>";
			return true;
	    }
	
	
	    //----------------------------------------------------------
	    // Check :  ROLE_CHANGE (I'm added to or removed from this role)
	    // Rk: This event is meanningless for Commenters. It also is for submitter but may be
	    // one day the submitter will be changeable by the project admin so test it.
	    // Rk #2: check this one at the end because it is the most CPU intensive and this
	    // event seldomly happens
	    if ($arr_notif['SUBMITTER']['ROLE_CHANGE'] &&
		(($changes['submitted_by']['add'] == $user_name) || ($changes['submitted_by']['del'] == $user_name)) &&
		($role == 'SUBMITTER') ) {
			// echo "DBG ROLE_CHANGE for submitter notified<br>";
			return true;
	    }
	
	    if ($arr_notif['ASSIGNEE']['ROLE_CHANGE'] &&
		(($changes['assigned_to']['add'] == $user_name) || ($changes['assigned_to']['del'] == $user_name)) &&
		($role == 'ASSIGNEE') ) {
			// echo "DBG ROLE_CHANGE for role assignee notified<br>";
			return true;
	    }
	
	    $arr_cc_changes = array();
	    if (isset($changes['CC']['add']))
			$arr_cc_changes = split('[,;]',$changes['CC']['add']);
	    $arr_cc_changes[] = $changes['CC']['del'];
	    $is_user_in_cc_changes = in_array($user_name,$arr_cc_changes);    
	    $are_anyother_user_in_cc_changes =
		(!$is_user_in_cc_changes || count($arr_cc_changes)>1);    
	
	    if ($arr_notif['CC']['ROLE_CHANGE'] && ($role == 'CC')) {
			if ($is_user_in_cc_changes) {
			    // echo "DBG ROLE_CHANGE for cc notified<br>";
			    return true;
			}
	    }
	    
	    //----------------------------------------------------------
	    //Check: CC_CHANGE  (CC_CHANGE is added or removed)
	    // check this right after because  role cahange for cc can contradict
	    // thee cc_change notification. If the role change on cc says no notification
	    // then it has precedence over a cc_change
	    if ($arr_notif[$role]['CC_CHANGE'] && isset($changes['CC'])) {
			// it's enough to test role against 'CC' because if we are at that point
			// it means that the role_change for CC was false or that role is not CC
			// So if role is 'CC' and we are here it means that the user asked to not be
			// notified on role_change as CC, unless other users are listed in the cc changes
			if (($role != 'CC') || (($role == 'CC') && $are_anyother_user_in_cc_changes)) {
			    // echo "DBG CC_CHANGE notified<br>";
			    return true; 
			}
	    }
	
	
	    //----------------------------------------------------------
	    //Check: CHANGE_OTHER  (Any changes not mentioned above)
	    // *** THIS ONE MUST ALWAYS BE TESTED LAST
	    
	    // Delete all tested fields from the $changes array. If any remains then it
	    // means a notification must be sent
	    unset($changes['details']);
	    unset($changes['attach']);
	    unset($changes['priority']);
	    unset($changes['severity']);
	    unset($changes['status_id']);
	    unset($changes['CC']);
	    unset($changes['assigned_to']);
	    unset($changes['submitted_by']);
	    if ($arr_notif[$role]['ANY_OTHER_CHANGE'] && count($changes)) {
			// echo "DBG ANY_OTHER_CHANGE notified<br>";
			return true;
	    }
	
	    // Sorry, no notification...
	    // echo "DBG No notification!!<br>";
	    return false;
	}

	/**
	 * Build the matrix role/event=notify
	 *
	 * @param user_id: the user id
	 *
	 * @return array
	 */
	function buildNotificationMatrix($user_id) {
	
	    // Build the notif matrix indexed with roles and events labels (not id)
	    $res_notif = $this->getNotificationWithLabels($user_id);
	    while ($arr = db_fetch_array($res_notif)) {
			//echo "<br>".$arr['role_label']." ".$arr['event_label']." ".$arr['notify'];
			$arr_notif[$arr['role_label']][$arr['event_label']] = $arr['notify'];
	    }
	    return $arr_notif;
	}

	/**
	 * Retrieve the matrix role/event=notify from the db
	 *
	 * @param user_id: the user id
	 *
	 * @return array
	 */
	function getNotificationWithLabels($user_id) {
		
		$group = $this->getGroup();
		$group_artifact_id = $this->getID();
		
	    $sql = "SELECT role_label,event_label,notify FROM artifact_notification_role r, artifact_notification_event e,artifact_notification n ".
		"WHERE n.group_artifact_id=$group_artifact_id AND n.user_id=$user_id AND ".
		"n.role_id=r.role_id AND r.group_artifact_id=$group_artifact_id AND ".
		"n.event_id=e.event_id AND e.group_artifact_id=$group_artifact_id";

/*
	$sql = "SELECT role_label,event_label,notify FROM artifact_notification_role_default r, artifact_notification_event_default e,artifact_notification n ".
		"WHERE n.user_id=$user_id AND ".
		"n.role_id=r.role_id AND ".
		"n.event_id=e.event_id";
*/
	    //echo $sql."<br>";
	    return db_query($sql);
	    
	    
	}

	/**
	 * Retrieve the next free field id (computed by max(id)+1)
	 *
	 * @return int
	 */
	function getNextFieldID() {
		$sql = "SELECT max(field_id)+1 FROM artifact_field WHERE group_artifact_id=".$this->getID();
			   
		$result = db_query($sql);
	    if ($result && db_numrows($result) > 0) {
	    	return db_result($result, 0, 0);
	    } else {
	    	return -1;
	    }
	}

	/**
	 * Return a field name built using an id
	 *
	 * @param id: the id used to build the field name
	 *
	 * @return array
	 */
	function buildFieldName($id) {
		return "field_".$id;
	}
	
	/**
	 * Return the different elements for building the export query
	 *
	 * @param fields: the field list
	 * @param select: the select value
	 * @param from: the from value
	 * @param where: the where value
	 *
	 * @return void
	 */
	function getExportQueryElements($fields,&$select,&$from,&$where) {
		
		//
		// NOTICE
		//
		// We can't use left join because the performs are very bad.
		// So the restriction to this: all fields used in the query must have a value.
		// That involves artifact creation or artifact admin (add a field) must create
		// empty records with default values for fields which haven't a value (from the user).
		//
		/* The query must be something like this :
			SELECT a.artifact_id,u.user_name,v1.valueInt,v2.valueText,u3.user_name
			FROM artifact a, artifact_field_value v1, artifact_field_value v2, artifact_field_value v3, user u3, user u
			WHERE a.group_artifact_id = 100 and 
			a.artifact_id = v1.artifact_id and v1.field_id=101 and
			a.artifact_id = v2.artifact_id and v2.field_id=103 and
			a.artifact_id = v3.artifact_id and v3.field_id=104 and v3.valueInt = u3.user_id and
			a.submitted_by = u.user_id
			group by a.artifact_id
			order by v3.valueText,v1.valueInt
		*/

		$count = 1;
		
		$select = "SELECT ";
		$from = "FROM artifact a";
		$where = "WHERE a.group_artifact_id = ".$this->getID(); 
				
		$user_table = false;
		$select_count = 0;
		
		if ( count($fields) == 0 )
			return;

		while (list($key,$field) = each($fields) ) {
			
			//echo $field->getName()."-".$field->getID()."<br>";
			
			// If the field is a standard field ie the value is stored directly into the artifact table (severity, artifact_id, ...)
			if ( $field->isStandardField() ) {
				if ( $select_count != 0 ) {
					$select .= ",";
					$select_count ++;
				} else {
					$select_count = 1;
				}

				// Special case for fields which are user name
				if ( ($field->isUsername())&&(!$field->isSelectBox())&&(!$field->isMultiSelectBox()) ) {
					$select .= " u.user_name as ".$field->getName();
					$where .= " and a.".$field->getName()." = u.user_id";
					if ( !$user_table ) 
						$from .= ", user u";
				} else {
					$select .= " a.".$field->getName();
				}
				
			} else {
				
				// Special case for comment_type_id field - No data stored in artifact_field_value
				if ( $field->getName() != "comment_type_id" ) {
					// The field value is stored into the artifact_field_value table
					// So we need to add a new join
					if ( $select_count != 0 ) {
						$select .= ",";
						$select_count ++;
					} else {
						$select_count = 1;
					}
	
					// Special case for fields which are user name
					if ( ($field->isUsername())&&(!$field->isSelectBox())&&(!$field->isMultiSelectBox()) ) {
						$select .= " u".$count.".user_name as ".$field->getName();
						$where .= " and v".$count.".".$field->getValueFieldName()." = u".$count.".user_id";
						$from .= ", user u".$count;
					} else {
						$select .= " v".$count.".".$field->getValueFieldName()." as ".$field->getName();
					}
					$from .= ", artifact_field_value v".$count;
					$where .= " and a.artifact_id = v".$count.".artifact_id and v".$count.".field_id=".$field->getID();
						
					$count ++;
				}
			}

		}
		
	}
	
	
	/**
	 * Return the query string, for export
	 *
	 * @param fields (OUT): the field list 
	 * @param col_list (OUT): the field name list
	 * @param lbl_list (OUT): the field label list
	 * @param dsc_list (OUT): the field description list
	 *
	 * @return string: the sql query
	 */
	function buildExportQuery(&$fields,&$col_list,&$lbl_list,&$dsc_list) {
		global $art_field_fact;
		
		$fields = $art_field_fact->getAllUsedFields();

		reset($fields);
		while (list(,$field) = each($fields) ) {
			if ( $field->getName() != "comment_type_id" ) {
				$col_list[$field->getName()] = $field->getName();
				$lbl_list[$field->getName()] = $field->getLabel();
				$dsc_list[$field->getName()] = $field->getDescription();
			}
		}
		
		$this->getExportQueryElements($fields,$select,$from,$where);
		
		$sql = $select." ".$from." ".$where." group by a.artifact_id";
		//echo $sql;
		
		return $sql;
	}
	
}

?>
