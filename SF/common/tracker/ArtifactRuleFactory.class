<?php
require_once('common/dao/ArtifactRuleDao.class');
require_once('common/dao/ArtifactRuleTargetValuesDao.class');

require_once('ArtifactRule.class');

/**
 * Copyright (c) Xerox Corporation, CodeX Team, 2001-2005. All rights reserved
 * 
 * $Id$
 *
 * PluginFactory
 */
class ArtifactRuleFactory {
    
    var $rules_dao;
    var $target_values_dao;
    var $rules;
    
    function ArtifactRuleFactory(&$rules_dao, &$target_values_dao) {
        $this->rules_dao         =& $rules_dao;
        $this->target_values_dao =& $target_values_dao;
        
        $this->rules = array();
    }
    
    function &instance() {
        static $_artifactrulefactory_instance;
        if (!$_artifactrulefactory_instance) {
            $rules_dao         =& new ArtifactRuleDao(CodexDataAccess::instance());
            $target_values_dao =& new ArtifactRuleTargetValuesDao(CodexDataAccess::instance());
            $_artifactrulefactory_instance = new ArtifactRuleFactory($rules_dao, $target_values_dao);
        }
        return $_artifactrulefactory_instance;
    }

    function & getRuleById($id) {
        if (!isset($this->rules[$id])) {
            $this->rules[$id] = null;
            //We retrieve rule
            $dar =& $this->rules_dao->searchById($id);
            if ($dar && ($rule_row = $dar->getRow())) {
                $this->rules[$id] =& $this->_buildRuleInstance($rule_row['id'], $rule_row['group_artifact_id'], $rule_row['source_field_id'], $rule_row['source_value_id'], $rule_row['target_field_id']);
            }
        }
        return $this->rules[$id];
    }
    
    function getAllRulesByArtifactTypeWithOrder($artifact_type) {
        $dar =& $this->rules_dao->searchByGroupArtifactIdWithOrder($artifact_type);
        $rules = array();
        while($rule_row = $dar->getRow()) {
            if (!isset($this->rules[$rule_row['id']])) {
                $this->rules[$rule_row['id']] =& $this->_buildRuleInstance($rule_row['id'], $artifact_type, $rule_row['source_field_id'], $rule_row['source_value_id'], $rule_row['target_field_id']);
            }
            $rules[] =& $this->rules[$rule_row['id']];
        }
        return $rules;
    }
    
    function &_buildRuleInstance($rule_id, $group_artifact_id, $source_field, $source_value, $target_field) {
        $rule = false;
        //We retrieve values for target
        $dar =& $this->target_values_dao->searchByRuleId($rule_id);
        if ($dar) {
            $target_values = array();
            while ($row =& $dar->getRow()) {
                $target_values[] = $row['value_id'];
            }
            //We create Rule
            $rule =& new ArtifactRule($rule_id, $group_artifact_id, $source_field, $source_value, $target_field, $target_values);
        }
        return $rule;
    }
    
    function saveRule($group_artifact_id, $source, $source_value, $target, $target_values) {
        //need transaction ?
        //Search for existing one with same parameters
        $dar = $this->rules_dao->searchByGroupArtifactIdAndSourceAndSourceValueAndTarget($group_artifact_id, $source, $source_value, $target);
        if ($dar && ($row = $dar->getRow())) {
            $rule_id = $row['id'];
            $this->target_values_dao->deleteByRuleId($rule_id);
        } else {
            //Create new one
            $rule_id = $this->rules_dao->create($group_artifact_id, $source, $source_value, $target);
        }
        if ($rule_id) {
            $this->target_values_dao->create($rule_id, $target_values);
        }
    }
    
    function deleteRule($rule_id) {
        $deleted = $this->target_values_dao->deleteByRuleId($rule_id);
        if ($deleted) {
            $deleted = $this->rules_dao->deleteById($rule_id);
        }
        return $deleted;
    }

}
?>