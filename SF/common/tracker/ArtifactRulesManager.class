<?php
/**
 * Copyright (c) Xerox Corporation, CodeX Team, 2001-2005. All rights reserved
 *
 * Originally written by Nicolas Terray, 2006
 *
 * This file is a part of CodeX.
 *
 * CodeX is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * CodeX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CodeX; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */


require_once('ArtifactRuleFactory.class');

/**
* Manager of rules
*
* This is only a proxy to access the factory. 
* Maybe there is no need to have this intermediary?
*/
class ArtifactRulesManager {


	function ArtifactRulesManager() {
    }
    
    function getAllRulesByArtifactTypeWithOrder($artifact_type) {
		$fact =& ArtifactRuleFactory::instance();
        return $fact->getAllRulesByArtifactTypeWithOrder($artifact_type);
	}
    
    function saveRuleValue($artifact_type, $source, $source_value, $target, $target_value) {
        $fact =& ArtifactRuleFactory::instance();
        return $fact->saveRuleValue($artifact_type, $source, $source_value, $target, $target_value);
    }
    
    function deleteRule($rule_id) {
        $fact =& ArtifactRuleFactory::instance();
        return $fact->deleteRule($rule_id);
    }
    
    function deleteRuleValueBySource($artifact_type, $source, $source_value, $target) {
        $fact =& ArtifactRuleFactory::instance();
        return $fact->deleteRuleValueBySource($artifact_type, $source, $source_value, $target);
    }
    
    function deleteRuleValueByTarget($artifact_type, $source, $target, $target_value) {
        $fact =& ArtifactRuleFactory::instance();
        return $fact->deleteRuleValueByTarget($artifact_type, $source, $target, $target_value);
    }
    
    function &_getArtifactRuleFactory() {
        return ArtifactRuleFactory::instance();
    }
    
    function deleteRulesByArtifactType($artifact_type) {
        $fact =& ArtifactRuleFactory::instance();
        return $fact->deleteRulesByArtifactType($artifact_type);
    }
    function deleteRulesByFieldId($artifact_type, $field_id) {
        $fact =& ArtifactRuleFactory::instance();
        return $fact->deleteRulesByFieldId($artifact_type, $field_id);
    }
    function deleteRulesByValueId($artifact_type, $field_id, $value_id) {
        $fact =& ArtifactRuleFactory::instance();
        return $fact->deleteRulesByValueId($artifact_type, $field_id, $value_id);
    }
    
    function copyRules($from_artifact_type, $to_artifact_type) {
        $fact =& ArtifactRuleFactory::instance();
        return $fact->copyRules($from_artifact_type, $to_artifact_type);
    }
}

?>
