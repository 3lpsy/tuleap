<?php
require_once('common/event/EventManager.class');

require_once('common/plugin/PluginFactory.class');
require_once('common/plugin/PluginHookPriorityManager.class');

require_once('common/dao/DBTablesDao.class');
require_once('common/dao/CodexDataAccess.class');

require_once('common/include/String.class');

/**
 * Copyright (c) Xerox Corporation, CodeX Team, 2001-2005. All rights reserved
 * 
 * $Id$
 *
 * PluginManager
 */
class PluginManager {
    
    var $plugins_loaded;
    var $pluginHookPriorityManager;
    
    function PluginManager() {
        $this->plugins_loaded = false;
    }
    
    function loadPlugins() {
        $plugin_factory =& $this->_getPluginFactory();
        $event_manager  =& $this->_getEventManager();
        
        $col_available_plugins =& $plugin_factory->getAvailablePlugins();
        $available_plugins =& $col_available_plugins->iterator();
        $priority_manager =& $this->_getPluginHookPriorityManager();
        while($available_plugins->valid()) {
            $plugin =& $available_plugins->current();
            $hooks =& $plugin->getHooksAndCallbacks();
            $iter =& $hooks->iterator();
            while($iter->valid()) {
                $hook =& $iter->current();
                $priority = $priority_manager->getPriorityForPluginHook($plugin, $hook['hook']);
                $event_manager->addListener($hook['hook'], $plugin, $hook['callback'], $hook['recallHook'], $priority);
                $iter->next();
            }
            $available_plugins->next();
        }
        $this->plugins_loaded = true;
    }
    
    function &_getPluginFactory() {
        return PluginFactory::instance();
    }
    
    function &_getEventManager() {
        return EventManager::instance();
    }
    
    function &_getPluginHookPriorityManager() {
        if (!is_a($this->pluginHookPriorityManager, 'PluginHookPriorityManager')) {
            $this->pluginHookPriorityManager =& new PluginHookPriorityManager();
        }
        return $this->pluginHookPriorityManager;
    }
    
    function isPluginsLoaded() {
        return $this->plugins_loaded;
    }
    
    function &instance() {
        static $_pluginmanager_instance;
        if (!$_pluginmanager_instance) {
            $_pluginmanager_instance = new PluginManager();
        }
        return $_pluginmanager_instance;
    }
    
    function &getAllPlugins() {
        $plugin_factory =& $this->_getPluginFactory();
        return $plugin_factory->getAllPlugins();
    }
    
    function isPluginAvailable(&$plugin) {
        $plugin_factory =& $this->_getPluginFactory();
        return $plugin_factory->isPluginAvailable($plugin);
    }
    
    function availablePlugin(&$plugin) {
        $plugin_factory =& $this->_getPluginFactory();
        $plugin_factory->availablePlugin($plugin);
    }
    function unavailablePlugin(&$plugin) {
        $plugin_factory =& $this->_getPluginFactory();
        $plugin_factory->unavailablePlugin($plugin);
    }
    
    function &installPlugin($name) {
        if ($this->isNameValid($name)) {
            $plugin_factory =& $this->_getPluginFactory();
            if (!$plugin_factory->isPluginInstalled($name)) {
                $db_corrupted = false;
                $install_sql_filename = $GLOBALS['sys_pluginsroot'].DIRECTORY_SEPARATOR.$name.DIRECTORY_SEPARATOR.'db'.DIRECTORY_SEPARATOR.'install.sql';
                if (file_exists($install_sql_filename)) {
                    $dbtables =& new DBTablesDAO(CodexDataAccess::instance());
                    $install_sql = file_get_contents($install_sql_filename);
                    if (trim($install_sql) != '' && !$dbtables->update($install_sql)) {
                        $db_corrupted = true;
                        $GLOBALS['feedback'] .= 'DB may be corrupted';
                    }
                }
                if (!$db_corrupted) {
                    $plugin_factory =& $this->_getPluginFactory();
                    return $plugin_factory->createPlugin($name);
                }
            }
        }
        return false;
    }
    
    function uninstallPlugin(&$plugin) {
        $plugin_factory =& $this->_getPluginFactory();
        $name = $plugin_factory->getNameForPlugin($plugin);
        $db_corrupted = false;
        $uninstall_sql_filename = $GLOBALS['sys_pluginsroot'].DIRECTORY_SEPARATOR.$name.DIRECTORY_SEPARATOR.'db'.DIRECTORY_SEPARATOR.'uninstall.sql';
        if (file_exists($uninstall_sql_filename)) {
            $dbtables =& new DBTablesDAO(CodexDataAccess::instance());
            $uninstall_sql = file_get_contents($uninstall_sql_filename);
            if (trim($uninstall_sql) != '' && !$dbtables->update($uninstall_sql)) {
                $db_corrupted = true;
            }
        }
        if (!$db_corrupted) {
            $phpm =& $this->_getPluginHookPriorityManager();
            $phpm->removePlugin($plugin);
            $plugin_factory =& $this->_getPluginFactory();
            return $plugin_factory->removePlugin($plugin);
        } else {
            return false;
        }
    }
    
    function &getNotYetInstalledPlugins() {
        $plugin_factory =& $this->_getPluginFactory();
        return $plugin_factory->getNotYetInstalledPlugins(); 
    }
    
    function isNameValid($name) {
        return (0 === preg_match('/[^a-zA-Z0-9_-]/', $name));
    }
}
?>