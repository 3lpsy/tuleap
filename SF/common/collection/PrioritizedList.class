<?php
require_once('LinkedList.class');
require_once('ArrayListIterator.class');

/**
 * Copyright (c) Xerox Corporation, CodeX Team, 2001-2005. All rights reserved
 * 
 * $Id$
 *
 * PrioritizedList
 */
class PrioritizedList extends LinkedList{
    
    var $priorities;
    
    function PrioritizedList($initial_array = '') {
        $this->LinkedList($initial_array);
        $this->priorities = array();
    }
    
    /**
     * add the element add the end of the PrioritizedList
     */
    function add(&$element, $priority = 0) {
        //We search the next position
        reset($this->priorities);
        $last_position = 0;
        $position = 0;
        while(list($key, $val) = each($this->priorities)) {
            $last_position = $position;
            $position = $val + 1;
            if ($key >= $priority) {
                break;
            }
        }
        if ($key !== NULL && $priority < $key) {
            $position = $last_position;
        }
        //We insert the priority
        $this->priorities[$priority] = $position;
        ksort($this->priorities);
        foreach($this->priorities as $key => $val) {
            if ($val > $position) {
                $this->priorities[$key] = $val + 1;
            }
        }
        //We insert the element
        $temp = array();
        $temp[] =& $element;
        $this->elements = array_merge(
            array_slice($this->elements, 0, $position),
            $temp,
            array_slice($this->elements, $position));
    }
    
    function &iterator() {
        $tab = $this->elements;
        if (count($tab) > 1) {
            reset($this->priorities);
            list($i, $val_i) = each($this->priorities);
            $tab = array_merge(
                array_reverse(array_slice($tab, 0, $val_i+1)),
                array_slice($tab, $val_i+1)
            );
            while(list($j, $val_j) = each($this->priorities)) {
               if ($val_j - $val_i > 1) { //if there is more than one element for a priority
                    $tab = array_merge(
                        array_slice($tab, 0, $val_i+1),
                        array_reverse(array_slice($tab, $val_i+1, $val_j-$val_i)),
                        array_slice($tab, $val_j+1)
                    );
                }
                $i     = $j;
                $val_i = $val_j;
            }
            $tab = array_reverse($tab);
        }
        $it =& new ArrayListIterator($tab);
        return $it;
    }
}
?>