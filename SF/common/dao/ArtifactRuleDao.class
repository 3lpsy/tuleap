<?php
//
// Copyright (c) Xerox Corporation, CodeX Team, 2001-2005. All rights reserved
//
// $Id$
//

require_once('include/DataAccessObject.class');

/**
 *  Data Access Object for ArtifactRule 
 */
class ArtifactRuleDao extends DataAccessObject {
    /**
    * Constructs the ArtifactRuleDao
    * @param $da instance of the DataAccess class
    */
    function ArtifactRuleDao( & $da ) {
        DataAccessObject::DataAccessObject($da);
    }
    
    /**
    * Gets all tables of the db
    * @return DataAccessResult
    */
    function & searchAll() {
        $sql = "SELECT * FROM artifact_rule";
        return $this->retrieve($sql);
    }
    
    /**
    * Searches ArtifactRule by Id 
    * @return DataAccessResult
    */
    function & searchById($id) {
        $sql = sprintf("SELECT group_artifact_id, source_field_id, source_value_id, target_field_id FROM artifact_rule WHERE id = %s",
				$this->da->quoteSmart($id));
        return $this->retrieve($sql);
    }

    /**
    * Searches ArtifactRule by GroupArtifactId 
    * @return DataAccessResult
    */
    function & searchByGroupArtifactId($groupArtifactId) {
        $sql = sprintf("SELECT id, source_field_id, source_value_id, target_field_id FROM artifact_rule WHERE group_artifact_id = %s",
				$this->da->quoteSmart($groupArtifactId));
        return $this->retrieve($sql);
    }

    /**
    * Searches ArtifactRule by GroupArtifactId 
    * @return DataAccessResult
    */
    function & searchByGroupArtifactIdWithOrder($groupArtifactId) {
        $sql = sprintf("SELECT ar.id, ar.source_field_id, ar.source_value_id, ar.target_field_id ".
                       " FROM artifact_rule AS ar ".
                       "   INNER JOIN artifact_field_usage AS afu1 ON (ar.source_field_id = afu1.field_id AND ar.group_artifact_id = afu1.group_artifact_id) ".
                       "   INNER JOIN artifact_field_usage AS afu2 ON (ar.target_field_id = afu2.field_id AND ar.group_artifact_id = afu2.group_artifact_id) ".
                       "   INNER JOIN artifact_field_value_list AS afvl ".
                       "      ON (ar.source_field_id = afvl.field_id AND ar.group_artifact_id = afvl.group_artifact_id AND ar.source_value_id = afvl.value_id) ".
                       " WHERE ar.group_artifact_id = %s ".
                       " ORDER BY afu1.place, afu2.place, afvl.order_id, ar.id",
				$this->da->quoteSmart($groupArtifactId));
        return $this->retrieve($sql);
    }

    /**
    * Searches ArtifactRule by SourceFieldId 
    * @return DataAccessResult
    */
    function & searchBySourceFieldId($sourceFieldId) {
        $sql = sprintf("SELECT id, group_artifact_id, source_value_id, target_field_id FROM artifact_rule WHERE source_field_id = %s",
				$this->da->quoteSmart($sourceFieldId));
        return $this->retrieve($sql);
    }

    /**
    * Searches ArtifactRule by SourceValueId 
    * @return DataAccessResult
    */
    function & searchBySourceValueId($sourceValueId) {
        $sql = sprintf("SELECT id, group_artifact_id, source_field_id, target_field_id FROM artifact_rule WHERE source_value_id = %s",
				$this->da->quoteSmart($sourceValueId));
        return $this->retrieve($sql);
    }

    /**
    * Searches ArtifactRule by TargetFieldId 
    * @return DataAccessResult
    */
    function & searchByTargetFieldId($targetFieldId) {
        $sql = sprintf("SELECT id, group_artifact_id, source_field_id, source_value_id FROM artifact_rule WHERE target_field_id = %s",
				$this->da->quoteSmart($targetFieldId));
        return $this->retrieve($sql);
    }


    /**
    * create a row in the table artifact_rule 
    * @return true or id(auto_increment) if there is no error
    */
    function create($group_artifact_id, $source_field_id, $source_value_id, $target_field_id) {
		$sql = sprintf("INSERT INTO artifact_rule (group_artifact_id, source_field_id, source_value_id, target_field_id) VALUES (%s, %s, %s, %s)",
				$this->da->quoteSmart($group_artifact_id),
				$this->da->quoteSmart($source_field_id),
				$this->da->quoteSmart($source_value_id),
				$this->da->quoteSmart($target_field_id));
        $inserted = $this->update($sql);
        if ($inserted) {
            $dar =& $this->retrieve("SELECT LAST_INSERT_ID() AS id");
            if ($row = $dar->getRow()) {
                $inserted = $row['id'];
            } else {
                $inserted = $dar->isError();
            }
        } 
        return $inserted;
    }

    function searchByGroupArtifactIdAndSourceAndSourceValueAndTarget($group_artifact_id, $source_field_id, $source_value_id, $target_field_id) {
        $sql = sprintf("SELECT id FROM artifact_rule WHERE group_artifact_id = %s AND source_field_id = %s AND source_value_id = %s AND target_field_id = %s ORDER BY id",
				$this->da->quoteSmart($group_artifact_id),
				$this->da->quoteSmart($source_field_id),
				$this->da->quoteSmart($source_value_id),
				$this->da->quoteSmart($target_field_id));
        return $this->retrieve($sql);
    }
    
    function deleteById($id) {
        $sql = sprintf("DELETE FROM artifact_rule WHERE id = %s",
				$this->da->quoteSmart($id));
        return $this->update($sql);
    }
}


?>